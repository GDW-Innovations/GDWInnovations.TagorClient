/*
 * Tagor API
 *
 * Release date: 29/09/2022  ## REQUIREMENTS This version __requires__ Tagor >= 2.00.0000B0. Use [`Config/Info`](#operation/ConfigInfo) to get the active API version.  ## CHANGELOG - New [`Dossier/CreateAgenda`](#operation/DossierCreateAgenda) endpoint. - New return values in GetAgenda 'TJOB_Id, TJOBM_Id, TUSER_Id, Manueel and IsGeblokkeerd' - In CreateLine you can now add if the line is fixed with 'IsFixed' - In CreateLine you can now add a subarray with the intrests  ## INFO - Using the download button at the top you can import this collection of endpoints in **Postman** - In general all TQ(...)_Id fields are default fields which you can translate with the [`Code/GetDescription`](#operation/CodeGetDescription) endpoint. If you need an id to post to one of the endpoints you can use the [`Code/GetList`](#operation/CodeGetList) endpoint to get all possible values or [`Code/GetDescription`](#operation/CodeGetDescription) to get a value by code. These id's will be marked as `code id` in the documentation. - We chose to return all ids as string because these are 64bit integers which are too big for javascript to handle. - All italic text below the endpoint description is meant for people with access to Tagor. - The user needs an email address configured in Tagor for the services to work properly. - Pass the `Accept` header with `application/json` as value to have the server return errors in json format. - Most endpoints can be batched/paged by passing a `BATCH-SIZE` and `BATCH-NUMBER` record in `dsWebContext`.  # AUTHENTICATION Pass your token via an `Authorization` header like this: `Authorization: {bearer_format} {token}`.  ex: `Authorization: TGR IcoQbVw7wE...PPUPda61ET` <!- - ReDoc-Inject: <security-definitions> - ->
 *
 * The version of the OpenAPI document: 2.00.0000B1
 * Contact: info@organi.be
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Microsoft.Extensions.Logging;
using GDWInnovations.TagorClient.Client;
using GDWInnovations.TagorClient.Model;

namespace GDWInnovations.TagorClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// User/Add
        /// </summary>
        /// <remarks>
        /// Add/Create a user. Pass the &#x60;TPAR_Id&#x60; if you want to create a &#x60;User&#x60; for an existing &#x60;Party&#x60;.  Optional you can pass a &#x60;BASE-USER&#x60; context record with as value a &#x60;TUSER_Id&#x60; to inherit the web configuration of this user.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userAddRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserAdd200Response</returns>
        UserAdd200Response UserAdd(UserAddRequest? userAddRequest = default(UserAddRequest?), int operationIndex = 0);

        /// <summary>
        /// User/Add
        /// </summary>
        /// <remarks>
        /// Add/Create a user. Pass the &#x60;TPAR_Id&#x60; if you want to create a &#x60;User&#x60; for an existing &#x60;Party&#x60;.  Optional you can pass a &#x60;BASE-USER&#x60; context record with as value a &#x60;TUSER_Id&#x60; to inherit the web configuration of this user.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userAddRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserAdd200Response</returns>
        ApiResponse<UserAdd200Response> UserAddWithHttpInfo(UserAddRequest? userAddRequest = default(UserAddRequest?), int operationIndex = 0);
        /// <summary>
        /// User/CanAccess
        /// </summary>
        /// <remarks>
        /// This endpoint returns the users that have access to the given asset. E.g. If you pass &#x60;TQDOSSOORT_Id&#x60;, you&#39;ll get all users allowed to view files of this type. Pass one or more of the following filetypes: - &#x60;TQDOSSOORT_Id&#x60; - &#x60;TPAR_Id&#x60;. For filtering a party regardless of type. - &#x60;TPAR|TQPARSOORT_Id&#x60;. For filtering a party with matching party type. Pass both &#x60;TPAR_Id&#x60; and &#x60;TQPARSOORT_Id&#x60; in a context record separated by a pipe. ex: &#x60;9000000000000000001|9000000000000000001&#x60;.   _This searches the values configured on the web configuration tab in the user managment._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserCanAccess200Response</returns>
        UserCanAccess200Response UserCanAccess(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0);

        /// <summary>
        /// User/CanAccess
        /// </summary>
        /// <remarks>
        /// This endpoint returns the users that have access to the given asset. E.g. If you pass &#x60;TQDOSSOORT_Id&#x60;, you&#39;ll get all users allowed to view files of this type. Pass one or more of the following filetypes: - &#x60;TQDOSSOORT_Id&#x60; - &#x60;TPAR_Id&#x60;. For filtering a party regardless of type. - &#x60;TPAR|TQPARSOORT_Id&#x60;. For filtering a party with matching party type. Pass both &#x60;TPAR_Id&#x60; and &#x60;TQPARSOORT_Id&#x60; in a context record separated by a pipe. ex: &#x60;9000000000000000001|9000000000000000001&#x60;.   _This searches the values configured on the web configuration tab in the user managment._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserCanAccess200Response</returns>
        ApiResponse<UserCanAccess200Response> UserCanAccessWithHttpInfo(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0);
        /// <summary>
        /// User/Get
        /// </summary>
        /// <remarks>
        /// Get a user by id
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserGet200Response</returns>
        UserGet200Response UserGet(UserGetRequest? userGetRequest = default(UserGetRequest?), int operationIndex = 0);

        /// <summary>
        /// User/Get
        /// </summary>
        /// <remarks>
        /// Get a user by id
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserGet200Response</returns>
        ApiResponse<UserGet200Response> UserGetWithHttpInfo(UserGetRequest? userGetRequest = default(UserGetRequest?), int operationIndex = 0);
        /// <summary>
        /// User/GetPermissions
        /// </summary>
        /// <remarks>
        /// Get all (single) permissions of a user. This will return all the permissions that are represented as a toggle in Tagor. i.e. all permissions on the &#x60;Web permissies&#x60; tab.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserGetPermissions200Response</returns>
        UserGetPermissions200Response UserGetPermissions(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0);

        /// <summary>
        /// User/GetPermissions
        /// </summary>
        /// <remarks>
        /// Get all (single) permissions of a user. This will return all the permissions that are represented as a toggle in Tagor. i.e. all permissions on the &#x60;Web permissies&#x60; tab.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserGetPermissions200Response</returns>
        ApiResponse<UserGetPermissions200Response> UserGetPermissionsWithHttpInfo(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0);
        /// <summary>
        /// User/GetPermissionsList
        /// </summary>
        /// <remarks>
        /// List all permissions of a user by type. Via this endpoint you&#39;ll be able to retreive al permissions with mutliple values. In general this endpoint is for all permissions on the &#x60;Web configuratie&#x60; tab in Tagor.  Possible type values: - &#x60;WEBT3001&#x60; or &#x60;TPAR&#x60; &#x3D; Party   - Get a list of parties + party types. These have to be on a file for a user to be allowed to view the file.   - Unlike the other types this will return a pipe separated value of both party id and party type id   - &#x60;WEBT3002&#x60; or &#x60;TQDOSSOORT&#x60; &#x3D; File type   - Returns a list of all file types a user is allowed to see   - &#x60;WEBT3006&#x60; or &#x60;TQDISGROEP&#x60; &#x3D; Document types   - Returns a list of all document types a user can use when adding a document   - &#x60;WEBT3007&#x60; or &#x60;WL_QRY_FIELD&#x60; &#x3D; Mergefields   - Returns a list of all mergefields a user is able to request with [&#x60;Document/GetMergefield&#x60;](#operation/DocumentGetMergefield)   - If a user doesn&#39;t have any mergefields configured the default setting from the office configuration screen will be used.   - &#x60;WEBT3005&#x60; or &#x60;TDOCM&#x60; &#x3D; Document types   - Returns a list of all &#x60;TDOCM_Ids&#x60; a user is able to request in [&#x60;Document/Generate&#x60;](#operation/DocumentGenerate)   - &#x60;WEBT3004&#x60; or &#x60;TQDOCSECURITY&#x60; &#x3D; Document security   - Returns a list of all document security types a user is able to see
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserGetPermissionsList200Response</returns>
        UserGetPermissionsList200Response UserGetPermissionsList(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0);

        /// <summary>
        /// User/GetPermissionsList
        /// </summary>
        /// <remarks>
        /// List all permissions of a user by type. Via this endpoint you&#39;ll be able to retreive al permissions with mutliple values. In general this endpoint is for all permissions on the &#x60;Web configuratie&#x60; tab in Tagor.  Possible type values: - &#x60;WEBT3001&#x60; or &#x60;TPAR&#x60; &#x3D; Party   - Get a list of parties + party types. These have to be on a file for a user to be allowed to view the file.   - Unlike the other types this will return a pipe separated value of both party id and party type id   - &#x60;WEBT3002&#x60; or &#x60;TQDOSSOORT&#x60; &#x3D; File type   - Returns a list of all file types a user is allowed to see   - &#x60;WEBT3006&#x60; or &#x60;TQDISGROEP&#x60; &#x3D; Document types   - Returns a list of all document types a user can use when adding a document   - &#x60;WEBT3007&#x60; or &#x60;WL_QRY_FIELD&#x60; &#x3D; Mergefields   - Returns a list of all mergefields a user is able to request with [&#x60;Document/GetMergefield&#x60;](#operation/DocumentGetMergefield)   - If a user doesn&#39;t have any mergefields configured the default setting from the office configuration screen will be used.   - &#x60;WEBT3005&#x60; or &#x60;TDOCM&#x60; &#x3D; Document types   - Returns a list of all &#x60;TDOCM_Ids&#x60; a user is able to request in [&#x60;Document/Generate&#x60;](#operation/DocumentGenerate)   - &#x60;WEBT3004&#x60; or &#x60;TQDOCSECURITY&#x60; &#x3D; Document security   - Returns a list of all document security types a user is able to see
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserGetPermissionsList200Response</returns>
        ApiResponse<UserGetPermissionsList200Response> UserGetPermissionsListWithHttpInfo(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0);
        /// <summary>
        /// User/SavePermissions
        /// </summary>
        /// <remarks>
        /// Save all (single) permissions of a user.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSavePermissionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserGetPermissions200Response</returns>
        UserGetPermissions200Response UserSavePermissions(UserSavePermissionsRequest? userSavePermissionsRequest = default(UserSavePermissionsRequest?), int operationIndex = 0);

        /// <summary>
        /// User/SavePermissions
        /// </summary>
        /// <remarks>
        /// Save all (single) permissions of a user.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSavePermissionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserGetPermissions200Response</returns>
        ApiResponse<UserGetPermissions200Response> UserSavePermissionsWithHttpInfo(UserSavePermissionsRequest? userSavePermissionsRequest = default(UserSavePermissionsRequest?), int operationIndex = 0);
        /// <summary>
        /// User/SavePermissionsList
        /// </summary>
        /// <remarks>
        /// Save a list of all permissions of a user by type. See [&#x60;User/GetPermissionsList&#x60;](#operation/UserGetPermissionsList) for all possible type values. All current values for the specified user + type will be deleted and overwritten with the posted valued. If you want to add a value use [&#x60;User/GetPermissionsList&#x60;](#operation/UserGetPermissionsList) to get all current values, add the value to the array and post it to this endpoint. Note: for the &#x60;TPAR&#x60; permissions two values are required and should be passed in the id field, seperated by a pipe.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSavePermissionsListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserGetPermissionsList200Response</returns>
        UserGetPermissionsList200Response UserSavePermissionsList(UserSavePermissionsListRequest? userSavePermissionsListRequest = default(UserSavePermissionsListRequest?), int operationIndex = 0);

        /// <summary>
        /// User/SavePermissionsList
        /// </summary>
        /// <remarks>
        /// Save a list of all permissions of a user by type. See [&#x60;User/GetPermissionsList&#x60;](#operation/UserGetPermissionsList) for all possible type values. All current values for the specified user + type will be deleted and overwritten with the posted valued. If you want to add a value use [&#x60;User/GetPermissionsList&#x60;](#operation/UserGetPermissionsList) to get all current values, add the value to the array and post it to this endpoint. Note: for the &#x60;TPAR&#x60; permissions two values are required and should be passed in the id field, seperated by a pipe.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSavePermissionsListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserGetPermissionsList200Response</returns>
        ApiResponse<UserGetPermissionsList200Response> UserSavePermissionsListWithHttpInfo(UserSavePermissionsListRequest? userSavePermissionsListRequest = default(UserSavePermissionsListRequest?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// User/Add
        /// </summary>
        /// <remarks>
        /// Add/Create a user. Pass the &#x60;TPAR_Id&#x60; if you want to create a &#x60;User&#x60; for an existing &#x60;Party&#x60;.  Optional you can pass a &#x60;BASE-USER&#x60; context record with as value a &#x60;TUSER_Id&#x60; to inherit the web configuration of this user.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userAddRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserAdd200Response</returns>
        System.Threading.Tasks.Task<UserAdd200Response> UserAddAsync(UserAddRequest? userAddRequest = default(UserAddRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// User/Add
        /// </summary>
        /// <remarks>
        /// Add/Create a user. Pass the &#x60;TPAR_Id&#x60; if you want to create a &#x60;User&#x60; for an existing &#x60;Party&#x60;.  Optional you can pass a &#x60;BASE-USER&#x60; context record with as value a &#x60;TUSER_Id&#x60; to inherit the web configuration of this user.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userAddRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserAdd200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserAdd200Response>> UserAddWithHttpInfoAsync(UserAddRequest? userAddRequest = default(UserAddRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// User/CanAccess
        /// </summary>
        /// <remarks>
        /// This endpoint returns the users that have access to the given asset. E.g. If you pass &#x60;TQDOSSOORT_Id&#x60;, you&#39;ll get all users allowed to view files of this type. Pass one or more of the following filetypes: - &#x60;TQDOSSOORT_Id&#x60; - &#x60;TPAR_Id&#x60;. For filtering a party regardless of type. - &#x60;TPAR|TQPARSOORT_Id&#x60;. For filtering a party with matching party type. Pass both &#x60;TPAR_Id&#x60; and &#x60;TQPARSOORT_Id&#x60; in a context record separated by a pipe. ex: &#x60;9000000000000000001|9000000000000000001&#x60;.   _This searches the values configured on the web configuration tab in the user managment._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserCanAccess200Response</returns>
        System.Threading.Tasks.Task<UserCanAccess200Response> UserCanAccessAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// User/CanAccess
        /// </summary>
        /// <remarks>
        /// This endpoint returns the users that have access to the given asset. E.g. If you pass &#x60;TQDOSSOORT_Id&#x60;, you&#39;ll get all users allowed to view files of this type. Pass one or more of the following filetypes: - &#x60;TQDOSSOORT_Id&#x60; - &#x60;TPAR_Id&#x60;. For filtering a party regardless of type. - &#x60;TPAR|TQPARSOORT_Id&#x60;. For filtering a party with matching party type. Pass both &#x60;TPAR_Id&#x60; and &#x60;TQPARSOORT_Id&#x60; in a context record separated by a pipe. ex: &#x60;9000000000000000001|9000000000000000001&#x60;.   _This searches the values configured on the web configuration tab in the user managment._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserCanAccess200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserCanAccess200Response>> UserCanAccessWithHttpInfoAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// User/Get
        /// </summary>
        /// <remarks>
        /// Get a user by id
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserGet200Response</returns>
        System.Threading.Tasks.Task<UserGet200Response> UserGetAsync(UserGetRequest? userGetRequest = default(UserGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// User/Get
        /// </summary>
        /// <remarks>
        /// Get a user by id
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserGet200Response>> UserGetWithHttpInfoAsync(UserGetRequest? userGetRequest = default(UserGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// User/GetPermissions
        /// </summary>
        /// <remarks>
        /// Get all (single) permissions of a user. This will return all the permissions that are represented as a toggle in Tagor. i.e. all permissions on the &#x60;Web permissies&#x60; tab.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserGetPermissions200Response</returns>
        System.Threading.Tasks.Task<UserGetPermissions200Response> UserGetPermissionsAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// User/GetPermissions
        /// </summary>
        /// <remarks>
        /// Get all (single) permissions of a user. This will return all the permissions that are represented as a toggle in Tagor. i.e. all permissions on the &#x60;Web permissies&#x60; tab.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserGetPermissions200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserGetPermissions200Response>> UserGetPermissionsWithHttpInfoAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// User/GetPermissionsList
        /// </summary>
        /// <remarks>
        /// List all permissions of a user by type. Via this endpoint you&#39;ll be able to retreive al permissions with mutliple values. In general this endpoint is for all permissions on the &#x60;Web configuratie&#x60; tab in Tagor.  Possible type values: - &#x60;WEBT3001&#x60; or &#x60;TPAR&#x60; &#x3D; Party   - Get a list of parties + party types. These have to be on a file for a user to be allowed to view the file.   - Unlike the other types this will return a pipe separated value of both party id and party type id   - &#x60;WEBT3002&#x60; or &#x60;TQDOSSOORT&#x60; &#x3D; File type   - Returns a list of all file types a user is allowed to see   - &#x60;WEBT3006&#x60; or &#x60;TQDISGROEP&#x60; &#x3D; Document types   - Returns a list of all document types a user can use when adding a document   - &#x60;WEBT3007&#x60; or &#x60;WL_QRY_FIELD&#x60; &#x3D; Mergefields   - Returns a list of all mergefields a user is able to request with [&#x60;Document/GetMergefield&#x60;](#operation/DocumentGetMergefield)   - If a user doesn&#39;t have any mergefields configured the default setting from the office configuration screen will be used.   - &#x60;WEBT3005&#x60; or &#x60;TDOCM&#x60; &#x3D; Document types   - Returns a list of all &#x60;TDOCM_Ids&#x60; a user is able to request in [&#x60;Document/Generate&#x60;](#operation/DocumentGenerate)   - &#x60;WEBT3004&#x60; or &#x60;TQDOCSECURITY&#x60; &#x3D; Document security   - Returns a list of all document security types a user is able to see
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserGetPermissionsList200Response</returns>
        System.Threading.Tasks.Task<UserGetPermissionsList200Response> UserGetPermissionsListAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// User/GetPermissionsList
        /// </summary>
        /// <remarks>
        /// List all permissions of a user by type. Via this endpoint you&#39;ll be able to retreive al permissions with mutliple values. In general this endpoint is for all permissions on the &#x60;Web configuratie&#x60; tab in Tagor.  Possible type values: - &#x60;WEBT3001&#x60; or &#x60;TPAR&#x60; &#x3D; Party   - Get a list of parties + party types. These have to be on a file for a user to be allowed to view the file.   - Unlike the other types this will return a pipe separated value of both party id and party type id   - &#x60;WEBT3002&#x60; or &#x60;TQDOSSOORT&#x60; &#x3D; File type   - Returns a list of all file types a user is allowed to see   - &#x60;WEBT3006&#x60; or &#x60;TQDISGROEP&#x60; &#x3D; Document types   - Returns a list of all document types a user can use when adding a document   - &#x60;WEBT3007&#x60; or &#x60;WL_QRY_FIELD&#x60; &#x3D; Mergefields   - Returns a list of all mergefields a user is able to request with [&#x60;Document/GetMergefield&#x60;](#operation/DocumentGetMergefield)   - If a user doesn&#39;t have any mergefields configured the default setting from the office configuration screen will be used.   - &#x60;WEBT3005&#x60; or &#x60;TDOCM&#x60; &#x3D; Document types   - Returns a list of all &#x60;TDOCM_Ids&#x60; a user is able to request in [&#x60;Document/Generate&#x60;](#operation/DocumentGenerate)   - &#x60;WEBT3004&#x60; or &#x60;TQDOCSECURITY&#x60; &#x3D; Document security   - Returns a list of all document security types a user is able to see
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserGetPermissionsList200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserGetPermissionsList200Response>> UserGetPermissionsListWithHttpInfoAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// User/SavePermissions
        /// </summary>
        /// <remarks>
        /// Save all (single) permissions of a user.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSavePermissionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserGetPermissions200Response</returns>
        System.Threading.Tasks.Task<UserGetPermissions200Response> UserSavePermissionsAsync(UserSavePermissionsRequest? userSavePermissionsRequest = default(UserSavePermissionsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// User/SavePermissions
        /// </summary>
        /// <remarks>
        /// Save all (single) permissions of a user.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSavePermissionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserGetPermissions200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserGetPermissions200Response>> UserSavePermissionsWithHttpInfoAsync(UserSavePermissionsRequest? userSavePermissionsRequest = default(UserSavePermissionsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// User/SavePermissionsList
        /// </summary>
        /// <remarks>
        /// Save a list of all permissions of a user by type. See [&#x60;User/GetPermissionsList&#x60;](#operation/UserGetPermissionsList) for all possible type values. All current values for the specified user + type will be deleted and overwritten with the posted valued. If you want to add a value use [&#x60;User/GetPermissionsList&#x60;](#operation/UserGetPermissionsList) to get all current values, add the value to the array and post it to this endpoint. Note: for the &#x60;TPAR&#x60; permissions two values are required and should be passed in the id field, seperated by a pipe.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSavePermissionsListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserGetPermissionsList200Response</returns>
        System.Threading.Tasks.Task<UserGetPermissionsList200Response> UserSavePermissionsListAsync(UserSavePermissionsListRequest? userSavePermissionsListRequest = default(UserSavePermissionsListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// User/SavePermissionsList
        /// </summary>
        /// <remarks>
        /// Save a list of all permissions of a user by type. See [&#x60;User/GetPermissionsList&#x60;](#operation/UserGetPermissionsList) for all possible type values. All current values for the specified user + type will be deleted and overwritten with the posted valued. If you want to add a value use [&#x60;User/GetPermissionsList&#x60;](#operation/UserGetPermissionsList) to get all current values, add the value to the array and post it to this endpoint. Note: for the &#x60;TPAR&#x60; permissions two values are required and should be passed in the id field, seperated by a pipe.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSavePermissionsListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserGetPermissionsList200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserGetPermissionsList200Response>> UserSavePermissionsListWithHttpInfoAsync(UserSavePermissionsListRequest? userSavePermissionsListRequest = default(UserSavePermissionsListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApi : IUserApiSync, IUserApiAsync
    {
        /// <summary>
        /// Set the logger to this service
        /// </summary>
        /// <param name="loggerFactory"></param>
        public void SetLogger(ILoggerFactory loggerFactory);   
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UserApi : IUserApi
    {
        public void SetLogger(ILoggerFactory loggerFactory)
        {
            this.Client.SetLogger(loggerFactory);
            this.AsynchronousClient.SetLogger(loggerFactory);
        }

        private GDWInnovations.TagorClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserApi(string basePath)
        {
            this.Configuration = GDWInnovations.TagorClient.Client.Configuration.MergeConfigurations(
                GDWInnovations.TagorClient.Client.GlobalConfiguration.Instance,
                new GDWInnovations.TagorClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new GDWInnovations.TagorClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GDWInnovations.TagorClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = GDWInnovations.TagorClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UserApi(GDWInnovations.TagorClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = GDWInnovations.TagorClient.Client.Configuration.MergeConfigurations(
                GDWInnovations.TagorClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new GDWInnovations.TagorClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GDWInnovations.TagorClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = GDWInnovations.TagorClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UserApi(GDWInnovations.TagorClient.Client.ISynchronousClient client, GDWInnovations.TagorClient.Client.IAsynchronousClient asyncClient, GDWInnovations.TagorClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = GDWInnovations.TagorClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public GDWInnovations.TagorClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public GDWInnovations.TagorClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public GDWInnovations.TagorClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public GDWInnovations.TagorClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// User/Add Add/Create a user. Pass the &#x60;TPAR_Id&#x60; if you want to create a &#x60;User&#x60; for an existing &#x60;Party&#x60;.  Optional you can pass a &#x60;BASE-USER&#x60; context record with as value a &#x60;TUSER_Id&#x60; to inherit the web configuration of this user.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userAddRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserAdd200Response</returns>
        public UserAdd200Response UserAdd(UserAddRequest? userAddRequest = default(UserAddRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<UserAdd200Response> localVarResponse = UserAddWithHttpInfo(userAddRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User/Add Add/Create a user. Pass the &#x60;TPAR_Id&#x60; if you want to create a &#x60;User&#x60; for an existing &#x60;Party&#x60;.  Optional you can pass a &#x60;BASE-USER&#x60; context record with as value a &#x60;TUSER_Id&#x60; to inherit the web configuration of this user.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userAddRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserAdd200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<UserAdd200Response> UserAddWithHttpInfo(UserAddRequest? userAddRequest = default(UserAddRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = userAddRequest;

            localVarRequestOptions.Operation = "UserApi.UserAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UserAdd200Response>("/User/Add", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// User/Add Add/Create a user. Pass the &#x60;TPAR_Id&#x60; if you want to create a &#x60;User&#x60; for an existing &#x60;Party&#x60;.  Optional you can pass a &#x60;BASE-USER&#x60; context record with as value a &#x60;TUSER_Id&#x60; to inherit the web configuration of this user.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userAddRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserAdd200Response</returns>
        public async System.Threading.Tasks.Task<UserAdd200Response> UserAddAsync(UserAddRequest? userAddRequest = default(UserAddRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<UserAdd200Response> localVarResponse = await UserAddWithHttpInfoAsync(userAddRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User/Add Add/Create a user. Pass the &#x60;TPAR_Id&#x60; if you want to create a &#x60;User&#x60; for an existing &#x60;Party&#x60;.  Optional you can pass a &#x60;BASE-USER&#x60; context record with as value a &#x60;TUSER_Id&#x60; to inherit the web configuration of this user.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userAddRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserAdd200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<UserAdd200Response>> UserAddWithHttpInfoAsync(UserAddRequest? userAddRequest = default(UserAddRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = userAddRequest;

            localVarRequestOptions.Operation = "UserApi.UserAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UserAdd200Response>("/User/Add", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// User/CanAccess This endpoint returns the users that have access to the given asset. E.g. If you pass &#x60;TQDOSSOORT_Id&#x60;, you&#39;ll get all users allowed to view files of this type. Pass one or more of the following filetypes: - &#x60;TQDOSSOORT_Id&#x60; - &#x60;TPAR_Id&#x60;. For filtering a party regardless of type. - &#x60;TPAR|TQPARSOORT_Id&#x60;. For filtering a party with matching party type. Pass both &#x60;TPAR_Id&#x60; and &#x60;TQPARSOORT_Id&#x60; in a context record separated by a pipe. ex: &#x60;9000000000000000001|9000000000000000001&#x60;.   _This searches the values configured on the web configuration tab in the user managment._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserCanAccess200Response</returns>
        public UserCanAccess200Response UserCanAccess(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<UserCanAccess200Response> localVarResponse = UserCanAccessWithHttpInfo(codeGetListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User/CanAccess This endpoint returns the users that have access to the given asset. E.g. If you pass &#x60;TQDOSSOORT_Id&#x60;, you&#39;ll get all users allowed to view files of this type. Pass one or more of the following filetypes: - &#x60;TQDOSSOORT_Id&#x60; - &#x60;TPAR_Id&#x60;. For filtering a party regardless of type. - &#x60;TPAR|TQPARSOORT_Id&#x60;. For filtering a party with matching party type. Pass both &#x60;TPAR_Id&#x60; and &#x60;TQPARSOORT_Id&#x60; in a context record separated by a pipe. ex: &#x60;9000000000000000001|9000000000000000001&#x60;.   _This searches the values configured on the web configuration tab in the user managment._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserCanAccess200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<UserCanAccess200Response> UserCanAccessWithHttpInfo(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = codeGetListRequest;

            localVarRequestOptions.Operation = "UserApi.UserCanAccess";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UserCanAccess200Response>("/User/CanAccess", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCanAccess", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// User/CanAccess This endpoint returns the users that have access to the given asset. E.g. If you pass &#x60;TQDOSSOORT_Id&#x60;, you&#39;ll get all users allowed to view files of this type. Pass one or more of the following filetypes: - &#x60;TQDOSSOORT_Id&#x60; - &#x60;TPAR_Id&#x60;. For filtering a party regardless of type. - &#x60;TPAR|TQPARSOORT_Id&#x60;. For filtering a party with matching party type. Pass both &#x60;TPAR_Id&#x60; and &#x60;TQPARSOORT_Id&#x60; in a context record separated by a pipe. ex: &#x60;9000000000000000001|9000000000000000001&#x60;.   _This searches the values configured on the web configuration tab in the user managment._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserCanAccess200Response</returns>
        public async System.Threading.Tasks.Task<UserCanAccess200Response> UserCanAccessAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<UserCanAccess200Response> localVarResponse = await UserCanAccessWithHttpInfoAsync(codeGetListRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User/CanAccess This endpoint returns the users that have access to the given asset. E.g. If you pass &#x60;TQDOSSOORT_Id&#x60;, you&#39;ll get all users allowed to view files of this type. Pass one or more of the following filetypes: - &#x60;TQDOSSOORT_Id&#x60; - &#x60;TPAR_Id&#x60;. For filtering a party regardless of type. - &#x60;TPAR|TQPARSOORT_Id&#x60;. For filtering a party with matching party type. Pass both &#x60;TPAR_Id&#x60; and &#x60;TQPARSOORT_Id&#x60; in a context record separated by a pipe. ex: &#x60;9000000000000000001|9000000000000000001&#x60;.   _This searches the values configured on the web configuration tab in the user managment._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserCanAccess200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<UserCanAccess200Response>> UserCanAccessWithHttpInfoAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = codeGetListRequest;

            localVarRequestOptions.Operation = "UserApi.UserCanAccess";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UserCanAccess200Response>("/User/CanAccess", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCanAccess", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// User/Get Get a user by id
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserGet200Response</returns>
        public UserGet200Response UserGet(UserGetRequest? userGetRequest = default(UserGetRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<UserGet200Response> localVarResponse = UserGetWithHttpInfo(userGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User/Get Get a user by id
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserGet200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<UserGet200Response> UserGetWithHttpInfo(UserGetRequest? userGetRequest = default(UserGetRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = userGetRequest;

            localVarRequestOptions.Operation = "UserApi.UserGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UserGet200Response>("/User/Get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// User/Get Get a user by id
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserGet200Response</returns>
        public async System.Threading.Tasks.Task<UserGet200Response> UserGetAsync(UserGetRequest? userGetRequest = default(UserGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<UserGet200Response> localVarResponse = await UserGetWithHttpInfoAsync(userGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User/Get Get a user by id
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserGet200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<UserGet200Response>> UserGetWithHttpInfoAsync(UserGetRequest? userGetRequest = default(UserGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = userGetRequest;

            localVarRequestOptions.Operation = "UserApi.UserGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UserGet200Response>("/User/Get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// User/GetPermissions Get all (single) permissions of a user. This will return all the permissions that are represented as a toggle in Tagor. i.e. all permissions on the &#x60;Web permissies&#x60; tab.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserGetPermissions200Response</returns>
        public UserGetPermissions200Response UserGetPermissions(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<UserGetPermissions200Response> localVarResponse = UserGetPermissionsWithHttpInfo(codeGetListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User/GetPermissions Get all (single) permissions of a user. This will return all the permissions that are represented as a toggle in Tagor. i.e. all permissions on the &#x60;Web permissies&#x60; tab.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserGetPermissions200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<UserGetPermissions200Response> UserGetPermissionsWithHttpInfo(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = codeGetListRequest;

            localVarRequestOptions.Operation = "UserApi.UserGetPermissions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UserGetPermissions200Response>("/User/GetPermissions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserGetPermissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// User/GetPermissions Get all (single) permissions of a user. This will return all the permissions that are represented as a toggle in Tagor. i.e. all permissions on the &#x60;Web permissies&#x60; tab.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserGetPermissions200Response</returns>
        public async System.Threading.Tasks.Task<UserGetPermissions200Response> UserGetPermissionsAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<UserGetPermissions200Response> localVarResponse = await UserGetPermissionsWithHttpInfoAsync(codeGetListRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User/GetPermissions Get all (single) permissions of a user. This will return all the permissions that are represented as a toggle in Tagor. i.e. all permissions on the &#x60;Web permissies&#x60; tab.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserGetPermissions200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<UserGetPermissions200Response>> UserGetPermissionsWithHttpInfoAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = codeGetListRequest;

            localVarRequestOptions.Operation = "UserApi.UserGetPermissions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UserGetPermissions200Response>("/User/GetPermissions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserGetPermissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// User/GetPermissionsList List all permissions of a user by type. Via this endpoint you&#39;ll be able to retreive al permissions with mutliple values. In general this endpoint is for all permissions on the &#x60;Web configuratie&#x60; tab in Tagor.  Possible type values: - &#x60;WEBT3001&#x60; or &#x60;TPAR&#x60; &#x3D; Party   - Get a list of parties + party types. These have to be on a file for a user to be allowed to view the file.   - Unlike the other types this will return a pipe separated value of both party id and party type id   - &#x60;WEBT3002&#x60; or &#x60;TQDOSSOORT&#x60; &#x3D; File type   - Returns a list of all file types a user is allowed to see   - &#x60;WEBT3006&#x60; or &#x60;TQDISGROEP&#x60; &#x3D; Document types   - Returns a list of all document types a user can use when adding a document   - &#x60;WEBT3007&#x60; or &#x60;WL_QRY_FIELD&#x60; &#x3D; Mergefields   - Returns a list of all mergefields a user is able to request with [&#x60;Document/GetMergefield&#x60;](#operation/DocumentGetMergefield)   - If a user doesn&#39;t have any mergefields configured the default setting from the office configuration screen will be used.   - &#x60;WEBT3005&#x60; or &#x60;TDOCM&#x60; &#x3D; Document types   - Returns a list of all &#x60;TDOCM_Ids&#x60; a user is able to request in [&#x60;Document/Generate&#x60;](#operation/DocumentGenerate)   - &#x60;WEBT3004&#x60; or &#x60;TQDOCSECURITY&#x60; &#x3D; Document security   - Returns a list of all document security types a user is able to see
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserGetPermissionsList200Response</returns>
        public UserGetPermissionsList200Response UserGetPermissionsList(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<UserGetPermissionsList200Response> localVarResponse = UserGetPermissionsListWithHttpInfo(codeGetListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User/GetPermissionsList List all permissions of a user by type. Via this endpoint you&#39;ll be able to retreive al permissions with mutliple values. In general this endpoint is for all permissions on the &#x60;Web configuratie&#x60; tab in Tagor.  Possible type values: - &#x60;WEBT3001&#x60; or &#x60;TPAR&#x60; &#x3D; Party   - Get a list of parties + party types. These have to be on a file for a user to be allowed to view the file.   - Unlike the other types this will return a pipe separated value of both party id and party type id   - &#x60;WEBT3002&#x60; or &#x60;TQDOSSOORT&#x60; &#x3D; File type   - Returns a list of all file types a user is allowed to see   - &#x60;WEBT3006&#x60; or &#x60;TQDISGROEP&#x60; &#x3D; Document types   - Returns a list of all document types a user can use when adding a document   - &#x60;WEBT3007&#x60; or &#x60;WL_QRY_FIELD&#x60; &#x3D; Mergefields   - Returns a list of all mergefields a user is able to request with [&#x60;Document/GetMergefield&#x60;](#operation/DocumentGetMergefield)   - If a user doesn&#39;t have any mergefields configured the default setting from the office configuration screen will be used.   - &#x60;WEBT3005&#x60; or &#x60;TDOCM&#x60; &#x3D; Document types   - Returns a list of all &#x60;TDOCM_Ids&#x60; a user is able to request in [&#x60;Document/Generate&#x60;](#operation/DocumentGenerate)   - &#x60;WEBT3004&#x60; or &#x60;TQDOCSECURITY&#x60; &#x3D; Document security   - Returns a list of all document security types a user is able to see
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserGetPermissionsList200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<UserGetPermissionsList200Response> UserGetPermissionsListWithHttpInfo(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = codeGetListRequest;

            localVarRequestOptions.Operation = "UserApi.UserGetPermissionsList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UserGetPermissionsList200Response>("/User/GetPermissionsList", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserGetPermissionsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// User/GetPermissionsList List all permissions of a user by type. Via this endpoint you&#39;ll be able to retreive al permissions with mutliple values. In general this endpoint is for all permissions on the &#x60;Web configuratie&#x60; tab in Tagor.  Possible type values: - &#x60;WEBT3001&#x60; or &#x60;TPAR&#x60; &#x3D; Party   - Get a list of parties + party types. These have to be on a file for a user to be allowed to view the file.   - Unlike the other types this will return a pipe separated value of both party id and party type id   - &#x60;WEBT3002&#x60; or &#x60;TQDOSSOORT&#x60; &#x3D; File type   - Returns a list of all file types a user is allowed to see   - &#x60;WEBT3006&#x60; or &#x60;TQDISGROEP&#x60; &#x3D; Document types   - Returns a list of all document types a user can use when adding a document   - &#x60;WEBT3007&#x60; or &#x60;WL_QRY_FIELD&#x60; &#x3D; Mergefields   - Returns a list of all mergefields a user is able to request with [&#x60;Document/GetMergefield&#x60;](#operation/DocumentGetMergefield)   - If a user doesn&#39;t have any mergefields configured the default setting from the office configuration screen will be used.   - &#x60;WEBT3005&#x60; or &#x60;TDOCM&#x60; &#x3D; Document types   - Returns a list of all &#x60;TDOCM_Ids&#x60; a user is able to request in [&#x60;Document/Generate&#x60;](#operation/DocumentGenerate)   - &#x60;WEBT3004&#x60; or &#x60;TQDOCSECURITY&#x60; &#x3D; Document security   - Returns a list of all document security types a user is able to see
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserGetPermissionsList200Response</returns>
        public async System.Threading.Tasks.Task<UserGetPermissionsList200Response> UserGetPermissionsListAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<UserGetPermissionsList200Response> localVarResponse = await UserGetPermissionsListWithHttpInfoAsync(codeGetListRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User/GetPermissionsList List all permissions of a user by type. Via this endpoint you&#39;ll be able to retreive al permissions with mutliple values. In general this endpoint is for all permissions on the &#x60;Web configuratie&#x60; tab in Tagor.  Possible type values: - &#x60;WEBT3001&#x60; or &#x60;TPAR&#x60; &#x3D; Party   - Get a list of parties + party types. These have to be on a file for a user to be allowed to view the file.   - Unlike the other types this will return a pipe separated value of both party id and party type id   - &#x60;WEBT3002&#x60; or &#x60;TQDOSSOORT&#x60; &#x3D; File type   - Returns a list of all file types a user is allowed to see   - &#x60;WEBT3006&#x60; or &#x60;TQDISGROEP&#x60; &#x3D; Document types   - Returns a list of all document types a user can use when adding a document   - &#x60;WEBT3007&#x60; or &#x60;WL_QRY_FIELD&#x60; &#x3D; Mergefields   - Returns a list of all mergefields a user is able to request with [&#x60;Document/GetMergefield&#x60;](#operation/DocumentGetMergefield)   - If a user doesn&#39;t have any mergefields configured the default setting from the office configuration screen will be used.   - &#x60;WEBT3005&#x60; or &#x60;TDOCM&#x60; &#x3D; Document types   - Returns a list of all &#x60;TDOCM_Ids&#x60; a user is able to request in [&#x60;Document/Generate&#x60;](#operation/DocumentGenerate)   - &#x60;WEBT3004&#x60; or &#x60;TQDOCSECURITY&#x60; &#x3D; Document security   - Returns a list of all document security types a user is able to see
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserGetPermissionsList200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<UserGetPermissionsList200Response>> UserGetPermissionsListWithHttpInfoAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = codeGetListRequest;

            localVarRequestOptions.Operation = "UserApi.UserGetPermissionsList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UserGetPermissionsList200Response>("/User/GetPermissionsList", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserGetPermissionsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// User/SavePermissions Save all (single) permissions of a user.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSavePermissionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserGetPermissions200Response</returns>
        public UserGetPermissions200Response UserSavePermissions(UserSavePermissionsRequest? userSavePermissionsRequest = default(UserSavePermissionsRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<UserGetPermissions200Response> localVarResponse = UserSavePermissionsWithHttpInfo(userSavePermissionsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User/SavePermissions Save all (single) permissions of a user.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSavePermissionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserGetPermissions200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<UserGetPermissions200Response> UserSavePermissionsWithHttpInfo(UserSavePermissionsRequest? userSavePermissionsRequest = default(UserSavePermissionsRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = userSavePermissionsRequest;

            localVarRequestOptions.Operation = "UserApi.UserSavePermissions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UserGetPermissions200Response>("/User/SavePermissions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSavePermissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// User/SavePermissions Save all (single) permissions of a user.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSavePermissionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserGetPermissions200Response</returns>
        public async System.Threading.Tasks.Task<UserGetPermissions200Response> UserSavePermissionsAsync(UserSavePermissionsRequest? userSavePermissionsRequest = default(UserSavePermissionsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<UserGetPermissions200Response> localVarResponse = await UserSavePermissionsWithHttpInfoAsync(userSavePermissionsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User/SavePermissions Save all (single) permissions of a user.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSavePermissionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserGetPermissions200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<UserGetPermissions200Response>> UserSavePermissionsWithHttpInfoAsync(UserSavePermissionsRequest? userSavePermissionsRequest = default(UserSavePermissionsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = userSavePermissionsRequest;

            localVarRequestOptions.Operation = "UserApi.UserSavePermissions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UserGetPermissions200Response>("/User/SavePermissions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSavePermissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// User/SavePermissionsList Save a list of all permissions of a user by type. See [&#x60;User/GetPermissionsList&#x60;](#operation/UserGetPermissionsList) for all possible type values. All current values for the specified user + type will be deleted and overwritten with the posted valued. If you want to add a value use [&#x60;User/GetPermissionsList&#x60;](#operation/UserGetPermissionsList) to get all current values, add the value to the array and post it to this endpoint. Note: for the &#x60;TPAR&#x60; permissions two values are required and should be passed in the id field, seperated by a pipe.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSavePermissionsListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserGetPermissionsList200Response</returns>
        public UserGetPermissionsList200Response UserSavePermissionsList(UserSavePermissionsListRequest? userSavePermissionsListRequest = default(UserSavePermissionsListRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<UserGetPermissionsList200Response> localVarResponse = UserSavePermissionsListWithHttpInfo(userSavePermissionsListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User/SavePermissionsList Save a list of all permissions of a user by type. See [&#x60;User/GetPermissionsList&#x60;](#operation/UserGetPermissionsList) for all possible type values. All current values for the specified user + type will be deleted and overwritten with the posted valued. If you want to add a value use [&#x60;User/GetPermissionsList&#x60;](#operation/UserGetPermissionsList) to get all current values, add the value to the array and post it to this endpoint. Note: for the &#x60;TPAR&#x60; permissions two values are required and should be passed in the id field, seperated by a pipe.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSavePermissionsListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserGetPermissionsList200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<UserGetPermissionsList200Response> UserSavePermissionsListWithHttpInfo(UserSavePermissionsListRequest? userSavePermissionsListRequest = default(UserSavePermissionsListRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = userSavePermissionsListRequest;

            localVarRequestOptions.Operation = "UserApi.UserSavePermissionsList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UserGetPermissionsList200Response>("/User/SavePermissionsList", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSavePermissionsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// User/SavePermissionsList Save a list of all permissions of a user by type. See [&#x60;User/GetPermissionsList&#x60;](#operation/UserGetPermissionsList) for all possible type values. All current values for the specified user + type will be deleted and overwritten with the posted valued. If you want to add a value use [&#x60;User/GetPermissionsList&#x60;](#operation/UserGetPermissionsList) to get all current values, add the value to the array and post it to this endpoint. Note: for the &#x60;TPAR&#x60; permissions two values are required and should be passed in the id field, seperated by a pipe.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSavePermissionsListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserGetPermissionsList200Response</returns>
        public async System.Threading.Tasks.Task<UserGetPermissionsList200Response> UserSavePermissionsListAsync(UserSavePermissionsListRequest? userSavePermissionsListRequest = default(UserSavePermissionsListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<UserGetPermissionsList200Response> localVarResponse = await UserSavePermissionsListWithHttpInfoAsync(userSavePermissionsListRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User/SavePermissionsList Save a list of all permissions of a user by type. See [&#x60;User/GetPermissionsList&#x60;](#operation/UserGetPermissionsList) for all possible type values. All current values for the specified user + type will be deleted and overwritten with the posted valued. If you want to add a value use [&#x60;User/GetPermissionsList&#x60;](#operation/UserGetPermissionsList) to get all current values, add the value to the array and post it to this endpoint. Note: for the &#x60;TPAR&#x60; permissions two values are required and should be passed in the id field, seperated by a pipe.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSavePermissionsListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserGetPermissionsList200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<UserGetPermissionsList200Response>> UserSavePermissionsListWithHttpInfoAsync(UserSavePermissionsListRequest? userSavePermissionsListRequest = default(UserSavePermissionsListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = userSavePermissionsListRequest;

            localVarRequestOptions.Operation = "UserApi.UserSavePermissionsList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UserGetPermissionsList200Response>("/User/SavePermissionsList", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSavePermissionsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}