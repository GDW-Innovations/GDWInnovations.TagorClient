/*
 * Tagor API
 *
 * Release date: 29/09/2022  ## REQUIREMENTS This version __requires__ Tagor >= 2.00.0000B0. Use [`Config/Info`](#operation/ConfigInfo) to get the active API version.  ## CHANGELOG - New [`Dossier/CreateAgenda`](#operation/DossierCreateAgenda) endpoint. - New return values in GetAgenda 'TJOB_Id, TJOBM_Id, TUSER_Id, Manueel and IsGeblokkeerd' - In CreateLine you can now add if the line is fixed with 'IsFixed' - In CreateLine you can now add a subarray with the intrests  ## INFO - Using the download button at the top you can import this collection of endpoints in **Postman** - In general all TQ(...)_Id fields are default fields which you can translate with the [`Code/GetDescription`](#operation/CodeGetDescription) endpoint. If you need an id to post to one of the endpoints you can use the [`Code/GetList`](#operation/CodeGetList) endpoint to get all possible values or [`Code/GetDescription`](#operation/CodeGetDescription) to get a value by code. These id's will be marked as `code id` in the documentation. - We chose to return all ids as string because these are 64bit integers which are too big for javascript to handle. - All italic text below the endpoint description is meant for people with access to Tagor. - The user needs an email address configured in Tagor for the services to work properly. - Pass the `Accept` header with `application/json` as value to have the server return errors in json format. - Most endpoints can be batched/paged by passing a `BATCH-SIZE` and `BATCH-NUMBER` record in `dsWebContext`.  # AUTHENTICATION Pass your token via an `Authorization` header like this: `Authorization: {bearer_format} {token}`.  ex: `Authorization: TGR IcoQbVw7wE...PPUPda61ET` <!- - ReDoc-Inject: <security-definitions> - ->
 *
 * The version of the OpenAPI document: 2.00.0000B1
 * Contact: info@organi.be
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Microsoft.Extensions.Logging;
using GDWInnovations.TagorClient.Client;
using GDWInnovations.TagorClient.Model;

namespace GDWInnovations.TagorClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPayApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Pay/Finish
        /// </summary>
        /// <remarks>
        /// Finishes the payment process. This should only be called by the SIPS servers.  _This endpoint will use the [&#x60;TagorService/OnlinePaymentReceived&#x60;](#operation/TagorServiceOnlinePaymentReceived) endpoint to create an informative payment record on the file._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectUrl"> (optional)</param>
        /// <param name="seal"> (optional)</param>
        /// <param name="interfaceVersion"> (optional)</param>
        /// <param name="locale"> (optional)</param>
        /// <param name="data"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void PayFinish(string? redirectUrl = default(string?), string? seal = default(string?), string? interfaceVersion = default(string?), string? locale = default(string?), string? data = default(string?), int operationIndex = 0);

        /// <summary>
        /// Pay/Finish
        /// </summary>
        /// <remarks>
        /// Finishes the payment process. This should only be called by the SIPS servers.  _This endpoint will use the [&#x60;TagorService/OnlinePaymentReceived&#x60;](#operation/TagorServiceOnlinePaymentReceived) endpoint to create an informative payment record on the file._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectUrl"> (optional)</param>
        /// <param name="seal"> (optional)</param>
        /// <param name="interfaceVersion"> (optional)</param>
        /// <param name="locale"> (optional)</param>
        /// <param name="data"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PayFinishWithHttpInfo(string? redirectUrl = default(string?), string? seal = default(string?), string? interfaceVersion = default(string?), string? locale = default(string?), string? data = default(string?), int operationIndex = 0);
        /// <summary>
        /// Pay/Start
        /// </summary>
        /// <remarks>
        /// Starts the payment process. This endpoint will return data that you&#39;ll have to post as a form to the given endpoint. Post &#x60;redirectionVersion&#x60; and &#x60;redirectionData&#x60; to &#x60;redirectionUrl&#x60;. You&#39;ll end up on the payment page. Look at the request samples for a javascript implementation.  _Set &#x60;parameter 576&#x60; with the return domain for the payment provider._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payStartRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PayStart200Response</returns>
        PayStart200Response PayStart(PayStartRequest? payStartRequest = default(PayStartRequest?), int operationIndex = 0);

        /// <summary>
        /// Pay/Start
        /// </summary>
        /// <remarks>
        /// Starts the payment process. This endpoint will return data that you&#39;ll have to post as a form to the given endpoint. Post &#x60;redirectionVersion&#x60; and &#x60;redirectionData&#x60; to &#x60;redirectionUrl&#x60;. You&#39;ll end up on the payment page. Look at the request samples for a javascript implementation.  _Set &#x60;parameter 576&#x60; with the return domain for the payment provider._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payStartRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PayStart200Response</returns>
        ApiResponse<PayStart200Response> PayStartWithHttpInfo(PayStartRequest? payStartRequest = default(PayStartRequest?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPayApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Pay/Finish
        /// </summary>
        /// <remarks>
        /// Finishes the payment process. This should only be called by the SIPS servers.  _This endpoint will use the [&#x60;TagorService/OnlinePaymentReceived&#x60;](#operation/TagorServiceOnlinePaymentReceived) endpoint to create an informative payment record on the file._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectUrl"> (optional)</param>
        /// <param name="seal"> (optional)</param>
        /// <param name="interfaceVersion"> (optional)</param>
        /// <param name="locale"> (optional)</param>
        /// <param name="data"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PayFinishAsync(string? redirectUrl = default(string?), string? seal = default(string?), string? interfaceVersion = default(string?), string? locale = default(string?), string? data = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Pay/Finish
        /// </summary>
        /// <remarks>
        /// Finishes the payment process. This should only be called by the SIPS servers.  _This endpoint will use the [&#x60;TagorService/OnlinePaymentReceived&#x60;](#operation/TagorServiceOnlinePaymentReceived) endpoint to create an informative payment record on the file._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectUrl"> (optional)</param>
        /// <param name="seal"> (optional)</param>
        /// <param name="interfaceVersion"> (optional)</param>
        /// <param name="locale"> (optional)</param>
        /// <param name="data"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PayFinishWithHttpInfoAsync(string? redirectUrl = default(string?), string? seal = default(string?), string? interfaceVersion = default(string?), string? locale = default(string?), string? data = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Pay/Start
        /// </summary>
        /// <remarks>
        /// Starts the payment process. This endpoint will return data that you&#39;ll have to post as a form to the given endpoint. Post &#x60;redirectionVersion&#x60; and &#x60;redirectionData&#x60; to &#x60;redirectionUrl&#x60;. You&#39;ll end up on the payment page. Look at the request samples for a javascript implementation.  _Set &#x60;parameter 576&#x60; with the return domain for the payment provider._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payStartRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PayStart200Response</returns>
        System.Threading.Tasks.Task<PayStart200Response> PayStartAsync(PayStartRequest? payStartRequest = default(PayStartRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Pay/Start
        /// </summary>
        /// <remarks>
        /// Starts the payment process. This endpoint will return data that you&#39;ll have to post as a form to the given endpoint. Post &#x60;redirectionVersion&#x60; and &#x60;redirectionData&#x60; to &#x60;redirectionUrl&#x60;. You&#39;ll end up on the payment page. Look at the request samples for a javascript implementation.  _Set &#x60;parameter 576&#x60; with the return domain for the payment provider._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payStartRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PayStart200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<PayStart200Response>> PayStartWithHttpInfoAsync(PayStartRequest? payStartRequest = default(PayStartRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPayApi : IPayApiSync, IPayApiAsync
    {
        /// <summary>
        /// Set the logger to this service
        /// </summary>
        /// <param name="loggerFactory"></param>
        public void SetLogger(ILoggerFactory loggerFactory);   
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PayApi : IPayApi
    {
        /// <summary>
        /// Set the logger to this service
        /// </summary>
        /// <param name="loggerFactory">The logger factory</param>
        public void SetLogger(ILoggerFactory loggerFactory)
        {
            this.Client.SetLogger(loggerFactory);
            this.AsynchronousClient.SetLogger(loggerFactory);
        }

        private GDWInnovations.TagorClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PayApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PayApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PayApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PayApi(string basePath)
        {
            this.Configuration = GDWInnovations.TagorClient.Client.Configuration.MergeConfigurations(
                GDWInnovations.TagorClient.Client.GlobalConfiguration.Instance,
                new GDWInnovations.TagorClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new GDWInnovations.TagorClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GDWInnovations.TagorClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = GDWInnovations.TagorClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PayApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PayApi(GDWInnovations.TagorClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = GDWInnovations.TagorClient.Client.Configuration.MergeConfigurations(
                GDWInnovations.TagorClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new GDWInnovations.TagorClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GDWInnovations.TagorClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = GDWInnovations.TagorClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PayApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PayApi(GDWInnovations.TagorClient.Client.ISynchronousClient client, GDWInnovations.TagorClient.Client.IAsynchronousClient asyncClient, GDWInnovations.TagorClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = GDWInnovations.TagorClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public GDWInnovations.TagorClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public GDWInnovations.TagorClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public GDWInnovations.TagorClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public GDWInnovations.TagorClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Pay/Finish Finishes the payment process. This should only be called by the SIPS servers.  _This endpoint will use the [&#x60;TagorService/OnlinePaymentReceived&#x60;](#operation/TagorServiceOnlinePaymentReceived) endpoint to create an informative payment record on the file._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectUrl"> (optional)</param>
        /// <param name="seal"> (optional)</param>
        /// <param name="interfaceVersion"> (optional)</param>
        /// <param name="locale"> (optional)</param>
        /// <param name="data"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void PayFinish(string? redirectUrl = default(string?), string? seal = default(string?), string? interfaceVersion = default(string?), string? locale = default(string?), string? data = default(string?), int operationIndex = 0)
        {
            PayFinishWithHttpInfo(redirectUrl, seal, interfaceVersion, locale, data);
        }

        /// <summary>
        /// Pay/Finish Finishes the payment process. This should only be called by the SIPS servers.  _This endpoint will use the [&#x60;TagorService/OnlinePaymentReceived&#x60;](#operation/TagorServiceOnlinePaymentReceived) endpoint to create an informative payment record on the file._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectUrl"> (optional)</param>
        /// <param name="seal"> (optional)</param>
        /// <param name="interfaceVersion"> (optional)</param>
        /// <param name="locale"> (optional)</param>
        /// <param name="data"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<Object> PayFinishWithHttpInfo(string? redirectUrl = default(string?), string? seal = default(string?), string? interfaceVersion = default(string?), string? locale = default(string?), string? data = default(string?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (redirectUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(GDWInnovations.TagorClient.Client.ClientUtils.ParameterToMultiMap("", "redirectUrl", redirectUrl));
            }
            if (seal != null)
            {
                localVarRequestOptions.FormParameters.Add("Seal", GDWInnovations.TagorClient.Client.ClientUtils.ParameterToString(seal)); // form parameter
            }
            if (interfaceVersion != null)
            {
                localVarRequestOptions.FormParameters.Add("InterfaceVersion", GDWInnovations.TagorClient.Client.ClientUtils.ParameterToString(interfaceVersion)); // form parameter
            }
            if (locale != null)
            {
                localVarRequestOptions.FormParameters.Add("locale", GDWInnovations.TagorClient.Client.ClientUtils.ParameterToString(locale)); // form parameter
            }
            if (data != null)
            {
                localVarRequestOptions.FormParameters.Add("Data", GDWInnovations.TagorClient.Client.ClientUtils.ParameterToString(data)); // form parameter
            }

            localVarRequestOptions.Operation = "PayApi.PayFinish";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/Pay/Finish", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PayFinish", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pay/Finish Finishes the payment process. This should only be called by the SIPS servers.  _This endpoint will use the [&#x60;TagorService/OnlinePaymentReceived&#x60;](#operation/TagorServiceOnlinePaymentReceived) endpoint to create an informative payment record on the file._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectUrl"> (optional)</param>
        /// <param name="seal"> (optional)</param>
        /// <param name="interfaceVersion"> (optional)</param>
        /// <param name="locale"> (optional)</param>
        /// <param name="data"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PayFinishAsync(string? redirectUrl = default(string?), string? seal = default(string?), string? interfaceVersion = default(string?), string? locale = default(string?), string? data = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await PayFinishWithHttpInfoAsync(redirectUrl, seal, interfaceVersion, locale, data, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Pay/Finish Finishes the payment process. This should only be called by the SIPS servers.  _This endpoint will use the [&#x60;TagorService/OnlinePaymentReceived&#x60;](#operation/TagorServiceOnlinePaymentReceived) endpoint to create an informative payment record on the file._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectUrl"> (optional)</param>
        /// <param name="seal"> (optional)</param>
        /// <param name="interfaceVersion"> (optional)</param>
        /// <param name="locale"> (optional)</param>
        /// <param name="data"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<Object>> PayFinishWithHttpInfoAsync(string? redirectUrl = default(string?), string? seal = default(string?), string? interfaceVersion = default(string?), string? locale = default(string?), string? data = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (redirectUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(GDWInnovations.TagorClient.Client.ClientUtils.ParameterToMultiMap("", "redirectUrl", redirectUrl));
            }
            if (seal != null)
            {
                localVarRequestOptions.FormParameters.Add("Seal", GDWInnovations.TagorClient.Client.ClientUtils.ParameterToString(seal)); // form parameter
            }
            if (interfaceVersion != null)
            {
                localVarRequestOptions.FormParameters.Add("InterfaceVersion", GDWInnovations.TagorClient.Client.ClientUtils.ParameterToString(interfaceVersion)); // form parameter
            }
            if (locale != null)
            {
                localVarRequestOptions.FormParameters.Add("locale", GDWInnovations.TagorClient.Client.ClientUtils.ParameterToString(locale)); // form parameter
            }
            if (data != null)
            {
                localVarRequestOptions.FormParameters.Add("Data", GDWInnovations.TagorClient.Client.ClientUtils.ParameterToString(data)); // form parameter
            }

            localVarRequestOptions.Operation = "PayApi.PayFinish";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/Pay/Finish", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PayFinish", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pay/Start Starts the payment process. This endpoint will return data that you&#39;ll have to post as a form to the given endpoint. Post &#x60;redirectionVersion&#x60; and &#x60;redirectionData&#x60; to &#x60;redirectionUrl&#x60;. You&#39;ll end up on the payment page. Look at the request samples for a javascript implementation.  _Set &#x60;parameter 576&#x60; with the return domain for the payment provider._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payStartRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PayStart200Response</returns>
        public PayStart200Response PayStart(PayStartRequest? payStartRequest = default(PayStartRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<PayStart200Response> localVarResponse = PayStartWithHttpInfo(payStartRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Pay/Start Starts the payment process. This endpoint will return data that you&#39;ll have to post as a form to the given endpoint. Post &#x60;redirectionVersion&#x60; and &#x60;redirectionData&#x60; to &#x60;redirectionUrl&#x60;. You&#39;ll end up on the payment page. Look at the request samples for a javascript implementation.  _Set &#x60;parameter 576&#x60; with the return domain for the payment provider._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payStartRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PayStart200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<PayStart200Response> PayStartWithHttpInfo(PayStartRequest? payStartRequest = default(PayStartRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = payStartRequest;

            localVarRequestOptions.Operation = "PayApi.PayStart";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PayStart200Response>("/Pay/Start", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PayStart", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pay/Start Starts the payment process. This endpoint will return data that you&#39;ll have to post as a form to the given endpoint. Post &#x60;redirectionVersion&#x60; and &#x60;redirectionData&#x60; to &#x60;redirectionUrl&#x60;. You&#39;ll end up on the payment page. Look at the request samples for a javascript implementation.  _Set &#x60;parameter 576&#x60; with the return domain for the payment provider._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payStartRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PayStart200Response</returns>
        public async System.Threading.Tasks.Task<PayStart200Response> PayStartAsync(PayStartRequest? payStartRequest = default(PayStartRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<PayStart200Response> localVarResponse = await PayStartWithHttpInfoAsync(payStartRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Pay/Start Starts the payment process. This endpoint will return data that you&#39;ll have to post as a form to the given endpoint. Post &#x60;redirectionVersion&#x60; and &#x60;redirectionData&#x60; to &#x60;redirectionUrl&#x60;. You&#39;ll end up on the payment page. Look at the request samples for a javascript implementation.  _Set &#x60;parameter 576&#x60; with the return domain for the payment provider._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payStartRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PayStart200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<PayStart200Response>> PayStartWithHttpInfoAsync(PayStartRequest? payStartRequest = default(PayStartRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = payStartRequest;

            localVarRequestOptions.Operation = "PayApi.PayStart";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PayStart200Response>("/Pay/Start", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PayStart", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}