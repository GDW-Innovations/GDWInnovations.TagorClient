/*
 * Tagor API
 *
 * Release date: 29/09/2022  ## REQUIREMENTS This version __requires__ Tagor >= 2.00.0000B0. Use [`Config/Info`](#operation/ConfigInfo) to get the active API version.  ## CHANGELOG - New [`Dossier/CreateAgenda`](#operation/DossierCreateAgenda) endpoint. - New return values in GetAgenda 'TJOB_Id, TJOBM_Id, TUSER_Id, Manueel and IsGeblokkeerd' - In CreateLine you can now add if the line is fixed with 'IsFixed' - In CreateLine you can now add a subarray with the intrests  ## INFO - Using the download button at the top you can import this collection of endpoints in **Postman** - In general all TQ(...)_Id fields are default fields which you can translate with the [`Code/GetDescription`](#operation/CodeGetDescription) endpoint. If you need an id to post to one of the endpoints you can use the [`Code/GetList`](#operation/CodeGetList) endpoint to get all possible values or [`Code/GetDescription`](#operation/CodeGetDescription) to get a value by code. These id's will be marked as `code id` in the documentation. - We chose to return all ids as string because these are 64bit integers which are too big for javascript to handle. - All italic text below the endpoint description is meant for people with access to Tagor. - The user needs an email address configured in Tagor for the services to work properly. - Pass the `Accept` header with `application/json` as value to have the server return errors in json format. - Most endpoints can be batched/paged by passing a `BATCH-SIZE` and `BATCH-NUMBER` record in `dsWebContext`.  # AUTHENTICATION Pass your token via an `Authorization` header like this: `Authorization: {bearer_format} {token}`.  ex: `Authorization: TGR IcoQbVw7wE...PPUPda61ET` <!- - ReDoc-Inject: <security-definitions> - ->
 *
 * The version of the OpenAPI document: 2.00.0000B1
 * Contact: info@organi.be
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Microsoft.Extensions.Logging;
using GDWInnovations.TagorClient.Client;
using GDWInnovations.TagorClient.Model;

namespace GDWInnovations.TagorClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDossierApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Dossier/AddAttachment
        /// </summary>
        /// <remarks>
        /// Add a document to a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierAddAttachmentRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DossierAddAttachment200Response</returns>
        DossierAddAttachment200Response DossierAddAttachment(DossierAddAttachmentRequest? dossierAddAttachmentRequest = default(DossierAddAttachmentRequest?), int operationIndex = 0);

        /// <summary>
        /// Dossier/AddAttachment
        /// </summary>
        /// <remarks>
        /// Add a document to a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierAddAttachmentRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DossierAddAttachment200Response</returns>
        ApiResponse<DossierAddAttachment200Response> DossierAddAttachmentWithHttpInfo(DossierAddAttachmentRequest? dossierAddAttachmentRequest = default(DossierAddAttachmentRequest?), int operationIndex = 0);
        /// <summary>
        /// Dossier/CreateAgenda
        /// </summary>
        /// <remarks>
        /// Create an agenda record in a file. To update an existing record add the correct &#x60;TJOB_Id&#x60;. To create a new record, you don&#39;t need to add the &#x60;TJOB_Id&#x60;
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierCreateAgendaRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DossierCreateAgenda200Response</returns>
        DossierCreateAgenda200Response DossierCreateAgenda(DossierCreateAgendaRequest? dossierCreateAgendaRequest = default(DossierCreateAgendaRequest?), int operationIndex = 0);

        /// <summary>
        /// Dossier/CreateAgenda
        /// </summary>
        /// <remarks>
        /// Create an agenda record in a file. To update an existing record add the correct &#x60;TJOB_Id&#x60;. To create a new record, you don&#39;t need to add the &#x60;TJOB_Id&#x60;
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierCreateAgendaRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DossierCreateAgenda200Response</returns>
        ApiResponse<DossierCreateAgenda200Response> DossierCreateAgendaWithHttpInfo(DossierCreateAgendaRequest? dossierCreateAgendaRequest = default(DossierCreateAgendaRequest?), int operationIndex = 0);
        /// <summary>
        /// Dossier/CreateInfoLine
        /// </summary>
        /// <remarks>
        /// Create an info record in a file.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierCreateInfoLineRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DossierCreateInfoLine200Response</returns>
        DossierCreateInfoLine200Response DossierCreateInfoLine(DossierCreateInfoLineRequest? dossierCreateInfoLineRequest = default(DossierCreateInfoLineRequest?), int operationIndex = 0);

        /// <summary>
        /// Dossier/CreateInfoLine
        /// </summary>
        /// <remarks>
        /// Create an info record in a file.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierCreateInfoLineRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DossierCreateInfoLine200Response</returns>
        ApiResponse<DossierCreateInfoLine200Response> DossierCreateInfoLineWithHttpInfo(DossierCreateInfoLineRequest? dossierCreateInfoLineRequest = default(DossierCreateInfoLineRequest?), int operationIndex = 0);
        /// <summary>
        /// Dossier/CreateLine
        /// </summary>
        /// <remarks>
        /// Add a transaction to a file.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierCreateLineRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DossierCreateLine200Response</returns>
        DossierCreateLine200Response DossierCreateLine(DossierCreateLineRequest? dossierCreateLineRequest = default(DossierCreateLineRequest?), int operationIndex = 0);

        /// <summary>
        /// Dossier/CreateLine
        /// </summary>
        /// <remarks>
        /// Add a transaction to a file.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierCreateLineRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DossierCreateLine200Response</returns>
        ApiResponse<DossierCreateLine200Response> DossierCreateLineWithHttpInfo(DossierCreateLineRequest? dossierCreateLineRequest = default(DossierCreateLineRequest?), int operationIndex = 0);
        /// <summary>
        /// Dossier/Get
        /// </summary>
        /// <remarks>
        /// Get a single file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DossierGet200Response</returns>
        DossierGet200Response DossierGet(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0);

        /// <summary>
        /// Dossier/Get
        /// </summary>
        /// <remarks>
        /// Get a single file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DossierGet200Response</returns>
        ApiResponse<DossierGet200Response> DossierGetWithHttpInfo(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0);
        /// <summary>
        /// Dossier/GetAgenda
        /// </summary>
        /// <remarks>
        /// Get all calendar items for a single file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DossierGetAgenda200Response</returns>
        DossierGetAgenda200Response DossierGetAgenda(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0);

        /// <summary>
        /// Dossier/GetAgenda
        /// </summary>
        /// <remarks>
        /// Get all calendar items for a single file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DossierGetAgenda200Response</returns>
        ApiResponse<DossierGetAgenda200Response> DossierGetAgendaWithHttpInfo(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0);
        /// <summary>
        /// Dossier/GetAppearance
        /// </summary>
        /// <remarks>
        /// &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DossierGetAppearance200Response</returns>
        DossierGetAppearance200Response DossierGetAppearance(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0);

        /// <summary>
        /// Dossier/GetAppearance
        /// </summary>
        /// <remarks>
        /// &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DossierGetAppearance200Response</returns>
        ApiResponse<DossierGetAppearance200Response> DossierGetAppearanceWithHttpInfo(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0);
        /// <summary>
        /// Dossier/GetBalances
        /// </summary>
        /// <remarks>
        /// Get all balances of a file i.e. returns a summarized version of [&#x60;Dossier/GetLines&#x60;](#operation/DossierGetLines). &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DossierGetBalances200Response</returns>
        DossierGetBalances200Response DossierGetBalances(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0);

        /// <summary>
        /// Dossier/GetBalances
        /// </summary>
        /// <remarks>
        /// Get all balances of a file i.e. returns a summarized version of [&#x60;Dossier/GetLines&#x60;](#operation/DossierGetLines). &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DossierGetBalances200Response</returns>
        ApiResponse<DossierGetBalances200Response> DossierGetBalancesWithHttpInfo(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0);
        /// <summary>
        /// Dossier/GetByDefendant
        /// </summary>
        /// <remarks>
        /// &#x60;ttWebContext&#x60; requires a &#x60;TPAR_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierGetByDefendantRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DossierGetByDefendant200Response</returns>
        DossierGetByDefendant200Response DossierGetByDefendant(DossierGetByDefendantRequest? dossierGetByDefendantRequest = default(DossierGetByDefendantRequest?), int operationIndex = 0);

        /// <summary>
        /// Dossier/GetByDefendant
        /// </summary>
        /// <remarks>
        /// &#x60;ttWebContext&#x60; requires a &#x60;TPAR_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierGetByDefendantRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DossierGetByDefendant200Response</returns>
        ApiResponse<DossierGetByDefendant200Response> DossierGetByDefendantWithHttpInfo(DossierGetByDefendantRequest? dossierGetByDefendantRequest = default(DossierGetByDefendantRequest?), int operationIndex = 0);
        /// <summary>
        /// Dossier/GetCorrespondence
        /// </summary>
        /// <remarks>
        /// Returns all correspondence on a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DossierGetCorrespondence200Response</returns>
        DossierGetCorrespondence200Response DossierGetCorrespondence(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0);

        /// <summary>
        /// Dossier/GetCorrespondence
        /// </summary>
        /// <remarks>
        /// Returns all correspondence on a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DossierGetCorrespondence200Response</returns>
        ApiResponse<DossierGetCorrespondence200Response> DossierGetCorrespondenceWithHttpInfo(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0);
        /// <summary>
        /// Dossier/GetInfo
        /// </summary>
        /// <remarks>
        /// Returns all info records on a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DossierGetInfo200Response</returns>
        DossierGetInfo200Response DossierGetInfo(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0);

        /// <summary>
        /// Dossier/GetInfo
        /// </summary>
        /// <remarks>
        /// Returns all info records on a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DossierGetInfo200Response</returns>
        ApiResponse<DossierGetInfo200Response> DossierGetInfoWithHttpInfo(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0);
        /// <summary>
        /// Dossier/GetLines
        /// </summary>
        /// <remarks>
        /// Returns all transaction records on a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element. Other options are optional: - &#x60;is-defendant&#x60; (boolean): returns the overview from the defendants perspective. - &#x60;evolution-only&#x60; (boolean): only returns records the office marked as &#39;important in the evolution of the file&#39;. - &#x60;unfinished-deeds&#x60; (boolean)   _To get files in the &#x60;evolution-only&#x60; view you have to mark &#x60;TQAARD&#x60; records as evolution._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DossierGetLines200Response</returns>
        DossierGetLines200Response DossierGetLines(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0);

        /// <summary>
        /// Dossier/GetLines
        /// </summary>
        /// <remarks>
        /// Returns all transaction records on a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element. Other options are optional: - &#x60;is-defendant&#x60; (boolean): returns the overview from the defendants perspective. - &#x60;evolution-only&#x60; (boolean): only returns records the office marked as &#39;important in the evolution of the file&#39;. - &#x60;unfinished-deeds&#x60; (boolean)   _To get files in the &#x60;evolution-only&#x60; view you have to mark &#x60;TQAARD&#x60; records as evolution._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DossierGetLines200Response</returns>
        ApiResponse<DossierGetLines200Response> DossierGetLinesWithHttpInfo(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0);
        /// <summary>
        /// Dossier/GetParties
        /// </summary>
        /// <remarks>
        /// &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConfigInfo200Response</returns>
        ConfigInfo200Response DossierGetParties(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0);

        /// <summary>
        /// Dossier/GetParties
        /// </summary>
        /// <remarks>
        /// &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConfigInfo200Response</returns>
        ApiResponse<ConfigInfo200Response> DossierGetPartiesWithHttpInfo(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0);
        /// <summary>
        /// Dossier/GetPaymentPlans
        /// </summary>
        /// <remarks>
        /// &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element. Other options are optional: - &#x60;active-only&#x60; (boolean): only return active payment plans.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DossierGetPaymentPlans200Response</returns>
        DossierGetPaymentPlans200Response DossierGetPaymentPlans(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0);

        /// <summary>
        /// Dossier/GetPaymentPlans
        /// </summary>
        /// <remarks>
        /// &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element. Other options are optional: - &#x60;active-only&#x60; (boolean): only return active payment plans.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DossierGetPaymentPlans200Response</returns>
        ApiResponse<DossierGetPaymentPlans200Response> DossierGetPaymentPlansWithHttpInfo(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0);
        /// <summary>
        /// Dossier/GetSub
        /// </summary>
        /// <remarks>
        /// &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DossierGetSub200Response</returns>
        DossierGetSub200Response DossierGetSub(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0);

        /// <summary>
        /// Dossier/GetSub
        /// </summary>
        /// <remarks>
        /// &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DossierGetSub200Response</returns>
        ApiResponse<DossierGetSub200Response> DossierGetSubWithHttpInfo(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0);
        /// <summary>
        /// Dossier/GetTitle
        /// </summary>
        /// <remarks>
        /// &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DossierGetTitle200Response</returns>
        DossierGetTitle200Response DossierGetTitle(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0);

        /// <summary>
        /// Dossier/GetTitle
        /// </summary>
        /// <remarks>
        /// &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DossierGetTitle200Response</returns>
        ApiResponse<DossierGetTitle200Response> DossierGetTitleWithHttpInfo(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0);
        /// <summary>
        /// Dossier/Search
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierSearchRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DossierSearch200Response</returns>
        DossierSearch200Response DossierSearch(DossierSearchRequest? dossierSearchRequest = default(DossierSearchRequest?), int operationIndex = 0);

        /// <summary>
        /// Dossier/Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierSearchRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DossierSearch200Response</returns>
        ApiResponse<DossierSearch200Response> DossierSearchWithHttpInfo(DossierSearchRequest? dossierSearchRequest = default(DossierSearchRequest?), int operationIndex = 0);
        /// <summary>
        /// Dossier/Stop
        /// </summary>
        /// <remarks>
        /// &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DossierGet200Response</returns>
        DossierGet200Response DossierStop(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0);

        /// <summary>
        /// Dossier/Stop
        /// </summary>
        /// <remarks>
        /// &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DossierGet200Response</returns>
        ApiResponse<DossierGet200Response> DossierStopWithHttpInfo(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDossierApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Dossier/AddAttachment
        /// </summary>
        /// <remarks>
        /// Add a document to a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierAddAttachmentRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DossierAddAttachment200Response</returns>
        System.Threading.Tasks.Task<DossierAddAttachment200Response> DossierAddAttachmentAsync(DossierAddAttachmentRequest? dossierAddAttachmentRequest = default(DossierAddAttachmentRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Dossier/AddAttachment
        /// </summary>
        /// <remarks>
        /// Add a document to a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierAddAttachmentRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DossierAddAttachment200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<DossierAddAttachment200Response>> DossierAddAttachmentWithHttpInfoAsync(DossierAddAttachmentRequest? dossierAddAttachmentRequest = default(DossierAddAttachmentRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Dossier/CreateAgenda
        /// </summary>
        /// <remarks>
        /// Create an agenda record in a file. To update an existing record add the correct &#x60;TJOB_Id&#x60;. To create a new record, you don&#39;t need to add the &#x60;TJOB_Id&#x60;
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierCreateAgendaRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DossierCreateAgenda200Response</returns>
        System.Threading.Tasks.Task<DossierCreateAgenda200Response> DossierCreateAgendaAsync(DossierCreateAgendaRequest? dossierCreateAgendaRequest = default(DossierCreateAgendaRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Dossier/CreateAgenda
        /// </summary>
        /// <remarks>
        /// Create an agenda record in a file. To update an existing record add the correct &#x60;TJOB_Id&#x60;. To create a new record, you don&#39;t need to add the &#x60;TJOB_Id&#x60;
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierCreateAgendaRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DossierCreateAgenda200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<DossierCreateAgenda200Response>> DossierCreateAgendaWithHttpInfoAsync(DossierCreateAgendaRequest? dossierCreateAgendaRequest = default(DossierCreateAgendaRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Dossier/CreateInfoLine
        /// </summary>
        /// <remarks>
        /// Create an info record in a file.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierCreateInfoLineRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DossierCreateInfoLine200Response</returns>
        System.Threading.Tasks.Task<DossierCreateInfoLine200Response> DossierCreateInfoLineAsync(DossierCreateInfoLineRequest? dossierCreateInfoLineRequest = default(DossierCreateInfoLineRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Dossier/CreateInfoLine
        /// </summary>
        /// <remarks>
        /// Create an info record in a file.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierCreateInfoLineRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DossierCreateInfoLine200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<DossierCreateInfoLine200Response>> DossierCreateInfoLineWithHttpInfoAsync(DossierCreateInfoLineRequest? dossierCreateInfoLineRequest = default(DossierCreateInfoLineRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Dossier/CreateLine
        /// </summary>
        /// <remarks>
        /// Add a transaction to a file.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierCreateLineRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DossierCreateLine200Response</returns>
        System.Threading.Tasks.Task<DossierCreateLine200Response> DossierCreateLineAsync(DossierCreateLineRequest? dossierCreateLineRequest = default(DossierCreateLineRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Dossier/CreateLine
        /// </summary>
        /// <remarks>
        /// Add a transaction to a file.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierCreateLineRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DossierCreateLine200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<DossierCreateLine200Response>> DossierCreateLineWithHttpInfoAsync(DossierCreateLineRequest? dossierCreateLineRequest = default(DossierCreateLineRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Dossier/Get
        /// </summary>
        /// <remarks>
        /// Get a single file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DossierGet200Response</returns>
        System.Threading.Tasks.Task<DossierGet200Response> DossierGetAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Dossier/Get
        /// </summary>
        /// <remarks>
        /// Get a single file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DossierGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<DossierGet200Response>> DossierGetWithHttpInfoAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Dossier/GetAgenda
        /// </summary>
        /// <remarks>
        /// Get all calendar items for a single file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DossierGetAgenda200Response</returns>
        System.Threading.Tasks.Task<DossierGetAgenda200Response> DossierGetAgendaAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Dossier/GetAgenda
        /// </summary>
        /// <remarks>
        /// Get all calendar items for a single file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DossierGetAgenda200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<DossierGetAgenda200Response>> DossierGetAgendaWithHttpInfoAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Dossier/GetAppearance
        /// </summary>
        /// <remarks>
        /// &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DossierGetAppearance200Response</returns>
        System.Threading.Tasks.Task<DossierGetAppearance200Response> DossierGetAppearanceAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Dossier/GetAppearance
        /// </summary>
        /// <remarks>
        /// &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DossierGetAppearance200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<DossierGetAppearance200Response>> DossierGetAppearanceWithHttpInfoAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Dossier/GetBalances
        /// </summary>
        /// <remarks>
        /// Get all balances of a file i.e. returns a summarized version of [&#x60;Dossier/GetLines&#x60;](#operation/DossierGetLines). &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DossierGetBalances200Response</returns>
        System.Threading.Tasks.Task<DossierGetBalances200Response> DossierGetBalancesAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Dossier/GetBalances
        /// </summary>
        /// <remarks>
        /// Get all balances of a file i.e. returns a summarized version of [&#x60;Dossier/GetLines&#x60;](#operation/DossierGetLines). &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DossierGetBalances200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<DossierGetBalances200Response>> DossierGetBalancesWithHttpInfoAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Dossier/GetByDefendant
        /// </summary>
        /// <remarks>
        /// &#x60;ttWebContext&#x60; requires a &#x60;TPAR_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierGetByDefendantRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DossierGetByDefendant200Response</returns>
        System.Threading.Tasks.Task<DossierGetByDefendant200Response> DossierGetByDefendantAsync(DossierGetByDefendantRequest? dossierGetByDefendantRequest = default(DossierGetByDefendantRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Dossier/GetByDefendant
        /// </summary>
        /// <remarks>
        /// &#x60;ttWebContext&#x60; requires a &#x60;TPAR_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierGetByDefendantRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DossierGetByDefendant200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<DossierGetByDefendant200Response>> DossierGetByDefendantWithHttpInfoAsync(DossierGetByDefendantRequest? dossierGetByDefendantRequest = default(DossierGetByDefendantRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Dossier/GetCorrespondence
        /// </summary>
        /// <remarks>
        /// Returns all correspondence on a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DossierGetCorrespondence200Response</returns>
        System.Threading.Tasks.Task<DossierGetCorrespondence200Response> DossierGetCorrespondenceAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Dossier/GetCorrespondence
        /// </summary>
        /// <remarks>
        /// Returns all correspondence on a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DossierGetCorrespondence200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<DossierGetCorrespondence200Response>> DossierGetCorrespondenceWithHttpInfoAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Dossier/GetInfo
        /// </summary>
        /// <remarks>
        /// Returns all info records on a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DossierGetInfo200Response</returns>
        System.Threading.Tasks.Task<DossierGetInfo200Response> DossierGetInfoAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Dossier/GetInfo
        /// </summary>
        /// <remarks>
        /// Returns all info records on a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DossierGetInfo200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<DossierGetInfo200Response>> DossierGetInfoWithHttpInfoAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Dossier/GetLines
        /// </summary>
        /// <remarks>
        /// Returns all transaction records on a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element. Other options are optional: - &#x60;is-defendant&#x60; (boolean): returns the overview from the defendants perspective. - &#x60;evolution-only&#x60; (boolean): only returns records the office marked as &#39;important in the evolution of the file&#39;. - &#x60;unfinished-deeds&#x60; (boolean)   _To get files in the &#x60;evolution-only&#x60; view you have to mark &#x60;TQAARD&#x60; records as evolution._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DossierGetLines200Response</returns>
        System.Threading.Tasks.Task<DossierGetLines200Response> DossierGetLinesAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Dossier/GetLines
        /// </summary>
        /// <remarks>
        /// Returns all transaction records on a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element. Other options are optional: - &#x60;is-defendant&#x60; (boolean): returns the overview from the defendants perspective. - &#x60;evolution-only&#x60; (boolean): only returns records the office marked as &#39;important in the evolution of the file&#39;. - &#x60;unfinished-deeds&#x60; (boolean)   _To get files in the &#x60;evolution-only&#x60; view you have to mark &#x60;TQAARD&#x60; records as evolution._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DossierGetLines200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<DossierGetLines200Response>> DossierGetLinesWithHttpInfoAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Dossier/GetParties
        /// </summary>
        /// <remarks>
        /// &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfigInfo200Response</returns>
        System.Threading.Tasks.Task<ConfigInfo200Response> DossierGetPartiesAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Dossier/GetParties
        /// </summary>
        /// <remarks>
        /// &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfigInfo200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConfigInfo200Response>> DossierGetPartiesWithHttpInfoAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Dossier/GetPaymentPlans
        /// </summary>
        /// <remarks>
        /// &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element. Other options are optional: - &#x60;active-only&#x60; (boolean): only return active payment plans.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DossierGetPaymentPlans200Response</returns>
        System.Threading.Tasks.Task<DossierGetPaymentPlans200Response> DossierGetPaymentPlansAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Dossier/GetPaymentPlans
        /// </summary>
        /// <remarks>
        /// &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element. Other options are optional: - &#x60;active-only&#x60; (boolean): only return active payment plans.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DossierGetPaymentPlans200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<DossierGetPaymentPlans200Response>> DossierGetPaymentPlansWithHttpInfoAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Dossier/GetSub
        /// </summary>
        /// <remarks>
        /// &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DossierGetSub200Response</returns>
        System.Threading.Tasks.Task<DossierGetSub200Response> DossierGetSubAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Dossier/GetSub
        /// </summary>
        /// <remarks>
        /// &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DossierGetSub200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<DossierGetSub200Response>> DossierGetSubWithHttpInfoAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Dossier/GetTitle
        /// </summary>
        /// <remarks>
        /// &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DossierGetTitle200Response</returns>
        System.Threading.Tasks.Task<DossierGetTitle200Response> DossierGetTitleAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Dossier/GetTitle
        /// </summary>
        /// <remarks>
        /// &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DossierGetTitle200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<DossierGetTitle200Response>> DossierGetTitleWithHttpInfoAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Dossier/Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierSearchRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DossierSearch200Response</returns>
        System.Threading.Tasks.Task<DossierSearch200Response> DossierSearchAsync(DossierSearchRequest? dossierSearchRequest = default(DossierSearchRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Dossier/Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierSearchRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DossierSearch200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<DossierSearch200Response>> DossierSearchWithHttpInfoAsync(DossierSearchRequest? dossierSearchRequest = default(DossierSearchRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Dossier/Stop
        /// </summary>
        /// <remarks>
        /// &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DossierGet200Response</returns>
        System.Threading.Tasks.Task<DossierGet200Response> DossierStopAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Dossier/Stop
        /// </summary>
        /// <remarks>
        /// &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DossierGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<DossierGet200Response>> DossierStopWithHttpInfoAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDossierApi : IDossierApiSync, IDossierApiAsync
    {
        /// <summary>
        /// Set the logger to this service
        /// </summary>
        /// <param name="loggerFactory"></param>
        public void SetLogger(ILoggerFactory loggerFactory);   
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DossierApi : IDossierApi
    {
        public void SetLogger(ILoggerFactory loggerFactory)
        {
            this.Client.SetLogger(loggerFactory);
            this.AsynchronousClient.SetLogger(loggerFactory);
        }

        private GDWInnovations.TagorClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DossierApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DossierApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DossierApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DossierApi(string basePath)
        {
            this.Configuration = GDWInnovations.TagorClient.Client.Configuration.MergeConfigurations(
                GDWInnovations.TagorClient.Client.GlobalConfiguration.Instance,
                new GDWInnovations.TagorClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new GDWInnovations.TagorClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GDWInnovations.TagorClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = GDWInnovations.TagorClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DossierApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DossierApi(GDWInnovations.TagorClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = GDWInnovations.TagorClient.Client.Configuration.MergeConfigurations(
                GDWInnovations.TagorClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new GDWInnovations.TagorClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GDWInnovations.TagorClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = GDWInnovations.TagorClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DossierApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DossierApi(GDWInnovations.TagorClient.Client.ISynchronousClient client, GDWInnovations.TagorClient.Client.IAsynchronousClient asyncClient, GDWInnovations.TagorClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = GDWInnovations.TagorClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public GDWInnovations.TagorClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public GDWInnovations.TagorClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public GDWInnovations.TagorClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public GDWInnovations.TagorClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Dossier/AddAttachment Add a document to a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierAddAttachmentRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DossierAddAttachment200Response</returns>
        public DossierAddAttachment200Response DossierAddAttachment(DossierAddAttachmentRequest? dossierAddAttachmentRequest = default(DossierAddAttachmentRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<DossierAddAttachment200Response> localVarResponse = DossierAddAttachmentWithHttpInfo(dossierAddAttachmentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dossier/AddAttachment Add a document to a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierAddAttachmentRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DossierAddAttachment200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<DossierAddAttachment200Response> DossierAddAttachmentWithHttpInfo(DossierAddAttachmentRequest? dossierAddAttachmentRequest = default(DossierAddAttachmentRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = dossierAddAttachmentRequest;

            localVarRequestOptions.Operation = "DossierApi.DossierAddAttachment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DossierAddAttachment200Response>("/Dossier/AddAttachment", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DossierAddAttachment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dossier/AddAttachment Add a document to a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierAddAttachmentRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DossierAddAttachment200Response</returns>
        public async System.Threading.Tasks.Task<DossierAddAttachment200Response> DossierAddAttachmentAsync(DossierAddAttachmentRequest? dossierAddAttachmentRequest = default(DossierAddAttachmentRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<DossierAddAttachment200Response> localVarResponse = await DossierAddAttachmentWithHttpInfoAsync(dossierAddAttachmentRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dossier/AddAttachment Add a document to a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierAddAttachmentRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DossierAddAttachment200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<DossierAddAttachment200Response>> DossierAddAttachmentWithHttpInfoAsync(DossierAddAttachmentRequest? dossierAddAttachmentRequest = default(DossierAddAttachmentRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = dossierAddAttachmentRequest;

            localVarRequestOptions.Operation = "DossierApi.DossierAddAttachment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DossierAddAttachment200Response>("/Dossier/AddAttachment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DossierAddAttachment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dossier/CreateAgenda Create an agenda record in a file. To update an existing record add the correct &#x60;TJOB_Id&#x60;. To create a new record, you don&#39;t need to add the &#x60;TJOB_Id&#x60;
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierCreateAgendaRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DossierCreateAgenda200Response</returns>
        public DossierCreateAgenda200Response DossierCreateAgenda(DossierCreateAgendaRequest? dossierCreateAgendaRequest = default(DossierCreateAgendaRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<DossierCreateAgenda200Response> localVarResponse = DossierCreateAgendaWithHttpInfo(dossierCreateAgendaRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dossier/CreateAgenda Create an agenda record in a file. To update an existing record add the correct &#x60;TJOB_Id&#x60;. To create a new record, you don&#39;t need to add the &#x60;TJOB_Id&#x60;
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierCreateAgendaRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DossierCreateAgenda200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<DossierCreateAgenda200Response> DossierCreateAgendaWithHttpInfo(DossierCreateAgendaRequest? dossierCreateAgendaRequest = default(DossierCreateAgendaRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = dossierCreateAgendaRequest;

            localVarRequestOptions.Operation = "DossierApi.DossierCreateAgenda";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DossierCreateAgenda200Response>("/Dossier/CreateAgenda", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DossierCreateAgenda", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dossier/CreateAgenda Create an agenda record in a file. To update an existing record add the correct &#x60;TJOB_Id&#x60;. To create a new record, you don&#39;t need to add the &#x60;TJOB_Id&#x60;
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierCreateAgendaRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DossierCreateAgenda200Response</returns>
        public async System.Threading.Tasks.Task<DossierCreateAgenda200Response> DossierCreateAgendaAsync(DossierCreateAgendaRequest? dossierCreateAgendaRequest = default(DossierCreateAgendaRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<DossierCreateAgenda200Response> localVarResponse = await DossierCreateAgendaWithHttpInfoAsync(dossierCreateAgendaRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dossier/CreateAgenda Create an agenda record in a file. To update an existing record add the correct &#x60;TJOB_Id&#x60;. To create a new record, you don&#39;t need to add the &#x60;TJOB_Id&#x60;
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierCreateAgendaRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DossierCreateAgenda200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<DossierCreateAgenda200Response>> DossierCreateAgendaWithHttpInfoAsync(DossierCreateAgendaRequest? dossierCreateAgendaRequest = default(DossierCreateAgendaRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = dossierCreateAgendaRequest;

            localVarRequestOptions.Operation = "DossierApi.DossierCreateAgenda";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DossierCreateAgenda200Response>("/Dossier/CreateAgenda", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DossierCreateAgenda", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dossier/CreateInfoLine Create an info record in a file.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierCreateInfoLineRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DossierCreateInfoLine200Response</returns>
        public DossierCreateInfoLine200Response DossierCreateInfoLine(DossierCreateInfoLineRequest? dossierCreateInfoLineRequest = default(DossierCreateInfoLineRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<DossierCreateInfoLine200Response> localVarResponse = DossierCreateInfoLineWithHttpInfo(dossierCreateInfoLineRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dossier/CreateInfoLine Create an info record in a file.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierCreateInfoLineRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DossierCreateInfoLine200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<DossierCreateInfoLine200Response> DossierCreateInfoLineWithHttpInfo(DossierCreateInfoLineRequest? dossierCreateInfoLineRequest = default(DossierCreateInfoLineRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = dossierCreateInfoLineRequest;

            localVarRequestOptions.Operation = "DossierApi.DossierCreateInfoLine";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DossierCreateInfoLine200Response>("/Dossier/CreateInfoLine", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DossierCreateInfoLine", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dossier/CreateInfoLine Create an info record in a file.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierCreateInfoLineRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DossierCreateInfoLine200Response</returns>
        public async System.Threading.Tasks.Task<DossierCreateInfoLine200Response> DossierCreateInfoLineAsync(DossierCreateInfoLineRequest? dossierCreateInfoLineRequest = default(DossierCreateInfoLineRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<DossierCreateInfoLine200Response> localVarResponse = await DossierCreateInfoLineWithHttpInfoAsync(dossierCreateInfoLineRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dossier/CreateInfoLine Create an info record in a file.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierCreateInfoLineRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DossierCreateInfoLine200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<DossierCreateInfoLine200Response>> DossierCreateInfoLineWithHttpInfoAsync(DossierCreateInfoLineRequest? dossierCreateInfoLineRequest = default(DossierCreateInfoLineRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = dossierCreateInfoLineRequest;

            localVarRequestOptions.Operation = "DossierApi.DossierCreateInfoLine";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DossierCreateInfoLine200Response>("/Dossier/CreateInfoLine", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DossierCreateInfoLine", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dossier/CreateLine Add a transaction to a file.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierCreateLineRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DossierCreateLine200Response</returns>
        public DossierCreateLine200Response DossierCreateLine(DossierCreateLineRequest? dossierCreateLineRequest = default(DossierCreateLineRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<DossierCreateLine200Response> localVarResponse = DossierCreateLineWithHttpInfo(dossierCreateLineRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dossier/CreateLine Add a transaction to a file.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierCreateLineRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DossierCreateLine200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<DossierCreateLine200Response> DossierCreateLineWithHttpInfo(DossierCreateLineRequest? dossierCreateLineRequest = default(DossierCreateLineRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = dossierCreateLineRequest;

            localVarRequestOptions.Operation = "DossierApi.DossierCreateLine";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DossierCreateLine200Response>("/Dossier/CreateLine", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DossierCreateLine", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dossier/CreateLine Add a transaction to a file.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierCreateLineRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DossierCreateLine200Response</returns>
        public async System.Threading.Tasks.Task<DossierCreateLine200Response> DossierCreateLineAsync(DossierCreateLineRequest? dossierCreateLineRequest = default(DossierCreateLineRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<DossierCreateLine200Response> localVarResponse = await DossierCreateLineWithHttpInfoAsync(dossierCreateLineRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dossier/CreateLine Add a transaction to a file.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierCreateLineRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DossierCreateLine200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<DossierCreateLine200Response>> DossierCreateLineWithHttpInfoAsync(DossierCreateLineRequest? dossierCreateLineRequest = default(DossierCreateLineRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = dossierCreateLineRequest;

            localVarRequestOptions.Operation = "DossierApi.DossierCreateLine";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DossierCreateLine200Response>("/Dossier/CreateLine", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DossierCreateLine", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dossier/Get Get a single file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DossierGet200Response</returns>
        public DossierGet200Response DossierGet(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<DossierGet200Response> localVarResponse = DossierGetWithHttpInfo(documentGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dossier/Get Get a single file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DossierGet200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<DossierGet200Response> DossierGetWithHttpInfo(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = documentGetRequest;

            localVarRequestOptions.Operation = "DossierApi.DossierGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DossierGet200Response>("/Dossier/Get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DossierGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dossier/Get Get a single file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DossierGet200Response</returns>
        public async System.Threading.Tasks.Task<DossierGet200Response> DossierGetAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<DossierGet200Response> localVarResponse = await DossierGetWithHttpInfoAsync(documentGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dossier/Get Get a single file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DossierGet200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<DossierGet200Response>> DossierGetWithHttpInfoAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = documentGetRequest;

            localVarRequestOptions.Operation = "DossierApi.DossierGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DossierGet200Response>("/Dossier/Get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DossierGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dossier/GetAgenda Get all calendar items for a single file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DossierGetAgenda200Response</returns>
        public DossierGetAgenda200Response DossierGetAgenda(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<DossierGetAgenda200Response> localVarResponse = DossierGetAgendaWithHttpInfo(documentGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dossier/GetAgenda Get all calendar items for a single file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DossierGetAgenda200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<DossierGetAgenda200Response> DossierGetAgendaWithHttpInfo(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = documentGetRequest;

            localVarRequestOptions.Operation = "DossierApi.DossierGetAgenda";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DossierGetAgenda200Response>("/Dossier/GetAgenda", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DossierGetAgenda", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dossier/GetAgenda Get all calendar items for a single file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DossierGetAgenda200Response</returns>
        public async System.Threading.Tasks.Task<DossierGetAgenda200Response> DossierGetAgendaAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<DossierGetAgenda200Response> localVarResponse = await DossierGetAgendaWithHttpInfoAsync(documentGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dossier/GetAgenda Get all calendar items for a single file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DossierGetAgenda200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<DossierGetAgenda200Response>> DossierGetAgendaWithHttpInfoAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = documentGetRequest;

            localVarRequestOptions.Operation = "DossierApi.DossierGetAgenda";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DossierGetAgenda200Response>("/Dossier/GetAgenda", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DossierGetAgenda", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dossier/GetAppearance &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DossierGetAppearance200Response</returns>
        public DossierGetAppearance200Response DossierGetAppearance(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<DossierGetAppearance200Response> localVarResponse = DossierGetAppearanceWithHttpInfo(documentGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dossier/GetAppearance &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DossierGetAppearance200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<DossierGetAppearance200Response> DossierGetAppearanceWithHttpInfo(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = documentGetRequest;

            localVarRequestOptions.Operation = "DossierApi.DossierGetAppearance";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DossierGetAppearance200Response>("/Dossier/GetAppearance", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DossierGetAppearance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dossier/GetAppearance &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DossierGetAppearance200Response</returns>
        public async System.Threading.Tasks.Task<DossierGetAppearance200Response> DossierGetAppearanceAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<DossierGetAppearance200Response> localVarResponse = await DossierGetAppearanceWithHttpInfoAsync(documentGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dossier/GetAppearance &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DossierGetAppearance200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<DossierGetAppearance200Response>> DossierGetAppearanceWithHttpInfoAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = documentGetRequest;

            localVarRequestOptions.Operation = "DossierApi.DossierGetAppearance";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DossierGetAppearance200Response>("/Dossier/GetAppearance", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DossierGetAppearance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dossier/GetBalances Get all balances of a file i.e. returns a summarized version of [&#x60;Dossier/GetLines&#x60;](#operation/DossierGetLines). &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DossierGetBalances200Response</returns>
        public DossierGetBalances200Response DossierGetBalances(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<DossierGetBalances200Response> localVarResponse = DossierGetBalancesWithHttpInfo(documentGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dossier/GetBalances Get all balances of a file i.e. returns a summarized version of [&#x60;Dossier/GetLines&#x60;](#operation/DossierGetLines). &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DossierGetBalances200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<DossierGetBalances200Response> DossierGetBalancesWithHttpInfo(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = documentGetRequest;

            localVarRequestOptions.Operation = "DossierApi.DossierGetBalances";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DossierGetBalances200Response>("/Dossier/GetBalances", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DossierGetBalances", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dossier/GetBalances Get all balances of a file i.e. returns a summarized version of [&#x60;Dossier/GetLines&#x60;](#operation/DossierGetLines). &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DossierGetBalances200Response</returns>
        public async System.Threading.Tasks.Task<DossierGetBalances200Response> DossierGetBalancesAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<DossierGetBalances200Response> localVarResponse = await DossierGetBalancesWithHttpInfoAsync(documentGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dossier/GetBalances Get all balances of a file i.e. returns a summarized version of [&#x60;Dossier/GetLines&#x60;](#operation/DossierGetLines). &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DossierGetBalances200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<DossierGetBalances200Response>> DossierGetBalancesWithHttpInfoAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = documentGetRequest;

            localVarRequestOptions.Operation = "DossierApi.DossierGetBalances";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DossierGetBalances200Response>("/Dossier/GetBalances", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DossierGetBalances", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dossier/GetByDefendant &#x60;ttWebContext&#x60; requires a &#x60;TPAR_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierGetByDefendantRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DossierGetByDefendant200Response</returns>
        public DossierGetByDefendant200Response DossierGetByDefendant(DossierGetByDefendantRequest? dossierGetByDefendantRequest = default(DossierGetByDefendantRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<DossierGetByDefendant200Response> localVarResponse = DossierGetByDefendantWithHttpInfo(dossierGetByDefendantRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dossier/GetByDefendant &#x60;ttWebContext&#x60; requires a &#x60;TPAR_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierGetByDefendantRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DossierGetByDefendant200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<DossierGetByDefendant200Response> DossierGetByDefendantWithHttpInfo(DossierGetByDefendantRequest? dossierGetByDefendantRequest = default(DossierGetByDefendantRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = dossierGetByDefendantRequest;

            localVarRequestOptions.Operation = "DossierApi.DossierGetByDefendant";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DossierGetByDefendant200Response>("/Dossier/GetByDefendant", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DossierGetByDefendant", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dossier/GetByDefendant &#x60;ttWebContext&#x60; requires a &#x60;TPAR_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierGetByDefendantRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DossierGetByDefendant200Response</returns>
        public async System.Threading.Tasks.Task<DossierGetByDefendant200Response> DossierGetByDefendantAsync(DossierGetByDefendantRequest? dossierGetByDefendantRequest = default(DossierGetByDefendantRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<DossierGetByDefendant200Response> localVarResponse = await DossierGetByDefendantWithHttpInfoAsync(dossierGetByDefendantRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dossier/GetByDefendant &#x60;ttWebContext&#x60; requires a &#x60;TPAR_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierGetByDefendantRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DossierGetByDefendant200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<DossierGetByDefendant200Response>> DossierGetByDefendantWithHttpInfoAsync(DossierGetByDefendantRequest? dossierGetByDefendantRequest = default(DossierGetByDefendantRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = dossierGetByDefendantRequest;

            localVarRequestOptions.Operation = "DossierApi.DossierGetByDefendant";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DossierGetByDefendant200Response>("/Dossier/GetByDefendant", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DossierGetByDefendant", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dossier/GetCorrespondence Returns all correspondence on a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DossierGetCorrespondence200Response</returns>
        public DossierGetCorrespondence200Response DossierGetCorrespondence(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<DossierGetCorrespondence200Response> localVarResponse = DossierGetCorrespondenceWithHttpInfo(documentGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dossier/GetCorrespondence Returns all correspondence on a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DossierGetCorrespondence200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<DossierGetCorrespondence200Response> DossierGetCorrespondenceWithHttpInfo(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = documentGetRequest;

            localVarRequestOptions.Operation = "DossierApi.DossierGetCorrespondence";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DossierGetCorrespondence200Response>("/Dossier/GetCorrespondence", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DossierGetCorrespondence", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dossier/GetCorrespondence Returns all correspondence on a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DossierGetCorrespondence200Response</returns>
        public async System.Threading.Tasks.Task<DossierGetCorrespondence200Response> DossierGetCorrespondenceAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<DossierGetCorrespondence200Response> localVarResponse = await DossierGetCorrespondenceWithHttpInfoAsync(documentGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dossier/GetCorrespondence Returns all correspondence on a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DossierGetCorrespondence200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<DossierGetCorrespondence200Response>> DossierGetCorrespondenceWithHttpInfoAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = documentGetRequest;

            localVarRequestOptions.Operation = "DossierApi.DossierGetCorrespondence";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DossierGetCorrespondence200Response>("/Dossier/GetCorrespondence", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DossierGetCorrespondence", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dossier/GetInfo Returns all info records on a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DossierGetInfo200Response</returns>
        public DossierGetInfo200Response DossierGetInfo(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<DossierGetInfo200Response> localVarResponse = DossierGetInfoWithHttpInfo(documentGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dossier/GetInfo Returns all info records on a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DossierGetInfo200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<DossierGetInfo200Response> DossierGetInfoWithHttpInfo(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = documentGetRequest;

            localVarRequestOptions.Operation = "DossierApi.DossierGetInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DossierGetInfo200Response>("/Dossier/GetInfo", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DossierGetInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dossier/GetInfo Returns all info records on a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DossierGetInfo200Response</returns>
        public async System.Threading.Tasks.Task<DossierGetInfo200Response> DossierGetInfoAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<DossierGetInfo200Response> localVarResponse = await DossierGetInfoWithHttpInfoAsync(documentGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dossier/GetInfo Returns all info records on a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DossierGetInfo200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<DossierGetInfo200Response>> DossierGetInfoWithHttpInfoAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = documentGetRequest;

            localVarRequestOptions.Operation = "DossierApi.DossierGetInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DossierGetInfo200Response>("/Dossier/GetInfo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DossierGetInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dossier/GetLines Returns all transaction records on a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element. Other options are optional: - &#x60;is-defendant&#x60; (boolean): returns the overview from the defendants perspective. - &#x60;evolution-only&#x60; (boolean): only returns records the office marked as &#39;important in the evolution of the file&#39;. - &#x60;unfinished-deeds&#x60; (boolean)   _To get files in the &#x60;evolution-only&#x60; view you have to mark &#x60;TQAARD&#x60; records as evolution._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DossierGetLines200Response</returns>
        public DossierGetLines200Response DossierGetLines(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<DossierGetLines200Response> localVarResponse = DossierGetLinesWithHttpInfo(codeGetListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dossier/GetLines Returns all transaction records on a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element. Other options are optional: - &#x60;is-defendant&#x60; (boolean): returns the overview from the defendants perspective. - &#x60;evolution-only&#x60; (boolean): only returns records the office marked as &#39;important in the evolution of the file&#39;. - &#x60;unfinished-deeds&#x60; (boolean)   _To get files in the &#x60;evolution-only&#x60; view you have to mark &#x60;TQAARD&#x60; records as evolution._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DossierGetLines200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<DossierGetLines200Response> DossierGetLinesWithHttpInfo(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = codeGetListRequest;

            localVarRequestOptions.Operation = "DossierApi.DossierGetLines";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DossierGetLines200Response>("/Dossier/GetLines", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DossierGetLines", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dossier/GetLines Returns all transaction records on a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element. Other options are optional: - &#x60;is-defendant&#x60; (boolean): returns the overview from the defendants perspective. - &#x60;evolution-only&#x60; (boolean): only returns records the office marked as &#39;important in the evolution of the file&#39;. - &#x60;unfinished-deeds&#x60; (boolean)   _To get files in the &#x60;evolution-only&#x60; view you have to mark &#x60;TQAARD&#x60; records as evolution._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DossierGetLines200Response</returns>
        public async System.Threading.Tasks.Task<DossierGetLines200Response> DossierGetLinesAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<DossierGetLines200Response> localVarResponse = await DossierGetLinesWithHttpInfoAsync(codeGetListRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dossier/GetLines Returns all transaction records on a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element. Other options are optional: - &#x60;is-defendant&#x60; (boolean): returns the overview from the defendants perspective. - &#x60;evolution-only&#x60; (boolean): only returns records the office marked as &#39;important in the evolution of the file&#39;. - &#x60;unfinished-deeds&#x60; (boolean)   _To get files in the &#x60;evolution-only&#x60; view you have to mark &#x60;TQAARD&#x60; records as evolution._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DossierGetLines200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<DossierGetLines200Response>> DossierGetLinesWithHttpInfoAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = codeGetListRequest;

            localVarRequestOptions.Operation = "DossierApi.DossierGetLines";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DossierGetLines200Response>("/Dossier/GetLines", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DossierGetLines", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dossier/GetParties &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConfigInfo200Response</returns>
        public ConfigInfo200Response DossierGetParties(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<ConfigInfo200Response> localVarResponse = DossierGetPartiesWithHttpInfo(documentGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dossier/GetParties &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConfigInfo200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<ConfigInfo200Response> DossierGetPartiesWithHttpInfo(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = documentGetRequest;

            localVarRequestOptions.Operation = "DossierApi.DossierGetParties";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ConfigInfo200Response>("/Dossier/GetParties", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DossierGetParties", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dossier/GetParties &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfigInfo200Response</returns>
        public async System.Threading.Tasks.Task<ConfigInfo200Response> DossierGetPartiesAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<ConfigInfo200Response> localVarResponse = await DossierGetPartiesWithHttpInfoAsync(documentGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dossier/GetParties &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfigInfo200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<ConfigInfo200Response>> DossierGetPartiesWithHttpInfoAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = documentGetRequest;

            localVarRequestOptions.Operation = "DossierApi.DossierGetParties";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ConfigInfo200Response>("/Dossier/GetParties", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DossierGetParties", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dossier/GetPaymentPlans &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element. Other options are optional: - &#x60;active-only&#x60; (boolean): only return active payment plans.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DossierGetPaymentPlans200Response</returns>
        public DossierGetPaymentPlans200Response DossierGetPaymentPlans(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<DossierGetPaymentPlans200Response> localVarResponse = DossierGetPaymentPlansWithHttpInfo(documentGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dossier/GetPaymentPlans &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element. Other options are optional: - &#x60;active-only&#x60; (boolean): only return active payment plans.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DossierGetPaymentPlans200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<DossierGetPaymentPlans200Response> DossierGetPaymentPlansWithHttpInfo(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = documentGetRequest;

            localVarRequestOptions.Operation = "DossierApi.DossierGetPaymentPlans";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DossierGetPaymentPlans200Response>("/Dossier/GetPaymentPlans", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DossierGetPaymentPlans", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dossier/GetPaymentPlans &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element. Other options are optional: - &#x60;active-only&#x60; (boolean): only return active payment plans.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DossierGetPaymentPlans200Response</returns>
        public async System.Threading.Tasks.Task<DossierGetPaymentPlans200Response> DossierGetPaymentPlansAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<DossierGetPaymentPlans200Response> localVarResponse = await DossierGetPaymentPlansWithHttpInfoAsync(documentGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dossier/GetPaymentPlans &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element. Other options are optional: - &#x60;active-only&#x60; (boolean): only return active payment plans.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DossierGetPaymentPlans200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<DossierGetPaymentPlans200Response>> DossierGetPaymentPlansWithHttpInfoAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = documentGetRequest;

            localVarRequestOptions.Operation = "DossierApi.DossierGetPaymentPlans";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DossierGetPaymentPlans200Response>("/Dossier/GetPaymentPlans", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DossierGetPaymentPlans", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dossier/GetSub &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DossierGetSub200Response</returns>
        public DossierGetSub200Response DossierGetSub(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<DossierGetSub200Response> localVarResponse = DossierGetSubWithHttpInfo(documentGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dossier/GetSub &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DossierGetSub200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<DossierGetSub200Response> DossierGetSubWithHttpInfo(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = documentGetRequest;

            localVarRequestOptions.Operation = "DossierApi.DossierGetSub";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DossierGetSub200Response>("/Dossier/GetSub", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DossierGetSub", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dossier/GetSub &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DossierGetSub200Response</returns>
        public async System.Threading.Tasks.Task<DossierGetSub200Response> DossierGetSubAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<DossierGetSub200Response> localVarResponse = await DossierGetSubWithHttpInfoAsync(documentGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dossier/GetSub &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DossierGetSub200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<DossierGetSub200Response>> DossierGetSubWithHttpInfoAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = documentGetRequest;

            localVarRequestOptions.Operation = "DossierApi.DossierGetSub";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DossierGetSub200Response>("/Dossier/GetSub", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DossierGetSub", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dossier/GetTitle &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DossierGetTitle200Response</returns>
        public DossierGetTitle200Response DossierGetTitle(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<DossierGetTitle200Response> localVarResponse = DossierGetTitleWithHttpInfo(documentGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dossier/GetTitle &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DossierGetTitle200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<DossierGetTitle200Response> DossierGetTitleWithHttpInfo(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = documentGetRequest;

            localVarRequestOptions.Operation = "DossierApi.DossierGetTitle";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DossierGetTitle200Response>("/Dossier/GetTitle", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DossierGetTitle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dossier/GetTitle &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DossierGetTitle200Response</returns>
        public async System.Threading.Tasks.Task<DossierGetTitle200Response> DossierGetTitleAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<DossierGetTitle200Response> localVarResponse = await DossierGetTitleWithHttpInfoAsync(documentGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dossier/GetTitle &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DossierGetTitle200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<DossierGetTitle200Response>> DossierGetTitleWithHttpInfoAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = documentGetRequest;

            localVarRequestOptions.Operation = "DossierApi.DossierGetTitle";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DossierGetTitle200Response>("/Dossier/GetTitle", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DossierGetTitle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dossier/Search 
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierSearchRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DossierSearch200Response</returns>
        public DossierSearch200Response DossierSearch(DossierSearchRequest? dossierSearchRequest = default(DossierSearchRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<DossierSearch200Response> localVarResponse = DossierSearchWithHttpInfo(dossierSearchRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dossier/Search 
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierSearchRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DossierSearch200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<DossierSearch200Response> DossierSearchWithHttpInfo(DossierSearchRequest? dossierSearchRequest = default(DossierSearchRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = dossierSearchRequest;

            localVarRequestOptions.Operation = "DossierApi.DossierSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DossierSearch200Response>("/Dossier/Search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DossierSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dossier/Search 
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierSearchRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DossierSearch200Response</returns>
        public async System.Threading.Tasks.Task<DossierSearch200Response> DossierSearchAsync(DossierSearchRequest? dossierSearchRequest = default(DossierSearchRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<DossierSearch200Response> localVarResponse = await DossierSearchWithHttpInfoAsync(dossierSearchRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dossier/Search 
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierSearchRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DossierSearch200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<DossierSearch200Response>> DossierSearchWithHttpInfoAsync(DossierSearchRequest? dossierSearchRequest = default(DossierSearchRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = dossierSearchRequest;

            localVarRequestOptions.Operation = "DossierApi.DossierSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DossierSearch200Response>("/Dossier/Search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DossierSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dossier/Stop &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DossierGet200Response</returns>
        public DossierGet200Response DossierStop(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<DossierGet200Response> localVarResponse = DossierStopWithHttpInfo(documentGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dossier/Stop &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DossierGet200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<DossierGet200Response> DossierStopWithHttpInfo(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = documentGetRequest;

            localVarRequestOptions.Operation = "DossierApi.DossierStop";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DossierGet200Response>("/Dossier/Stop", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DossierStop", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dossier/Stop &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DossierGet200Response</returns>
        public async System.Threading.Tasks.Task<DossierGet200Response> DossierStopAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<DossierGet200Response> localVarResponse = await DossierStopWithHttpInfoAsync(documentGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dossier/Stop &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DossierGet200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<DossierGet200Response>> DossierStopWithHttpInfoAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = documentGetRequest;

            localVarRequestOptions.Operation = "DossierApi.DossierStop";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DossierGet200Response>("/Dossier/Stop", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DossierStop", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}