/*
 * Tagor API
 *
 * Release date: 29/09/2022  ## REQUIREMENTS This version __requires__ Tagor >= 2.00.0000B0. Use [`Config/Info`](#operation/ConfigInfo) to get the active API version.  ## CHANGELOG - New [`Dossier/CreateAgenda`](#operation/DossierCreateAgenda) endpoint. - New return values in GetAgenda 'TJOB_Id, TJOBM_Id, TUSER_Id, Manueel and IsGeblokkeerd' - In CreateLine you can now add if the line is fixed with 'IsFixed' - In CreateLine you can now add a subarray with the intrests  ## INFO - Using the download button at the top you can import this collection of endpoints in **Postman** - In general all TQ(...)_Id fields are default fields which you can translate with the [`Code/GetDescription`](#operation/CodeGetDescription) endpoint. If you need an id to post to one of the endpoints you can use the [`Code/GetList`](#operation/CodeGetList) endpoint to get all possible values or [`Code/GetDescription`](#operation/CodeGetDescription) to get a value by code. These id's will be marked as `code id` in the documentation. - We chose to return all ids as string because these are 64bit integers which are too big for javascript to handle. - All italic text below the endpoint description is meant for people with access to Tagor. - The user needs an email address configured in Tagor for the services to work properly. - Pass the `Accept` header with `application/json` as value to have the server return errors in json format. - Most endpoints can be batched/paged by passing a `BATCH-SIZE` and `BATCH-NUMBER` record in `dsWebContext`.  # AUTHENTICATION Pass your token via an `Authorization` header like this: `Authorization: {bearer_format} {token}`.  ex: `Authorization: TGR IcoQbVw7wE...PPUPda61ET` <!- - ReDoc-Inject: <security-definitions> - ->
 *
 * The version of the OpenAPI document: 2.00.0000B1
 * Contact: info@organi.be
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Microsoft.Extensions.Logging;
using GDWInnovations.TagorClient.Client;
using GDWInnovations.TagorClient.Model;

namespace GDWInnovations.TagorClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDocumentApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Document/Generate
        /// </summary>
        /// <remarks>
        /// A list of all possible &#x60;TDOCM_Id&#x60; values can be retreived with [&#x60;User/GetPermissionsList&#x60;](#operation/UserGetPermissionsList).
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConfigVersion200Response</returns>
        ConfigVersion200Response DocumentGenerate(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0);

        /// <summary>
        /// Document/Generate
        /// </summary>
        /// <remarks>
        /// A list of all possible &#x60;TDOCM_Id&#x60; values can be retreived with [&#x60;User/GetPermissionsList&#x60;](#operation/UserGetPermissionsList).
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConfigVersion200Response</returns>
        ApiResponse<ConfigVersion200Response> DocumentGenerateWithHttpInfo(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0);
        /// <summary>
        /// Document/Get
        /// </summary>
        /// <remarks>
        /// Get all documents on a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element. The &#x60;Inhoud&#x60; field will always be empty here.  _Some parameters can be used to configure this endpoint:_ - &#x60;Parameter 192&#x60;: _Only show PDF files._ - &#x60;Parameter 369&#x60;: _Blacklist some security codes._ - &#x60;Parameter 430&#x60;: _Allowed &#x60;TQDISGROEP&#x60;s. Empty for all. __
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DocumentGet200Response</returns>
        DocumentGet200Response DocumentGet(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0);

        /// <summary>
        /// Document/Get
        /// </summary>
        /// <remarks>
        /// Get all documents on a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element. The &#x60;Inhoud&#x60; field will always be empty here.  _Some parameters can be used to configure this endpoint:_ - &#x60;Parameter 192&#x60;: _Only show PDF files._ - &#x60;Parameter 369&#x60;: _Blacklist some security codes._ - &#x60;Parameter 430&#x60;: _Allowed &#x60;TQDISGROEP&#x60;s. Empty for all. __
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DocumentGet200Response</returns>
        ApiResponse<DocumentGet200Response> DocumentGetWithHttpInfo(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0);
        /// <summary>
        /// Document/GetFile
        /// </summary>
        /// <remarks>
        /// Get a single document on a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOC_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetFileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DocumentGet200Response</returns>
        DocumentGet200Response DocumentGetFile(DocumentGetFileRequest? documentGetFileRequest = default(DocumentGetFileRequest?), int operationIndex = 0);

        /// <summary>
        /// Document/GetFile
        /// </summary>
        /// <remarks>
        /// Get a single document on a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOC_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetFileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DocumentGet200Response</returns>
        ApiResponse<DocumentGet200Response> DocumentGetFileWithHttpInfo(DocumentGetFileRequest? documentGetFileRequest = default(DocumentGetFileRequest?), int operationIndex = 0);
        /// <summary>
        /// Document/GetMergefield
        /// </summary>
        /// <remarks>
        /// Get one of the available mergefields on a file. &#x60;ttWebContext&#x60; requires &#x60;TDOS_Id&#x60; and &#x60;Mergefield&#x60; elements. You can get a list of all available mergefields by calling the [&#x60;User/GetPermissionsList&#x60;](#operation/UserGetPermissionsList) endpoint and passing &#x60;WL_QRY_FIELD&#x60; as type.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetMergefieldRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DocumentGetMergefield200Response</returns>
        DocumentGetMergefield200Response DocumentGetMergefield(DocumentGetMergefieldRequest? documentGetMergefieldRequest = default(DocumentGetMergefieldRequest?), int operationIndex = 0);

        /// <summary>
        /// Document/GetMergefield
        /// </summary>
        /// <remarks>
        /// Get one of the available mergefields on a file. &#x60;ttWebContext&#x60; requires &#x60;TDOS_Id&#x60; and &#x60;Mergefield&#x60; elements. You can get a list of all available mergefields by calling the [&#x60;User/GetPermissionsList&#x60;](#operation/UserGetPermissionsList) endpoint and passing &#x60;WL_QRY_FIELD&#x60; as type.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetMergefieldRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DocumentGetMergefield200Response</returns>
        ApiResponse<DocumentGetMergefield200Response> DocumentGetMergefieldWithHttpInfo(DocumentGetMergefieldRequest? documentGetMergefieldRequest = default(DocumentGetMergefieldRequest?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDocumentApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Document/Generate
        /// </summary>
        /// <remarks>
        /// A list of all possible &#x60;TDOCM_Id&#x60; values can be retreived with [&#x60;User/GetPermissionsList&#x60;](#operation/UserGetPermissionsList).
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfigVersion200Response</returns>
        System.Threading.Tasks.Task<ConfigVersion200Response> DocumentGenerateAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Document/Generate
        /// </summary>
        /// <remarks>
        /// A list of all possible &#x60;TDOCM_Id&#x60; values can be retreived with [&#x60;User/GetPermissionsList&#x60;](#operation/UserGetPermissionsList).
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfigVersion200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConfigVersion200Response>> DocumentGenerateWithHttpInfoAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Document/Get
        /// </summary>
        /// <remarks>
        /// Get all documents on a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element. The &#x60;Inhoud&#x60; field will always be empty here.  _Some parameters can be used to configure this endpoint:_ - &#x60;Parameter 192&#x60;: _Only show PDF files._ - &#x60;Parameter 369&#x60;: _Blacklist some security codes._ - &#x60;Parameter 430&#x60;: _Allowed &#x60;TQDISGROEP&#x60;s. Empty for all. __
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DocumentGet200Response</returns>
        System.Threading.Tasks.Task<DocumentGet200Response> DocumentGetAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Document/Get
        /// </summary>
        /// <remarks>
        /// Get all documents on a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element. The &#x60;Inhoud&#x60; field will always be empty here.  _Some parameters can be used to configure this endpoint:_ - &#x60;Parameter 192&#x60;: _Only show PDF files._ - &#x60;Parameter 369&#x60;: _Blacklist some security codes._ - &#x60;Parameter 430&#x60;: _Allowed &#x60;TQDISGROEP&#x60;s. Empty for all. __
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DocumentGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentGet200Response>> DocumentGetWithHttpInfoAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Document/GetFile
        /// </summary>
        /// <remarks>
        /// Get a single document on a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOC_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetFileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DocumentGet200Response</returns>
        System.Threading.Tasks.Task<DocumentGet200Response> DocumentGetFileAsync(DocumentGetFileRequest? documentGetFileRequest = default(DocumentGetFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Document/GetFile
        /// </summary>
        /// <remarks>
        /// Get a single document on a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOC_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetFileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DocumentGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentGet200Response>> DocumentGetFileWithHttpInfoAsync(DocumentGetFileRequest? documentGetFileRequest = default(DocumentGetFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Document/GetMergefield
        /// </summary>
        /// <remarks>
        /// Get one of the available mergefields on a file. &#x60;ttWebContext&#x60; requires &#x60;TDOS_Id&#x60; and &#x60;Mergefield&#x60; elements. You can get a list of all available mergefields by calling the [&#x60;User/GetPermissionsList&#x60;](#operation/UserGetPermissionsList) endpoint and passing &#x60;WL_QRY_FIELD&#x60; as type.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetMergefieldRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DocumentGetMergefield200Response</returns>
        System.Threading.Tasks.Task<DocumentGetMergefield200Response> DocumentGetMergefieldAsync(DocumentGetMergefieldRequest? documentGetMergefieldRequest = default(DocumentGetMergefieldRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Document/GetMergefield
        /// </summary>
        /// <remarks>
        /// Get one of the available mergefields on a file. &#x60;ttWebContext&#x60; requires &#x60;TDOS_Id&#x60; and &#x60;Mergefield&#x60; elements. You can get a list of all available mergefields by calling the [&#x60;User/GetPermissionsList&#x60;](#operation/UserGetPermissionsList) endpoint and passing &#x60;WL_QRY_FIELD&#x60; as type.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetMergefieldRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DocumentGetMergefield200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentGetMergefield200Response>> DocumentGetMergefieldWithHttpInfoAsync(DocumentGetMergefieldRequest? documentGetMergefieldRequest = default(DocumentGetMergefieldRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDocumentApi : IDocumentApiSync, IDocumentApiAsync
    {
        /// <summary>
        /// Set the logger to this service
        /// </summary>
        /// <param name="loggerFactory"></param>
        public void SetLogger(ILoggerFactory loggerFactory);   
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DocumentApi : IDocumentApi
    {
        /// <summary>
        /// Set the logger to this service
        /// </summary>
        /// <param name="loggerFactory">The logger factory</param>
        public void SetLogger(ILoggerFactory loggerFactory)
        {
            this.Client.SetLogger(loggerFactory);
            this.AsynchronousClient.SetLogger(loggerFactory);
        }

        private GDWInnovations.TagorClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DocumentApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DocumentApi(string basePath)
        {
            this.Configuration = GDWInnovations.TagorClient.Client.Configuration.MergeConfigurations(
                GDWInnovations.TagorClient.Client.GlobalConfiguration.Instance,
                new GDWInnovations.TagorClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new GDWInnovations.TagorClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GDWInnovations.TagorClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = GDWInnovations.TagorClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DocumentApi(GDWInnovations.TagorClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = GDWInnovations.TagorClient.Client.Configuration.MergeConfigurations(
                GDWInnovations.TagorClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new GDWInnovations.TagorClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GDWInnovations.TagorClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = GDWInnovations.TagorClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DocumentApi(GDWInnovations.TagorClient.Client.ISynchronousClient client, GDWInnovations.TagorClient.Client.IAsynchronousClient asyncClient, GDWInnovations.TagorClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = GDWInnovations.TagorClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public GDWInnovations.TagorClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public GDWInnovations.TagorClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public GDWInnovations.TagorClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public GDWInnovations.TagorClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Document/Generate A list of all possible &#x60;TDOCM_Id&#x60; values can be retreived with [&#x60;User/GetPermissionsList&#x60;](#operation/UserGetPermissionsList).
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConfigVersion200Response</returns>
        public ConfigVersion200Response DocumentGenerate(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<ConfigVersion200Response> localVarResponse = DocumentGenerateWithHttpInfo(codeGetListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Document/Generate A list of all possible &#x60;TDOCM_Id&#x60; values can be retreived with [&#x60;User/GetPermissionsList&#x60;](#operation/UserGetPermissionsList).
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConfigVersion200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<ConfigVersion200Response> DocumentGenerateWithHttpInfo(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = codeGetListRequest;

            localVarRequestOptions.Operation = "DocumentApi.DocumentGenerate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ConfigVersion200Response>("/Document/Generate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DocumentGenerate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Document/Generate A list of all possible &#x60;TDOCM_Id&#x60; values can be retreived with [&#x60;User/GetPermissionsList&#x60;](#operation/UserGetPermissionsList).
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfigVersion200Response</returns>
        public async System.Threading.Tasks.Task<ConfigVersion200Response> DocumentGenerateAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<ConfigVersion200Response> localVarResponse = await DocumentGenerateWithHttpInfoAsync(codeGetListRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Document/Generate A list of all possible &#x60;TDOCM_Id&#x60; values can be retreived with [&#x60;User/GetPermissionsList&#x60;](#operation/UserGetPermissionsList).
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfigVersion200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<ConfigVersion200Response>> DocumentGenerateWithHttpInfoAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = codeGetListRequest;

            localVarRequestOptions.Operation = "DocumentApi.DocumentGenerate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ConfigVersion200Response>("/Document/Generate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DocumentGenerate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Document/Get Get all documents on a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element. The &#x60;Inhoud&#x60; field will always be empty here.  _Some parameters can be used to configure this endpoint:_ - &#x60;Parameter 192&#x60;: _Only show PDF files._ - &#x60;Parameter 369&#x60;: _Blacklist some security codes._ - &#x60;Parameter 430&#x60;: _Allowed &#x60;TQDISGROEP&#x60;s. Empty for all. __
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DocumentGet200Response</returns>
        public DocumentGet200Response DocumentGet(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<DocumentGet200Response> localVarResponse = DocumentGetWithHttpInfo(documentGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Document/Get Get all documents on a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element. The &#x60;Inhoud&#x60; field will always be empty here.  _Some parameters can be used to configure this endpoint:_ - &#x60;Parameter 192&#x60;: _Only show PDF files._ - &#x60;Parameter 369&#x60;: _Blacklist some security codes._ - &#x60;Parameter 430&#x60;: _Allowed &#x60;TQDISGROEP&#x60;s. Empty for all. __
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DocumentGet200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<DocumentGet200Response> DocumentGetWithHttpInfo(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = documentGetRequest;

            localVarRequestOptions.Operation = "DocumentApi.DocumentGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DocumentGet200Response>("/Document/Get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DocumentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Document/Get Get all documents on a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element. The &#x60;Inhoud&#x60; field will always be empty here.  _Some parameters can be used to configure this endpoint:_ - &#x60;Parameter 192&#x60;: _Only show PDF files._ - &#x60;Parameter 369&#x60;: _Blacklist some security codes._ - &#x60;Parameter 430&#x60;: _Allowed &#x60;TQDISGROEP&#x60;s. Empty for all. __
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DocumentGet200Response</returns>
        public async System.Threading.Tasks.Task<DocumentGet200Response> DocumentGetAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<DocumentGet200Response> localVarResponse = await DocumentGetWithHttpInfoAsync(documentGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Document/Get Get all documents on a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element. The &#x60;Inhoud&#x60; field will always be empty here.  _Some parameters can be used to configure this endpoint:_ - &#x60;Parameter 192&#x60;: _Only show PDF files._ - &#x60;Parameter 369&#x60;: _Blacklist some security codes._ - &#x60;Parameter 430&#x60;: _Allowed &#x60;TQDISGROEP&#x60;s. Empty for all. __
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DocumentGet200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<DocumentGet200Response>> DocumentGetWithHttpInfoAsync(DocumentGetRequest? documentGetRequest = default(DocumentGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = documentGetRequest;

            localVarRequestOptions.Operation = "DocumentApi.DocumentGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DocumentGet200Response>("/Document/Get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DocumentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Document/GetFile Get a single document on a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOC_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetFileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DocumentGet200Response</returns>
        public DocumentGet200Response DocumentGetFile(DocumentGetFileRequest? documentGetFileRequest = default(DocumentGetFileRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<DocumentGet200Response> localVarResponse = DocumentGetFileWithHttpInfo(documentGetFileRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Document/GetFile Get a single document on a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOC_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetFileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DocumentGet200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<DocumentGet200Response> DocumentGetFileWithHttpInfo(DocumentGetFileRequest? documentGetFileRequest = default(DocumentGetFileRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = documentGetFileRequest;

            localVarRequestOptions.Operation = "DocumentApi.DocumentGetFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DocumentGet200Response>("/Document/GetFile", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DocumentGetFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Document/GetFile Get a single document on a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOC_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetFileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DocumentGet200Response</returns>
        public async System.Threading.Tasks.Task<DocumentGet200Response> DocumentGetFileAsync(DocumentGetFileRequest? documentGetFileRequest = default(DocumentGetFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<DocumentGet200Response> localVarResponse = await DocumentGetFileWithHttpInfoAsync(documentGetFileRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Document/GetFile Get a single document on a file. &#x60;ttWebContext&#x60; requires a &#x60;TDOC_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetFileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DocumentGet200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<DocumentGet200Response>> DocumentGetFileWithHttpInfoAsync(DocumentGetFileRequest? documentGetFileRequest = default(DocumentGetFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = documentGetFileRequest;

            localVarRequestOptions.Operation = "DocumentApi.DocumentGetFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DocumentGet200Response>("/Document/GetFile", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DocumentGetFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Document/GetMergefield Get one of the available mergefields on a file. &#x60;ttWebContext&#x60; requires &#x60;TDOS_Id&#x60; and &#x60;Mergefield&#x60; elements. You can get a list of all available mergefields by calling the [&#x60;User/GetPermissionsList&#x60;](#operation/UserGetPermissionsList) endpoint and passing &#x60;WL_QRY_FIELD&#x60; as type.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetMergefieldRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DocumentGetMergefield200Response</returns>
        public DocumentGetMergefield200Response DocumentGetMergefield(DocumentGetMergefieldRequest? documentGetMergefieldRequest = default(DocumentGetMergefieldRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<DocumentGetMergefield200Response> localVarResponse = DocumentGetMergefieldWithHttpInfo(documentGetMergefieldRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Document/GetMergefield Get one of the available mergefields on a file. &#x60;ttWebContext&#x60; requires &#x60;TDOS_Id&#x60; and &#x60;Mergefield&#x60; elements. You can get a list of all available mergefields by calling the [&#x60;User/GetPermissionsList&#x60;](#operation/UserGetPermissionsList) endpoint and passing &#x60;WL_QRY_FIELD&#x60; as type.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetMergefieldRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DocumentGetMergefield200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<DocumentGetMergefield200Response> DocumentGetMergefieldWithHttpInfo(DocumentGetMergefieldRequest? documentGetMergefieldRequest = default(DocumentGetMergefieldRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = documentGetMergefieldRequest;

            localVarRequestOptions.Operation = "DocumentApi.DocumentGetMergefield";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DocumentGetMergefield200Response>("/Document/GetMergefield", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DocumentGetMergefield", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Document/GetMergefield Get one of the available mergefields on a file. &#x60;ttWebContext&#x60; requires &#x60;TDOS_Id&#x60; and &#x60;Mergefield&#x60; elements. You can get a list of all available mergefields by calling the [&#x60;User/GetPermissionsList&#x60;](#operation/UserGetPermissionsList) endpoint and passing &#x60;WL_QRY_FIELD&#x60; as type.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetMergefieldRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DocumentGetMergefield200Response</returns>
        public async System.Threading.Tasks.Task<DocumentGetMergefield200Response> DocumentGetMergefieldAsync(DocumentGetMergefieldRequest? documentGetMergefieldRequest = default(DocumentGetMergefieldRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<DocumentGetMergefield200Response> localVarResponse = await DocumentGetMergefieldWithHttpInfoAsync(documentGetMergefieldRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Document/GetMergefield Get one of the available mergefields on a file. &#x60;ttWebContext&#x60; requires &#x60;TDOS_Id&#x60; and &#x60;Mergefield&#x60; elements. You can get a list of all available mergefields by calling the [&#x60;User/GetPermissionsList&#x60;](#operation/UserGetPermissionsList) endpoint and passing &#x60;WL_QRY_FIELD&#x60; as type.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentGetMergefieldRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DocumentGetMergefield200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<DocumentGetMergefield200Response>> DocumentGetMergefieldWithHttpInfoAsync(DocumentGetMergefieldRequest? documentGetMergefieldRequest = default(DocumentGetMergefieldRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = documentGetMergefieldRequest;

            localVarRequestOptions.Operation = "DocumentApi.DocumentGetMergefield";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DocumentGetMergefield200Response>("/Document/GetMergefield", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DocumentGetMergefield", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}