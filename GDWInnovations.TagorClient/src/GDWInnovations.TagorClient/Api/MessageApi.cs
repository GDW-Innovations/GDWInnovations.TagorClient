/*
 * Tagor API
 *
 * Release date: 29/09/2022  ## REQUIREMENTS This version __requires__ Tagor >= 2.00.0000B0. Use [`Config/Info`](#operation/ConfigInfo) to get the active API version.  ## CHANGELOG - New [`Dossier/CreateAgenda`](#operation/DossierCreateAgenda) endpoint. - New return values in GetAgenda 'TJOB_Id, TJOBM_Id, TUSER_Id, Manueel and IsGeblokkeerd' - In CreateLine you can now add if the line is fixed with 'IsFixed' - In CreateLine you can now add a subarray with the intrests  ## INFO - Using the download button at the top you can import this collection of endpoints in **Postman** - In general all TQ(...)_Id fields are default fields which you can translate with the [`Code/GetDescription`](#operation/CodeGetDescription) endpoint. If you need an id to post to one of the endpoints you can use the [`Code/GetList`](#operation/CodeGetList) endpoint to get all possible values or [`Code/GetDescription`](#operation/CodeGetDescription) to get a value by code. These id's will be marked as `code id` in the documentation. - We chose to return all ids as string because these are 64bit integers which are too big for javascript to handle. - All italic text below the endpoint description is meant for people with access to Tagor. - The user needs an email address configured in Tagor for the services to work properly. - Pass the `Accept` header with `application/json` as value to have the server return errors in json format. - Most endpoints can be batched/paged by passing a `BATCH-SIZE` and `BATCH-NUMBER` record in `dsWebContext`.  # AUTHENTICATION Pass your token via an `Authorization` header like this: `Authorization: {bearer_format} {token}`.  ex: `Authorization: TGR IcoQbVw7wE...PPUPda61ET` <!- - ReDoc-Inject: <security-definitions> - ->
 *
 * The version of the OpenAPI document: 2.00.0000B1
 * Contact: info@organi.be
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Microsoft.Extensions.Logging;
using GDWInnovations.TagorClient.Client;
using GDWInnovations.TagorClient.Model;

namespace GDWInnovations.TagorClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMessageApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Message/Add
        /// </summary>
        /// <remarks>
        /// &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element. Pass a message in &#x60;dsTBERICHTWeb&#x60;. Optional attachments can be passed in &#x60;dsAttachmentWeb&#x60;.  _&#x60;Param 436&#x60; will be used to determine the message&#39;s disgroep. Defaults to &#x60;7006&#x60;_
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageAddRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MessageAdd200Response</returns>
        MessageAdd200Response MessageAdd(MessageAddRequest? messageAddRequest = default(MessageAddRequest?), int operationIndex = 0);

        /// <summary>
        /// Message/Add
        /// </summary>
        /// <remarks>
        /// &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element. Pass a message in &#x60;dsTBERICHTWeb&#x60;. Optional attachments can be passed in &#x60;dsAttachmentWeb&#x60;.  _&#x60;Param 436&#x60; will be used to determine the message&#39;s disgroep. Defaults to &#x60;7006&#x60;_
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageAddRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MessageAdd200Response</returns>
        ApiResponse<MessageAdd200Response> MessageAddWithHttpInfo(MessageAddRequest? messageAddRequest = default(MessageAddRequest?), int operationIndex = 0);
        /// <summary>
        /// Message/GetListFilter
        /// </summary>
        /// <remarks>
        /// Same endpoint as [&#x60;Message/GetList&#x60;](#operation/MessageGetList). See this endpoint for the possible values in &#x60;dsWebContext&#x60;. This endpoint also accepts a &#x60;dsFilter&#x60; object that works the same as [&#x60;Dossier/Search&#x60;](#operation/DossierSearch).
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierSearchRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MessageAdd200Response</returns>
        MessageAdd200Response MessageGetListFilter(DossierSearchRequest? dossierSearchRequest = default(DossierSearchRequest?), int operationIndex = 0);

        /// <summary>
        /// Message/GetListFilter
        /// </summary>
        /// <remarks>
        /// Same endpoint as [&#x60;Message/GetList&#x60;](#operation/MessageGetList). See this endpoint for the possible values in &#x60;dsWebContext&#x60;. This endpoint also accepts a &#x60;dsFilter&#x60; object that works the same as [&#x60;Dossier/Search&#x60;](#operation/DossierSearch).
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierSearchRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MessageAdd200Response</returns>
        ApiResponse<MessageAdd200Response> MessageGetListFilterWithHttpInfo(DossierSearchRequest? dossierSearchRequest = default(DossierSearchRequest?), int operationIndex = 0);
        /// <summary>
        /// Message/GetLog
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MessageAdd200Response</returns>
        MessageAdd200Response MessageGetLog(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0);

        /// <summary>
        /// Message/GetLog
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MessageAdd200Response</returns>
        ApiResponse<MessageAdd200Response> MessageGetLogWithHttpInfo(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0);
        /// <summary>
        /// Message/GetMessage
        /// </summary>
        /// <remarks>
        /// Gets a single message based on id. &#x60;ttWebContext&#x60; requires a &#x60;TBERICHT_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageGetMessageRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MessageGetMessage200Response</returns>
        MessageGetMessage200Response MessageGetMessage(MessageGetMessageRequest? messageGetMessageRequest = default(MessageGetMessageRequest?), int operationIndex = 0);

        /// <summary>
        /// Message/GetMessage
        /// </summary>
        /// <remarks>
        /// Gets a single message based on id. &#x60;ttWebContext&#x60; requires a &#x60;TBERICHT_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageGetMessageRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MessageGetMessage200Response</returns>
        ApiResponse<MessageGetMessage200Response> MessageGetMessageWithHttpInfo(MessageGetMessageRequest? messageGetMessageRequest = default(MessageGetMessageRequest?), int operationIndex = 0);
        /// <summary>
        /// Message/GetSenderReceiverList
        /// </summary>
        /// <remarks>
        /// When this endpoint is called without any &#x60;ttWebContext&#x60; records it will return all groups a user belongs to. Other options are optional: - &#x60;Type&#x60; (enum &#x60;senders&#x60; or &#x60;receivers&#x60;): when &#x60;senders&#x60; is passed &#x60;TPAR_Id&#x60; is required. - &#x60;TDOS_Id&#x60;: active file you want to send a message on. This is required to get the groups of the user. Otherwise only the active user will be returned (if this user is allowed to send messages). - &#x60;TPAR_Id&#x60;: Id of the party you want to send messages to/from.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConfigInfo200Response</returns>
        ConfigInfo200Response MessageGetSenderReceiverList(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0);

        /// <summary>
        /// Message/GetSenderReceiverList
        /// </summary>
        /// <remarks>
        /// When this endpoint is called without any &#x60;ttWebContext&#x60; records it will return all groups a user belongs to. Other options are optional: - &#x60;Type&#x60; (enum &#x60;senders&#x60; or &#x60;receivers&#x60;): when &#x60;senders&#x60; is passed &#x60;TPAR_Id&#x60; is required. - &#x60;TDOS_Id&#x60;: active file you want to send a message on. This is required to get the groups of the user. Otherwise only the active user will be returned (if this user is allowed to send messages). - &#x60;TPAR_Id&#x60;: Id of the party you want to send messages to/from.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConfigInfo200Response</returns>
        ApiResponse<ConfigInfo200Response> MessageGetSenderReceiverListWithHttpInfo(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0);
        /// <summary>
        /// Message/ToggleRead
        /// </summary>
        /// <remarks>
        /// Toggles the status of a message. &#x60;ttWebContext&#x60; requires a &#x60;TBERICHT_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MessageGetMessage200Response</returns>
        MessageGetMessage200Response MessageToggleRead(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0);

        /// <summary>
        /// Message/ToggleRead
        /// </summary>
        /// <remarks>
        /// Toggles the status of a message. &#x60;ttWebContext&#x60; requires a &#x60;TBERICHT_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MessageGetMessage200Response</returns>
        ApiResponse<MessageGetMessage200Response> MessageToggleReadWithHttpInfo(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMessageApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Message/Add
        /// </summary>
        /// <remarks>
        /// &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element. Pass a message in &#x60;dsTBERICHTWeb&#x60;. Optional attachments can be passed in &#x60;dsAttachmentWeb&#x60;.  _&#x60;Param 436&#x60; will be used to determine the message&#39;s disgroep. Defaults to &#x60;7006&#x60;_
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageAddRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MessageAdd200Response</returns>
        System.Threading.Tasks.Task<MessageAdd200Response> MessageAddAsync(MessageAddRequest? messageAddRequest = default(MessageAddRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Message/Add
        /// </summary>
        /// <remarks>
        /// &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element. Pass a message in &#x60;dsTBERICHTWeb&#x60;. Optional attachments can be passed in &#x60;dsAttachmentWeb&#x60;.  _&#x60;Param 436&#x60; will be used to determine the message&#39;s disgroep. Defaults to &#x60;7006&#x60;_
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageAddRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MessageAdd200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageAdd200Response>> MessageAddWithHttpInfoAsync(MessageAddRequest? messageAddRequest = default(MessageAddRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Message/GetListFilter
        /// </summary>
        /// <remarks>
        /// Same endpoint as [&#x60;Message/GetList&#x60;](#operation/MessageGetList). See this endpoint for the possible values in &#x60;dsWebContext&#x60;. This endpoint also accepts a &#x60;dsFilter&#x60; object that works the same as [&#x60;Dossier/Search&#x60;](#operation/DossierSearch).
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierSearchRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MessageAdd200Response</returns>
        System.Threading.Tasks.Task<MessageAdd200Response> MessageGetListFilterAsync(DossierSearchRequest? dossierSearchRequest = default(DossierSearchRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Message/GetListFilter
        /// </summary>
        /// <remarks>
        /// Same endpoint as [&#x60;Message/GetList&#x60;](#operation/MessageGetList). See this endpoint for the possible values in &#x60;dsWebContext&#x60;. This endpoint also accepts a &#x60;dsFilter&#x60; object that works the same as [&#x60;Dossier/Search&#x60;](#operation/DossierSearch).
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierSearchRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MessageAdd200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageAdd200Response>> MessageGetListFilterWithHttpInfoAsync(DossierSearchRequest? dossierSearchRequest = default(DossierSearchRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Message/GetLog
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MessageAdd200Response</returns>
        System.Threading.Tasks.Task<MessageAdd200Response> MessageGetLogAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Message/GetLog
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MessageAdd200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageAdd200Response>> MessageGetLogWithHttpInfoAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Message/GetMessage
        /// </summary>
        /// <remarks>
        /// Gets a single message based on id. &#x60;ttWebContext&#x60; requires a &#x60;TBERICHT_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageGetMessageRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MessageGetMessage200Response</returns>
        System.Threading.Tasks.Task<MessageGetMessage200Response> MessageGetMessageAsync(MessageGetMessageRequest? messageGetMessageRequest = default(MessageGetMessageRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Message/GetMessage
        /// </summary>
        /// <remarks>
        /// Gets a single message based on id. &#x60;ttWebContext&#x60; requires a &#x60;TBERICHT_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageGetMessageRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MessageGetMessage200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageGetMessage200Response>> MessageGetMessageWithHttpInfoAsync(MessageGetMessageRequest? messageGetMessageRequest = default(MessageGetMessageRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Message/GetSenderReceiverList
        /// </summary>
        /// <remarks>
        /// When this endpoint is called without any &#x60;ttWebContext&#x60; records it will return all groups a user belongs to. Other options are optional: - &#x60;Type&#x60; (enum &#x60;senders&#x60; or &#x60;receivers&#x60;): when &#x60;senders&#x60; is passed &#x60;TPAR_Id&#x60; is required. - &#x60;TDOS_Id&#x60;: active file you want to send a message on. This is required to get the groups of the user. Otherwise only the active user will be returned (if this user is allowed to send messages). - &#x60;TPAR_Id&#x60;: Id of the party you want to send messages to/from.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfigInfo200Response</returns>
        System.Threading.Tasks.Task<ConfigInfo200Response> MessageGetSenderReceiverListAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Message/GetSenderReceiverList
        /// </summary>
        /// <remarks>
        /// When this endpoint is called without any &#x60;ttWebContext&#x60; records it will return all groups a user belongs to. Other options are optional: - &#x60;Type&#x60; (enum &#x60;senders&#x60; or &#x60;receivers&#x60;): when &#x60;senders&#x60; is passed &#x60;TPAR_Id&#x60; is required. - &#x60;TDOS_Id&#x60;: active file you want to send a message on. This is required to get the groups of the user. Otherwise only the active user will be returned (if this user is allowed to send messages). - &#x60;TPAR_Id&#x60;: Id of the party you want to send messages to/from.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfigInfo200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConfigInfo200Response>> MessageGetSenderReceiverListWithHttpInfoAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Message/ToggleRead
        /// </summary>
        /// <remarks>
        /// Toggles the status of a message. &#x60;ttWebContext&#x60; requires a &#x60;TBERICHT_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MessageGetMessage200Response</returns>
        System.Threading.Tasks.Task<MessageGetMessage200Response> MessageToggleReadAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Message/ToggleRead
        /// </summary>
        /// <remarks>
        /// Toggles the status of a message. &#x60;ttWebContext&#x60; requires a &#x60;TBERICHT_Id&#x60; element.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MessageGetMessage200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageGetMessage200Response>> MessageToggleReadWithHttpInfoAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMessageApi : IMessageApiSync, IMessageApiAsync
    {
        /// <summary>
        /// Set the logger to this service
        /// </summary>
        /// <param name="loggerFactory"></param>
        public void SetLogger(ILoggerFactory loggerFactory);   
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MessageApi : IMessageApi
    {
        /// <summary>
        /// Set the logger to this service
        /// </summary>
        /// <param name="loggerFactory">The logger factory</param>
        public void SetLogger(ILoggerFactory loggerFactory)
        {
            this.Client.SetLogger(loggerFactory);
            this.AsynchronousClient.SetLogger(loggerFactory);
        }

        private GDWInnovations.TagorClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MessageApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MessageApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessageApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MessageApi(string basePath)
        {
            this.Configuration = GDWInnovations.TagorClient.Client.Configuration.MergeConfigurations(
                GDWInnovations.TagorClient.Client.GlobalConfiguration.Instance,
                new GDWInnovations.TagorClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new GDWInnovations.TagorClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GDWInnovations.TagorClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = GDWInnovations.TagorClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessageApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MessageApi(GDWInnovations.TagorClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = GDWInnovations.TagorClient.Client.Configuration.MergeConfigurations(
                GDWInnovations.TagorClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new GDWInnovations.TagorClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GDWInnovations.TagorClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = GDWInnovations.TagorClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessageApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MessageApi(GDWInnovations.TagorClient.Client.ISynchronousClient client, GDWInnovations.TagorClient.Client.IAsynchronousClient asyncClient, GDWInnovations.TagorClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = GDWInnovations.TagorClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public GDWInnovations.TagorClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public GDWInnovations.TagorClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public GDWInnovations.TagorClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public GDWInnovations.TagorClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Message/Add &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element. Pass a message in &#x60;dsTBERICHTWeb&#x60;. Optional attachments can be passed in &#x60;dsAttachmentWeb&#x60;.  _&#x60;Param 436&#x60; will be used to determine the message&#39;s disgroep. Defaults to &#x60;7006&#x60;_
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageAddRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MessageAdd200Response</returns>
        public MessageAdd200Response MessageAdd(MessageAddRequest? messageAddRequest = default(MessageAddRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<MessageAdd200Response> localVarResponse = MessageAddWithHttpInfo(messageAddRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Message/Add &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element. Pass a message in &#x60;dsTBERICHTWeb&#x60;. Optional attachments can be passed in &#x60;dsAttachmentWeb&#x60;.  _&#x60;Param 436&#x60; will be used to determine the message&#39;s disgroep. Defaults to &#x60;7006&#x60;_
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageAddRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MessageAdd200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<MessageAdd200Response> MessageAddWithHttpInfo(MessageAddRequest? messageAddRequest = default(MessageAddRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = messageAddRequest;

            localVarRequestOptions.Operation = "MessageApi.MessageAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MessageAdd200Response>("/Message/Add", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MessageAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Message/Add &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element. Pass a message in &#x60;dsTBERICHTWeb&#x60;. Optional attachments can be passed in &#x60;dsAttachmentWeb&#x60;.  _&#x60;Param 436&#x60; will be used to determine the message&#39;s disgroep. Defaults to &#x60;7006&#x60;_
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageAddRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MessageAdd200Response</returns>
        public async System.Threading.Tasks.Task<MessageAdd200Response> MessageAddAsync(MessageAddRequest? messageAddRequest = default(MessageAddRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<MessageAdd200Response> localVarResponse = await MessageAddWithHttpInfoAsync(messageAddRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Message/Add &#x60;ttWebContext&#x60; requires a &#x60;TDOS_Id&#x60; element. Pass a message in &#x60;dsTBERICHTWeb&#x60;. Optional attachments can be passed in &#x60;dsAttachmentWeb&#x60;.  _&#x60;Param 436&#x60; will be used to determine the message&#39;s disgroep. Defaults to &#x60;7006&#x60;_
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageAddRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MessageAdd200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<MessageAdd200Response>> MessageAddWithHttpInfoAsync(MessageAddRequest? messageAddRequest = default(MessageAddRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = messageAddRequest;

            localVarRequestOptions.Operation = "MessageApi.MessageAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<MessageAdd200Response>("/Message/Add", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MessageAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Message/GetListFilter Same endpoint as [&#x60;Message/GetList&#x60;](#operation/MessageGetList). See this endpoint for the possible values in &#x60;dsWebContext&#x60;. This endpoint also accepts a &#x60;dsFilter&#x60; object that works the same as [&#x60;Dossier/Search&#x60;](#operation/DossierSearch).
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierSearchRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MessageAdd200Response</returns>
        public MessageAdd200Response MessageGetListFilter(DossierSearchRequest? dossierSearchRequest = default(DossierSearchRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<MessageAdd200Response> localVarResponse = MessageGetListFilterWithHttpInfo(dossierSearchRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Message/GetListFilter Same endpoint as [&#x60;Message/GetList&#x60;](#operation/MessageGetList). See this endpoint for the possible values in &#x60;dsWebContext&#x60;. This endpoint also accepts a &#x60;dsFilter&#x60; object that works the same as [&#x60;Dossier/Search&#x60;](#operation/DossierSearch).
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierSearchRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MessageAdd200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<MessageAdd200Response> MessageGetListFilterWithHttpInfo(DossierSearchRequest? dossierSearchRequest = default(DossierSearchRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = dossierSearchRequest;

            localVarRequestOptions.Operation = "MessageApi.MessageGetListFilter";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MessageAdd200Response>("/Message/GetListFilter", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MessageGetListFilter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Message/GetListFilter Same endpoint as [&#x60;Message/GetList&#x60;](#operation/MessageGetList). See this endpoint for the possible values in &#x60;dsWebContext&#x60;. This endpoint also accepts a &#x60;dsFilter&#x60; object that works the same as [&#x60;Dossier/Search&#x60;](#operation/DossierSearch).
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierSearchRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MessageAdd200Response</returns>
        public async System.Threading.Tasks.Task<MessageAdd200Response> MessageGetListFilterAsync(DossierSearchRequest? dossierSearchRequest = default(DossierSearchRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<MessageAdd200Response> localVarResponse = await MessageGetListFilterWithHttpInfoAsync(dossierSearchRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Message/GetListFilter Same endpoint as [&#x60;Message/GetList&#x60;](#operation/MessageGetList). See this endpoint for the possible values in &#x60;dsWebContext&#x60;. This endpoint also accepts a &#x60;dsFilter&#x60; object that works the same as [&#x60;Dossier/Search&#x60;](#operation/DossierSearch).
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dossierSearchRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MessageAdd200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<MessageAdd200Response>> MessageGetListFilterWithHttpInfoAsync(DossierSearchRequest? dossierSearchRequest = default(DossierSearchRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = dossierSearchRequest;

            localVarRequestOptions.Operation = "MessageApi.MessageGetListFilter";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<MessageAdd200Response>("/Message/GetListFilter", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MessageGetListFilter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Message/GetLog 
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MessageAdd200Response</returns>
        public MessageAdd200Response MessageGetLog(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<MessageAdd200Response> localVarResponse = MessageGetLogWithHttpInfo(codeGetListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Message/GetLog 
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MessageAdd200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<MessageAdd200Response> MessageGetLogWithHttpInfo(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = codeGetListRequest;

            localVarRequestOptions.Operation = "MessageApi.MessageGetLog";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MessageAdd200Response>("/Message/GetLog", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MessageGetLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Message/GetLog 
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MessageAdd200Response</returns>
        public async System.Threading.Tasks.Task<MessageAdd200Response> MessageGetLogAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<MessageAdd200Response> localVarResponse = await MessageGetLogWithHttpInfoAsync(codeGetListRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Message/GetLog 
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MessageAdd200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<MessageAdd200Response>> MessageGetLogWithHttpInfoAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = codeGetListRequest;

            localVarRequestOptions.Operation = "MessageApi.MessageGetLog";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<MessageAdd200Response>("/Message/GetLog", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MessageGetLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Message/GetMessage Gets a single message based on id. &#x60;ttWebContext&#x60; requires a &#x60;TBERICHT_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageGetMessageRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MessageGetMessage200Response</returns>
        public MessageGetMessage200Response MessageGetMessage(MessageGetMessageRequest? messageGetMessageRequest = default(MessageGetMessageRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<MessageGetMessage200Response> localVarResponse = MessageGetMessageWithHttpInfo(messageGetMessageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Message/GetMessage Gets a single message based on id. &#x60;ttWebContext&#x60; requires a &#x60;TBERICHT_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageGetMessageRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MessageGetMessage200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<MessageGetMessage200Response> MessageGetMessageWithHttpInfo(MessageGetMessageRequest? messageGetMessageRequest = default(MessageGetMessageRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = messageGetMessageRequest;

            localVarRequestOptions.Operation = "MessageApi.MessageGetMessage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MessageGetMessage200Response>("/Message/GetMessage", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MessageGetMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Message/GetMessage Gets a single message based on id. &#x60;ttWebContext&#x60; requires a &#x60;TBERICHT_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageGetMessageRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MessageGetMessage200Response</returns>
        public async System.Threading.Tasks.Task<MessageGetMessage200Response> MessageGetMessageAsync(MessageGetMessageRequest? messageGetMessageRequest = default(MessageGetMessageRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<MessageGetMessage200Response> localVarResponse = await MessageGetMessageWithHttpInfoAsync(messageGetMessageRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Message/GetMessage Gets a single message based on id. &#x60;ttWebContext&#x60; requires a &#x60;TBERICHT_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageGetMessageRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MessageGetMessage200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<MessageGetMessage200Response>> MessageGetMessageWithHttpInfoAsync(MessageGetMessageRequest? messageGetMessageRequest = default(MessageGetMessageRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = messageGetMessageRequest;

            localVarRequestOptions.Operation = "MessageApi.MessageGetMessage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<MessageGetMessage200Response>("/Message/GetMessage", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MessageGetMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Message/GetSenderReceiverList When this endpoint is called without any &#x60;ttWebContext&#x60; records it will return all groups a user belongs to. Other options are optional: - &#x60;Type&#x60; (enum &#x60;senders&#x60; or &#x60;receivers&#x60;): when &#x60;senders&#x60; is passed &#x60;TPAR_Id&#x60; is required. - &#x60;TDOS_Id&#x60;: active file you want to send a message on. This is required to get the groups of the user. Otherwise only the active user will be returned (if this user is allowed to send messages). - &#x60;TPAR_Id&#x60;: Id of the party you want to send messages to/from.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConfigInfo200Response</returns>
        public ConfigInfo200Response MessageGetSenderReceiverList(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<ConfigInfo200Response> localVarResponse = MessageGetSenderReceiverListWithHttpInfo(codeGetListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Message/GetSenderReceiverList When this endpoint is called without any &#x60;ttWebContext&#x60; records it will return all groups a user belongs to. Other options are optional: - &#x60;Type&#x60; (enum &#x60;senders&#x60; or &#x60;receivers&#x60;): when &#x60;senders&#x60; is passed &#x60;TPAR_Id&#x60; is required. - &#x60;TDOS_Id&#x60;: active file you want to send a message on. This is required to get the groups of the user. Otherwise only the active user will be returned (if this user is allowed to send messages). - &#x60;TPAR_Id&#x60;: Id of the party you want to send messages to/from.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConfigInfo200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<ConfigInfo200Response> MessageGetSenderReceiverListWithHttpInfo(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = codeGetListRequest;

            localVarRequestOptions.Operation = "MessageApi.MessageGetSenderReceiverList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ConfigInfo200Response>("/Message/GetSenderReceiverList", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MessageGetSenderReceiverList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Message/GetSenderReceiverList When this endpoint is called without any &#x60;ttWebContext&#x60; records it will return all groups a user belongs to. Other options are optional: - &#x60;Type&#x60; (enum &#x60;senders&#x60; or &#x60;receivers&#x60;): when &#x60;senders&#x60; is passed &#x60;TPAR_Id&#x60; is required. - &#x60;TDOS_Id&#x60;: active file you want to send a message on. This is required to get the groups of the user. Otherwise only the active user will be returned (if this user is allowed to send messages). - &#x60;TPAR_Id&#x60;: Id of the party you want to send messages to/from.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfigInfo200Response</returns>
        public async System.Threading.Tasks.Task<ConfigInfo200Response> MessageGetSenderReceiverListAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<ConfigInfo200Response> localVarResponse = await MessageGetSenderReceiverListWithHttpInfoAsync(codeGetListRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Message/GetSenderReceiverList When this endpoint is called without any &#x60;ttWebContext&#x60; records it will return all groups a user belongs to. Other options are optional: - &#x60;Type&#x60; (enum &#x60;senders&#x60; or &#x60;receivers&#x60;): when &#x60;senders&#x60; is passed &#x60;TPAR_Id&#x60; is required. - &#x60;TDOS_Id&#x60;: active file you want to send a message on. This is required to get the groups of the user. Otherwise only the active user will be returned (if this user is allowed to send messages). - &#x60;TPAR_Id&#x60;: Id of the party you want to send messages to/from.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfigInfo200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<ConfigInfo200Response>> MessageGetSenderReceiverListWithHttpInfoAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = codeGetListRequest;

            localVarRequestOptions.Operation = "MessageApi.MessageGetSenderReceiverList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ConfigInfo200Response>("/Message/GetSenderReceiverList", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MessageGetSenderReceiverList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Message/ToggleRead Toggles the status of a message. &#x60;ttWebContext&#x60; requires a &#x60;TBERICHT_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MessageGetMessage200Response</returns>
        public MessageGetMessage200Response MessageToggleRead(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<MessageGetMessage200Response> localVarResponse = MessageToggleReadWithHttpInfo(codeGetListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Message/ToggleRead Toggles the status of a message. &#x60;ttWebContext&#x60; requires a &#x60;TBERICHT_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MessageGetMessage200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<MessageGetMessage200Response> MessageToggleReadWithHttpInfo(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = codeGetListRequest;

            localVarRequestOptions.Operation = "MessageApi.MessageToggleRead";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MessageGetMessage200Response>("/Message/ToggleRead", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MessageToggleRead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Message/ToggleRead Toggles the status of a message. &#x60;ttWebContext&#x60; requires a &#x60;TBERICHT_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MessageGetMessage200Response</returns>
        public async System.Threading.Tasks.Task<MessageGetMessage200Response> MessageToggleReadAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<MessageGetMessage200Response> localVarResponse = await MessageToggleReadWithHttpInfoAsync(codeGetListRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Message/ToggleRead Toggles the status of a message. &#x60;ttWebContext&#x60; requires a &#x60;TBERICHT_Id&#x60; element.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MessageGetMessage200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<MessageGetMessage200Response>> MessageToggleReadWithHttpInfoAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = codeGetListRequest;

            localVarRequestOptions.Operation = "MessageApi.MessageToggleRead";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<MessageGetMessage200Response>("/Message/ToggleRead", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MessageToggleRead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}