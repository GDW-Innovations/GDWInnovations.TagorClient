/*
 * Tagor API
 *
 * Release date: 29/09/2022  ## REQUIREMENTS This version __requires__ Tagor >= 2.00.0000B0. Use [`Config/Info`](#operation/ConfigInfo) to get the active API version.  ## CHANGELOG - New [`Dossier/CreateAgenda`](#operation/DossierCreateAgenda) endpoint. - New return values in GetAgenda 'TJOB_Id, TJOBM_Id, TUSER_Id, Manueel and IsGeblokkeerd' - In CreateLine you can now add if the line is fixed with 'IsFixed' - In CreateLine you can now add a subarray with the intrests  ## INFO - Using the download button at the top you can import this collection of endpoints in **Postman** - In general all TQ(...)_Id fields are default fields which you can translate with the [`Code/GetDescription`](#operation/CodeGetDescription) endpoint. If you need an id to post to one of the endpoints you can use the [`Code/GetList`](#operation/CodeGetList) endpoint to get all possible values or [`Code/GetDescription`](#operation/CodeGetDescription) to get a value by code. These id's will be marked as `code id` in the documentation. - We chose to return all ids as string because these are 64bit integers which are too big for javascript to handle. - All italic text below the endpoint description is meant for people with access to Tagor. - The user needs an email address configured in Tagor for the services to work properly. - Pass the `Accept` header with `application/json` as value to have the server return errors in json format. - Most endpoints can be batched/paged by passing a `BATCH-SIZE` and `BATCH-NUMBER` record in `dsWebContext`.  # AUTHENTICATION Pass your token via an `Authorization` header like this: `Authorization: {bearer_format} {token}`.  ex: `Authorization: TGR IcoQbVw7wE...PPUPda61ET` <!- - ReDoc-Inject: <security-definitions> - ->
 *
 * The version of the OpenAPI document: 2.00.0000B1
 * Contact: info@organi.be
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Microsoft.Extensions.Logging;
using GDWInnovations.TagorClient.Client;
using GDWInnovations.TagorClient.Model;

namespace GDWInnovations.TagorClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITagorServiceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// TagorService/ApprovePaymentPlan
        /// </summary>
        /// <remarks>
        /// Approve the last paymentplan on a file. If the given &#x60;Telnr&#x60; is a belgian mobile number the confirmation will be send as a text to that number. If not a mail will be send to the defendant on the file.  _The formula with code &#x60;BEVAFBET&#x60; will be used as a template to send texts/mails. Be sure this record exists._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceApprovePaymentPlanRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagorServiceApprovePaymentPlan200Response</returns>
        TagorServiceApprovePaymentPlan200Response TagorServiceApprovePaymentPlan(TagorServiceApprovePaymentPlanRequest? tagorServiceApprovePaymentPlanRequest = default(TagorServiceApprovePaymentPlanRequest?), int operationIndex = 0);

        /// <summary>
        /// TagorService/ApprovePaymentPlan
        /// </summary>
        /// <remarks>
        /// Approve the last paymentplan on a file. If the given &#x60;Telnr&#x60; is a belgian mobile number the confirmation will be send as a text to that number. If not a mail will be send to the defendant on the file.  _The formula with code &#x60;BEVAFBET&#x60; will be used as a template to send texts/mails. Be sure this record exists._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceApprovePaymentPlanRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagorServiceApprovePaymentPlan200Response</returns>
        ApiResponse<TagorServiceApprovePaymentPlan200Response> TagorServiceApprovePaymentPlanWithHttpInfo(TagorServiceApprovePaymentPlanRequest? tagorServiceApprovePaymentPlanRequest = default(TagorServiceApprovePaymentPlanRequest?), int operationIndex = 0);
        /// <summary>
        /// TagorService/ClipToFile
        /// </summary>
        /// <remarks>
        /// Search for a phone number. This endpoint will return only the first matching party and its corresponding files.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceClipToFileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagorServiceClipToFile200Response</returns>
        TagorServiceClipToFile200Response TagorServiceClipToFile(TagorServiceClipToFileRequest? tagorServiceClipToFileRequest = default(TagorServiceClipToFileRequest?), int operationIndex = 0);

        /// <summary>
        /// TagorService/ClipToFile
        /// </summary>
        /// <remarks>
        /// Search for a phone number. This endpoint will return only the first matching party and its corresponding files.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceClipToFileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagorServiceClipToFile200Response</returns>
        ApiResponse<TagorServiceClipToFile200Response> TagorServiceClipToFileWithHttpInfo(TagorServiceClipToFileRequest? tagorServiceClipToFileRequest = default(TagorServiceClipToFileRequest?), int operationIndex = 0);
        /// <summary>
        /// TagorService/FileToHash
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceFileToHashRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ActionsSendMail200Response</returns>
        ActionsSendMail200Response TagorServiceFileToHash(TagorServiceFileToHashRequest? tagorServiceFileToHashRequest = default(TagorServiceFileToHashRequest?), int operationIndex = 0);

        /// <summary>
        /// TagorService/FileToHash
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceFileToHashRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ActionsSendMail200Response</returns>
        ApiResponse<ActionsSendMail200Response> TagorServiceFileToHashWithHttpInfo(TagorServiceFileToHashRequest? tagorServiceFileToHashRequest = default(TagorServiceFileToHashRequest?), int operationIndex = 0);
        /// <summary>
        /// TagorService/GetDosInfo
        /// </summary>
        /// <remarks>
        /// Get info about a file.   _&#x60;DossiersoortId&#x60; will be mapped if a mapping with code &#x60;VOXTRON&#x60; is available. Otherwise the id will be prefixed with &#x60;DSO&#x60;. &#x60;DosbehId&#x60; depends on &#x60;parameter 259&#x60;. See the result below for possible values._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetDosInfoRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagorServiceGetDosInfo200Response</returns>
        TagorServiceGetDosInfo200Response TagorServiceGetDosInfo(TagorServiceGetDosInfoRequest? tagorServiceGetDosInfoRequest = default(TagorServiceGetDosInfoRequest?), int operationIndex = 0);

        /// <summary>
        /// TagorService/GetDosInfo
        /// </summary>
        /// <remarks>
        /// Get info about a file.   _&#x60;DossiersoortId&#x60; will be mapped if a mapping with code &#x60;VOXTRON&#x60; is available. Otherwise the id will be prefixed with &#x60;DSO&#x60;. &#x60;DosbehId&#x60; depends on &#x60;parameter 259&#x60;. See the result below for possible values._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetDosInfoRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagorServiceGetDosInfo200Response</returns>
        ApiResponse<TagorServiceGetDosInfo200Response> TagorServiceGetDosInfoWithHttpInfo(TagorServiceGetDosInfoRequest? tagorServiceGetDosInfoRequest = default(TagorServiceGetDosInfoRequest?), int operationIndex = 0);
        /// <summary>
        /// TagorService/GetPaymentPlanCriteria
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetPaymentPlanCriteriaRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagorServiceGetPaymentPlanCriteria200Response</returns>
        TagorServiceGetPaymentPlanCriteria200Response TagorServiceGetPaymentPlanCriteria(TagorServiceGetPaymentPlanCriteriaRequest? tagorServiceGetPaymentPlanCriteriaRequest = default(TagorServiceGetPaymentPlanCriteriaRequest?), int operationIndex = 0);

        /// <summary>
        /// TagorService/GetPaymentPlanCriteria
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetPaymentPlanCriteriaRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagorServiceGetPaymentPlanCriteria200Response</returns>
        ApiResponse<TagorServiceGetPaymentPlanCriteria200Response> TagorServiceGetPaymentPlanCriteriaWithHttpInfo(TagorServiceGetPaymentPlanCriteriaRequest? tagorServiceGetPaymentPlanCriteriaRequest = default(TagorServiceGetPaymentPlanCriteriaRequest?), int operationIndex = 0);
        /// <summary>
        /// TagorService/GetSaldo
        /// </summary>
        /// <remarks>
        /// Get the defendants balance on a file. This endpoint will create an info record (type &#x60;OPSV&#x60;) on the file indicating the balance was requested unless.   _The auto created info records can be disabled with &#x60;parameter 568&#x60;. This endpoint returns the balance with code &#x60;VRW&#x60; which is the defendants balance on the file._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetSaldoRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagorServiceGetSaldo200Response</returns>
        TagorServiceGetSaldo200Response TagorServiceGetSaldo(TagorServiceGetSaldoRequest? tagorServiceGetSaldoRequest = default(TagorServiceGetSaldoRequest?), int operationIndex = 0);

        /// <summary>
        /// TagorService/GetSaldo
        /// </summary>
        /// <remarks>
        /// Get the defendants balance on a file. This endpoint will create an info record (type &#x60;OPSV&#x60;) on the file indicating the balance was requested unless.   _The auto created info records can be disabled with &#x60;parameter 568&#x60;. This endpoint returns the balance with code &#x60;VRW&#x60; which is the defendants balance on the file._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetSaldoRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagorServiceGetSaldo200Response</returns>
        ApiResponse<TagorServiceGetSaldo200Response> TagorServiceGetSaldoWithHttpInfo(TagorServiceGetSaldoRequest? tagorServiceGetSaldoRequest = default(TagorServiceGetSaldoRequest?), int operationIndex = 0);
        /// <summary>
        /// TagorService/GetVoxtronReferentie
        /// </summary>
        /// <remarks>
        /// &#x60;DossiersoortId&#x60; and &#x60;DosStatus&#x60; will be mapped if a mapping with code &#x60;VOXTRON&#x60; is available. Otherwise the id will be prefixed with &#x60;DSO&#x60;.&#x60;Parameter 303&#x60; effects the way the &#x60;Referentie&#x60; field is used to search for a file. &#x60;DosbehId&#x60; depends on &#x60;parameter 259&#x60;. See the result below for possible values. &#x60;Parameter 233&#x60; decides whether the file status or file stage status is returned in the &#x60;DosStatus&#x60; field.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetVoxtronReferentieRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagorServiceGetVoxtronReferentie200Response</returns>
        TagorServiceGetVoxtronReferentie200Response TagorServiceGetVoxtronReferentie(TagorServiceGetVoxtronReferentieRequest? tagorServiceGetVoxtronReferentieRequest = default(TagorServiceGetVoxtronReferentieRequest?), int operationIndex = 0);

        /// <summary>
        /// TagorService/GetVoxtronReferentie
        /// </summary>
        /// <remarks>
        /// &#x60;DossiersoortId&#x60; and &#x60;DosStatus&#x60; will be mapped if a mapping with code &#x60;VOXTRON&#x60; is available. Otherwise the id will be prefixed with &#x60;DSO&#x60;.&#x60;Parameter 303&#x60; effects the way the &#x60;Referentie&#x60; field is used to search for a file. &#x60;DosbehId&#x60; depends on &#x60;parameter 259&#x60;. See the result below for possible values. &#x60;Parameter 233&#x60; decides whether the file status or file stage status is returned in the &#x60;DosStatus&#x60; field.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetVoxtronReferentieRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagorServiceGetVoxtronReferentie200Response</returns>
        ApiResponse<TagorServiceGetVoxtronReferentie200Response> TagorServiceGetVoxtronReferentieWithHttpInfo(TagorServiceGetVoxtronReferentieRequest? tagorServiceGetVoxtronReferentieRequest = default(TagorServiceGetVoxtronReferentieRequest?), int operationIndex = 0);
        /// <summary>
        /// TagorService/GetVoxtronVerwByHuisNr
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetVoxtronVerwByHuisNrRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagorServiceGetVoxtronVerwByHuisNr200Response</returns>
        TagorServiceGetVoxtronVerwByHuisNr200Response TagorServiceGetVoxtronVerwByHuisNr(TagorServiceGetVoxtronVerwByHuisNrRequest? tagorServiceGetVoxtronVerwByHuisNrRequest = default(TagorServiceGetVoxtronVerwByHuisNrRequest?), int operationIndex = 0);

        /// <summary>
        /// TagorService/GetVoxtronVerwByHuisNr
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetVoxtronVerwByHuisNrRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagorServiceGetVoxtronVerwByHuisNr200Response</returns>
        ApiResponse<TagorServiceGetVoxtronVerwByHuisNr200Response> TagorServiceGetVoxtronVerwByHuisNrWithHttpInfo(TagorServiceGetVoxtronVerwByHuisNrRequest? tagorServiceGetVoxtronVerwByHuisNrRequest = default(TagorServiceGetVoxtronVerwByHuisNrRequest?), int operationIndex = 0);
        /// <summary>
        /// TagorService/GetVoxtronVerwByPin
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetVoxtronVerwByPinRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ActionsSendMail200Response</returns>
        ActionsSendMail200Response TagorServiceGetVoxtronVerwByPin(TagorServiceGetVoxtronVerwByPinRequest? tagorServiceGetVoxtronVerwByPinRequest = default(TagorServiceGetVoxtronVerwByPinRequest?), int operationIndex = 0);

        /// <summary>
        /// TagorService/GetVoxtronVerwByPin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetVoxtronVerwByPinRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ActionsSendMail200Response</returns>
        ApiResponse<ActionsSendMail200Response> TagorServiceGetVoxtronVerwByPinWithHttpInfo(TagorServiceGetVoxtronVerwByPinRequest? tagorServiceGetVoxtronVerwByPinRequest = default(TagorServiceGetVoxtronVerwByPinRequest?), int operationIndex = 0);
        /// <summary>
        /// TagorService/HashToFile
        /// </summary>
        /// <remarks>
        /// Get the corresponding file for a file-hash.   _The tokens validity period is configurable in &#x60;parameter 502&#x60;_
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceHashToFileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagorServiceHashToFile200Response</returns>
        TagorServiceHashToFile200Response TagorServiceHashToFile(TagorServiceHashToFileRequest? tagorServiceHashToFileRequest = default(TagorServiceHashToFileRequest?), int operationIndex = 0);

        /// <summary>
        /// TagorService/HashToFile
        /// </summary>
        /// <remarks>
        /// Get the corresponding file for a file-hash.   _The tokens validity period is configurable in &#x60;parameter 502&#x60;_
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceHashToFileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagorServiceHashToFile200Response</returns>
        ApiResponse<TagorServiceHashToFile200Response> TagorServiceHashToFileWithHttpInfo(TagorServiceHashToFileRequest? tagorServiceHashToFileRequest = default(TagorServiceHashToFileRequest?), int operationIndex = 0);
        /// <summary>
        /// TagorService/KantoorOpen
        /// </summary>
        /// <remarks>
        /// Checks if an employe is available based on file type.   _Opening hours can be entered via the configuration menu in Tagor._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceKantoorOpenRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagorServiceKantoorOpen200Response</returns>
        TagorServiceKantoorOpen200Response TagorServiceKantoorOpen(TagorServiceKantoorOpenRequest? tagorServiceKantoorOpenRequest = default(TagorServiceKantoorOpenRequest?), int operationIndex = 0);

        /// <summary>
        /// TagorService/KantoorOpen
        /// </summary>
        /// <remarks>
        /// Checks if an employe is available based on file type.   _Opening hours can be entered via the configuration menu in Tagor._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceKantoorOpenRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagorServiceKantoorOpen200Response</returns>
        ApiResponse<TagorServiceKantoorOpen200Response> TagorServiceKantoorOpenWithHttpInfo(TagorServiceKantoorOpenRequest? tagorServiceKantoorOpenRequest = default(TagorServiceKantoorOpenRequest?), int operationIndex = 0);
        /// <summary>
        /// TagorService/OnlinePaymentReceived
        /// </summary>
        /// <remarks>
        /// Creates an informative payment record on a file.   _The line&#39;s nature has to be configured in Tagor&#39;s office managment tool._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceOnlinePaymentReceivedRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ActionsSendMail200Response</returns>
        ActionsSendMail200Response TagorServiceOnlinePaymentReceived(TagorServiceOnlinePaymentReceivedRequest? tagorServiceOnlinePaymentReceivedRequest = default(TagorServiceOnlinePaymentReceivedRequest?), int operationIndex = 0);

        /// <summary>
        /// TagorService/OnlinePaymentReceived
        /// </summary>
        /// <remarks>
        /// Creates an informative payment record on a file.   _The line&#39;s nature has to be configured in Tagor&#39;s office managment tool._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceOnlinePaymentReceivedRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ActionsSendMail200Response</returns>
        ApiResponse<ActionsSendMail200Response> TagorServiceOnlinePaymentReceivedWithHttpInfo(TagorServiceOnlinePaymentReceivedRequest? tagorServiceOnlinePaymentReceivedRequest = default(TagorServiceOnlinePaymentReceivedRequest?), int operationIndex = 0);
        /// <summary>
        /// TagorService/PaymentDetails
        /// </summary>
        /// <remarks>
        /// Endpoint to get a detailed overview of the file.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagorServicePaymentDetails200Response</returns>
        TagorServicePaymentDetails200Response TagorServicePaymentDetails(int operationIndex = 0);

        /// <summary>
        /// TagorService/PaymentDetails
        /// </summary>
        /// <remarks>
        /// Endpoint to get a detailed overview of the file.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagorServicePaymentDetails200Response</returns>
        ApiResponse<TagorServicePaymentDetails200Response> TagorServicePaymentDetailsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// TagorService/PaymentInfo
        /// </summary>
        /// <remarks>
        /// Get info about ongoing payment plans on a file.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServicePaymentInfoRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagorServicePaymentInfo200Response</returns>
        TagorServicePaymentInfo200Response TagorServicePaymentInfo(TagorServicePaymentInfoRequest? tagorServicePaymentInfoRequest = default(TagorServicePaymentInfoRequest?), int operationIndex = 0);

        /// <summary>
        /// TagorService/PaymentInfo
        /// </summary>
        /// <remarks>
        /// Get info about ongoing payment plans on a file.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServicePaymentInfoRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagorServicePaymentInfo200Response</returns>
        ApiResponse<TagorServicePaymentInfo200Response> TagorServicePaymentInfoWithHttpInfo(TagorServicePaymentInfoRequest? tagorServicePaymentInfoRequest = default(TagorServicePaymentInfoRequest?), int operationIndex = 0);
        /// <summary>
        /// TagorService/PinToFile
        /// </summary>
        /// <remarks>
        /// Get the file id from a filename/pin combination. The value used in combination with the pin doesn&#39;t have to be a file name. This is configurable in Tagor.   _The value used in combination with the pincode is set in &#x60;parameter 590&#x60;. Pincodes are generated with mergefield &#x60;M_0077&#x60;._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServicePinToFileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagorServicePinToFile200Response</returns>
        TagorServicePinToFile200Response TagorServicePinToFile(TagorServicePinToFileRequest? tagorServicePinToFileRequest = default(TagorServicePinToFileRequest?), int operationIndex = 0);

        /// <summary>
        /// TagorService/PinToFile
        /// </summary>
        /// <remarks>
        /// Get the file id from a filename/pin combination. The value used in combination with the pin doesn&#39;t have to be a file name. This is configurable in Tagor.   _The value used in combination with the pincode is set in &#x60;parameter 590&#x60;. Pincodes are generated with mergefield &#x60;M_0077&#x60;._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServicePinToFileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagorServicePinToFile200Response</returns>
        ApiResponse<TagorServicePinToFile200Response> TagorServicePinToFileWithHttpInfo(TagorServicePinToFileRequest? tagorServicePinToFileRequest = default(TagorServicePinToFileRequest?), int operationIndex = 0);
        /// <summary>
        /// TagorService/SavePaymentPlan
        /// </summary>
        /// <remarks>
        /// Add a payment plan to a file. This will always create a new payment plan and put all existing payment plans inactive. The input data is validated. Periodes has to be less than configured on the file type. An info records will be generated to indicate a new payment plan was requested.   _Payment plans can be auto accepted with &#x60;parameter 358&#x60;. The auto created info records can be disabled with &#x60;parameter 568. The default date can be configured in the file type config and in the office managment. &#x60;_
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceSavePaymentPlanRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagorServiceSavePaymentPlan200Response</returns>
        TagorServiceSavePaymentPlan200Response TagorServiceSavePaymentPlan(TagorServiceSavePaymentPlanRequest? tagorServiceSavePaymentPlanRequest = default(TagorServiceSavePaymentPlanRequest?), int operationIndex = 0);

        /// <summary>
        /// TagorService/SavePaymentPlan
        /// </summary>
        /// <remarks>
        /// Add a payment plan to a file. This will always create a new payment plan and put all existing payment plans inactive. The input data is validated. Periodes has to be less than configured on the file type. An info records will be generated to indicate a new payment plan was requested.   _Payment plans can be auto accepted with &#x60;parameter 358&#x60;. The auto created info records can be disabled with &#x60;parameter 568. The default date can be configured in the file type config and in the office managment. &#x60;_
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceSavePaymentPlanRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagorServiceSavePaymentPlan200Response</returns>
        ApiResponse<TagorServiceSavePaymentPlan200Response> TagorServiceSavePaymentPlanWithHttpInfo(TagorServiceSavePaymentPlanRequest? tagorServiceSavePaymentPlanRequest = default(TagorServiceSavePaymentPlanRequest?), int operationIndex = 0);
        /// <summary>
        /// TagorService/ScanBarcode
        /// </summary>
        /// <remarks>
        /// Get the file/financial line connected to a barcode.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceScanBarcodeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagorServiceScanBarcode200Response</returns>
        TagorServiceScanBarcode200Response TagorServiceScanBarcode(TagorServiceScanBarcodeRequest? tagorServiceScanBarcodeRequest = default(TagorServiceScanBarcodeRequest?), int operationIndex = 0);

        /// <summary>
        /// TagorService/ScanBarcode
        /// </summary>
        /// <remarks>
        /// Get the file/financial line connected to a barcode.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceScanBarcodeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagorServiceScanBarcode200Response</returns>
        ApiResponse<TagorServiceScanBarcode200Response> TagorServiceScanBarcodeWithHttpInfo(TagorServiceScanBarcodeRequest? tagorServiceScanBarcodeRequest = default(TagorServiceScanBarcodeRequest?), int operationIndex = 0);
        /// <summary>
        /// TagorService/SelfServiceAllowed
        /// </summary>
        /// <remarks>
        /// Checks whether a user is allowed to request his/her file.   _Configuration should be done in Tagor&#39;s office management tool._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceSelfServiceAllowedRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ActionsSendMail200Response</returns>
        ActionsSendMail200Response TagorServiceSelfServiceAllowed(TagorServiceSelfServiceAllowedRequest? tagorServiceSelfServiceAllowedRequest = default(TagorServiceSelfServiceAllowedRequest?), int operationIndex = 0);

        /// <summary>
        /// TagorService/SelfServiceAllowed
        /// </summary>
        /// <remarks>
        /// Checks whether a user is allowed to request his/her file.   _Configuration should be done in Tagor&#39;s office management tool._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceSelfServiceAllowedRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ActionsSendMail200Response</returns>
        ApiResponse<ActionsSendMail200Response> TagorServiceSelfServiceAllowedWithHttpInfo(TagorServiceSelfServiceAllowedRequest? tagorServiceSelfServiceAllowedRequest = default(TagorServiceSelfServiceAllowedRequest?), int operationIndex = 0);
        /// <summary>
        /// TagorService/SendMail
        /// </summary>
        /// <remarks>
        /// Deprecated in favor of [&#x60;Actions/SendMail&#x60;](#operation/sendMail). **Will be removed in 1.08.3000B0**.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceSendMailRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ActionsSendMail200Response</returns>
        [Obsolete]
        ActionsSendMail200Response TagorServiceSendMail(TagorServiceSendMailRequest? tagorServiceSendMailRequest = default(TagorServiceSendMailRequest?), int operationIndex = 0);

        /// <summary>
        /// TagorService/SendMail
        /// </summary>
        /// <remarks>
        /// Deprecated in favor of [&#x60;Actions/SendMail&#x60;](#operation/sendMail). **Will be removed in 1.08.3000B0**.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceSendMailRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ActionsSendMail200Response</returns>
        [Obsolete]
        ApiResponse<ActionsSendMail200Response> TagorServiceSendMailWithHttpInfo(TagorServiceSendMailRequest? tagorServiceSendMailRequest = default(TagorServiceSendMailRequest?), int operationIndex = 0);
        /// <summary>
        /// TagorService/SendSms
        /// </summary>
        /// <remarks>
        /// Deprecated in favor of [&#x60;Actions/SendSms&#x60;](#operation/sendSms). **Will be removed in 1.08.3000B0**.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceSendSmsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ActionsSendMail200Response</returns>
        [Obsolete]
        ActionsSendMail200Response TagorServiceSendSms(TagorServiceSendSmsRequest? tagorServiceSendSmsRequest = default(TagorServiceSendSmsRequest?), int operationIndex = 0);

        /// <summary>
        /// TagorService/SendSms
        /// </summary>
        /// <remarks>
        /// Deprecated in favor of [&#x60;Actions/SendSms&#x60;](#operation/sendSms). **Will be removed in 1.08.3000B0**.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceSendSmsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ActionsSendMail200Response</returns>
        [Obsolete]
        ApiResponse<ActionsSendMail200Response> TagorServiceSendSmsWithHttpInfo(TagorServiceSendSmsRequest? tagorServiceSendSmsRequest = default(TagorServiceSendSmsRequest?), int operationIndex = 0);
        /// <summary>
        /// TagorService/SetUserDossier
        /// </summary>
        /// <remarks>
        /// Adds shortcut to a specific file for a specific user in Tagor.   _Default info type can be changed in the &#x60;CURCALL&#x60; mapping._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceSetUserDossierRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ActionsSendMail200Response</returns>
        ActionsSendMail200Response TagorServiceSetUserDossier(TagorServiceSetUserDossierRequest? tagorServiceSetUserDossierRequest = default(TagorServiceSetUserDossierRequest?), int operationIndex = 0);

        /// <summary>
        /// TagorService/SetUserDossier
        /// </summary>
        /// <remarks>
        /// Adds shortcut to a specific file for a specific user in Tagor.   _Default info type can be changed in the &#x60;CURCALL&#x60; mapping._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceSetUserDossierRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ActionsSendMail200Response</returns>
        ApiResponse<ActionsSendMail200Response> TagorServiceSetUserDossierWithHttpInfo(TagorServiceSetUserDossierRequest? tagorServiceSetUserDossierRequest = default(TagorServiceSetUserDossierRequest?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITagorServiceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// TagorService/ApprovePaymentPlan
        /// </summary>
        /// <remarks>
        /// Approve the last paymentplan on a file. If the given &#x60;Telnr&#x60; is a belgian mobile number the confirmation will be send as a text to that number. If not a mail will be send to the defendant on the file.  _The formula with code &#x60;BEVAFBET&#x60; will be used as a template to send texts/mails. Be sure this record exists._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceApprovePaymentPlanRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagorServiceApprovePaymentPlan200Response</returns>
        System.Threading.Tasks.Task<TagorServiceApprovePaymentPlan200Response> TagorServiceApprovePaymentPlanAsync(TagorServiceApprovePaymentPlanRequest? tagorServiceApprovePaymentPlanRequest = default(TagorServiceApprovePaymentPlanRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// TagorService/ApprovePaymentPlan
        /// </summary>
        /// <remarks>
        /// Approve the last paymentplan on a file. If the given &#x60;Telnr&#x60; is a belgian mobile number the confirmation will be send as a text to that number. If not a mail will be send to the defendant on the file.  _The formula with code &#x60;BEVAFBET&#x60; will be used as a template to send texts/mails. Be sure this record exists._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceApprovePaymentPlanRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagorServiceApprovePaymentPlan200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagorServiceApprovePaymentPlan200Response>> TagorServiceApprovePaymentPlanWithHttpInfoAsync(TagorServiceApprovePaymentPlanRequest? tagorServiceApprovePaymentPlanRequest = default(TagorServiceApprovePaymentPlanRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// TagorService/ClipToFile
        /// </summary>
        /// <remarks>
        /// Search for a phone number. This endpoint will return only the first matching party and its corresponding files.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceClipToFileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagorServiceClipToFile200Response</returns>
        System.Threading.Tasks.Task<TagorServiceClipToFile200Response> TagorServiceClipToFileAsync(TagorServiceClipToFileRequest? tagorServiceClipToFileRequest = default(TagorServiceClipToFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// TagorService/ClipToFile
        /// </summary>
        /// <remarks>
        /// Search for a phone number. This endpoint will return only the first matching party and its corresponding files.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceClipToFileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagorServiceClipToFile200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagorServiceClipToFile200Response>> TagorServiceClipToFileWithHttpInfoAsync(TagorServiceClipToFileRequest? tagorServiceClipToFileRequest = default(TagorServiceClipToFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// TagorService/FileToHash
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceFileToHashRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ActionsSendMail200Response</returns>
        System.Threading.Tasks.Task<ActionsSendMail200Response> TagorServiceFileToHashAsync(TagorServiceFileToHashRequest? tagorServiceFileToHashRequest = default(TagorServiceFileToHashRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// TagorService/FileToHash
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceFileToHashRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ActionsSendMail200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActionsSendMail200Response>> TagorServiceFileToHashWithHttpInfoAsync(TagorServiceFileToHashRequest? tagorServiceFileToHashRequest = default(TagorServiceFileToHashRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// TagorService/GetDosInfo
        /// </summary>
        /// <remarks>
        /// Get info about a file.   _&#x60;DossiersoortId&#x60; will be mapped if a mapping with code &#x60;VOXTRON&#x60; is available. Otherwise the id will be prefixed with &#x60;DSO&#x60;. &#x60;DosbehId&#x60; depends on &#x60;parameter 259&#x60;. See the result below for possible values._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetDosInfoRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagorServiceGetDosInfo200Response</returns>
        System.Threading.Tasks.Task<TagorServiceGetDosInfo200Response> TagorServiceGetDosInfoAsync(TagorServiceGetDosInfoRequest? tagorServiceGetDosInfoRequest = default(TagorServiceGetDosInfoRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// TagorService/GetDosInfo
        /// </summary>
        /// <remarks>
        /// Get info about a file.   _&#x60;DossiersoortId&#x60; will be mapped if a mapping with code &#x60;VOXTRON&#x60; is available. Otherwise the id will be prefixed with &#x60;DSO&#x60;. &#x60;DosbehId&#x60; depends on &#x60;parameter 259&#x60;. See the result below for possible values._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetDosInfoRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagorServiceGetDosInfo200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagorServiceGetDosInfo200Response>> TagorServiceGetDosInfoWithHttpInfoAsync(TagorServiceGetDosInfoRequest? tagorServiceGetDosInfoRequest = default(TagorServiceGetDosInfoRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// TagorService/GetPaymentPlanCriteria
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetPaymentPlanCriteriaRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagorServiceGetPaymentPlanCriteria200Response</returns>
        System.Threading.Tasks.Task<TagorServiceGetPaymentPlanCriteria200Response> TagorServiceGetPaymentPlanCriteriaAsync(TagorServiceGetPaymentPlanCriteriaRequest? tagorServiceGetPaymentPlanCriteriaRequest = default(TagorServiceGetPaymentPlanCriteriaRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// TagorService/GetPaymentPlanCriteria
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetPaymentPlanCriteriaRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagorServiceGetPaymentPlanCriteria200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagorServiceGetPaymentPlanCriteria200Response>> TagorServiceGetPaymentPlanCriteriaWithHttpInfoAsync(TagorServiceGetPaymentPlanCriteriaRequest? tagorServiceGetPaymentPlanCriteriaRequest = default(TagorServiceGetPaymentPlanCriteriaRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// TagorService/GetSaldo
        /// </summary>
        /// <remarks>
        /// Get the defendants balance on a file. This endpoint will create an info record (type &#x60;OPSV&#x60;) on the file indicating the balance was requested unless.   _The auto created info records can be disabled with &#x60;parameter 568&#x60;. This endpoint returns the balance with code &#x60;VRW&#x60; which is the defendants balance on the file._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetSaldoRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagorServiceGetSaldo200Response</returns>
        System.Threading.Tasks.Task<TagorServiceGetSaldo200Response> TagorServiceGetSaldoAsync(TagorServiceGetSaldoRequest? tagorServiceGetSaldoRequest = default(TagorServiceGetSaldoRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// TagorService/GetSaldo
        /// </summary>
        /// <remarks>
        /// Get the defendants balance on a file. This endpoint will create an info record (type &#x60;OPSV&#x60;) on the file indicating the balance was requested unless.   _The auto created info records can be disabled with &#x60;parameter 568&#x60;. This endpoint returns the balance with code &#x60;VRW&#x60; which is the defendants balance on the file._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetSaldoRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagorServiceGetSaldo200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagorServiceGetSaldo200Response>> TagorServiceGetSaldoWithHttpInfoAsync(TagorServiceGetSaldoRequest? tagorServiceGetSaldoRequest = default(TagorServiceGetSaldoRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// TagorService/GetVoxtronReferentie
        /// </summary>
        /// <remarks>
        /// &#x60;DossiersoortId&#x60; and &#x60;DosStatus&#x60; will be mapped if a mapping with code &#x60;VOXTRON&#x60; is available. Otherwise the id will be prefixed with &#x60;DSO&#x60;.&#x60;Parameter 303&#x60; effects the way the &#x60;Referentie&#x60; field is used to search for a file. &#x60;DosbehId&#x60; depends on &#x60;parameter 259&#x60;. See the result below for possible values. &#x60;Parameter 233&#x60; decides whether the file status or file stage status is returned in the &#x60;DosStatus&#x60; field.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetVoxtronReferentieRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagorServiceGetVoxtronReferentie200Response</returns>
        System.Threading.Tasks.Task<TagorServiceGetVoxtronReferentie200Response> TagorServiceGetVoxtronReferentieAsync(TagorServiceGetVoxtronReferentieRequest? tagorServiceGetVoxtronReferentieRequest = default(TagorServiceGetVoxtronReferentieRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// TagorService/GetVoxtronReferentie
        /// </summary>
        /// <remarks>
        /// &#x60;DossiersoortId&#x60; and &#x60;DosStatus&#x60; will be mapped if a mapping with code &#x60;VOXTRON&#x60; is available. Otherwise the id will be prefixed with &#x60;DSO&#x60;.&#x60;Parameter 303&#x60; effects the way the &#x60;Referentie&#x60; field is used to search for a file. &#x60;DosbehId&#x60; depends on &#x60;parameter 259&#x60;. See the result below for possible values. &#x60;Parameter 233&#x60; decides whether the file status or file stage status is returned in the &#x60;DosStatus&#x60; field.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetVoxtronReferentieRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagorServiceGetVoxtronReferentie200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagorServiceGetVoxtronReferentie200Response>> TagorServiceGetVoxtronReferentieWithHttpInfoAsync(TagorServiceGetVoxtronReferentieRequest? tagorServiceGetVoxtronReferentieRequest = default(TagorServiceGetVoxtronReferentieRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// TagorService/GetVoxtronVerwByHuisNr
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetVoxtronVerwByHuisNrRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagorServiceGetVoxtronVerwByHuisNr200Response</returns>
        System.Threading.Tasks.Task<TagorServiceGetVoxtronVerwByHuisNr200Response> TagorServiceGetVoxtronVerwByHuisNrAsync(TagorServiceGetVoxtronVerwByHuisNrRequest? tagorServiceGetVoxtronVerwByHuisNrRequest = default(TagorServiceGetVoxtronVerwByHuisNrRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// TagorService/GetVoxtronVerwByHuisNr
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetVoxtronVerwByHuisNrRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagorServiceGetVoxtronVerwByHuisNr200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagorServiceGetVoxtronVerwByHuisNr200Response>> TagorServiceGetVoxtronVerwByHuisNrWithHttpInfoAsync(TagorServiceGetVoxtronVerwByHuisNrRequest? tagorServiceGetVoxtronVerwByHuisNrRequest = default(TagorServiceGetVoxtronVerwByHuisNrRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// TagorService/GetVoxtronVerwByPin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetVoxtronVerwByPinRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ActionsSendMail200Response</returns>
        System.Threading.Tasks.Task<ActionsSendMail200Response> TagorServiceGetVoxtronVerwByPinAsync(TagorServiceGetVoxtronVerwByPinRequest? tagorServiceGetVoxtronVerwByPinRequest = default(TagorServiceGetVoxtronVerwByPinRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// TagorService/GetVoxtronVerwByPin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetVoxtronVerwByPinRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ActionsSendMail200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActionsSendMail200Response>> TagorServiceGetVoxtronVerwByPinWithHttpInfoAsync(TagorServiceGetVoxtronVerwByPinRequest? tagorServiceGetVoxtronVerwByPinRequest = default(TagorServiceGetVoxtronVerwByPinRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// TagorService/HashToFile
        /// </summary>
        /// <remarks>
        /// Get the corresponding file for a file-hash.   _The tokens validity period is configurable in &#x60;parameter 502&#x60;_
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceHashToFileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagorServiceHashToFile200Response</returns>
        System.Threading.Tasks.Task<TagorServiceHashToFile200Response> TagorServiceHashToFileAsync(TagorServiceHashToFileRequest? tagorServiceHashToFileRequest = default(TagorServiceHashToFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// TagorService/HashToFile
        /// </summary>
        /// <remarks>
        /// Get the corresponding file for a file-hash.   _The tokens validity period is configurable in &#x60;parameter 502&#x60;_
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceHashToFileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagorServiceHashToFile200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagorServiceHashToFile200Response>> TagorServiceHashToFileWithHttpInfoAsync(TagorServiceHashToFileRequest? tagorServiceHashToFileRequest = default(TagorServiceHashToFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// TagorService/KantoorOpen
        /// </summary>
        /// <remarks>
        /// Checks if an employe is available based on file type.   _Opening hours can be entered via the configuration menu in Tagor._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceKantoorOpenRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagorServiceKantoorOpen200Response</returns>
        System.Threading.Tasks.Task<TagorServiceKantoorOpen200Response> TagorServiceKantoorOpenAsync(TagorServiceKantoorOpenRequest? tagorServiceKantoorOpenRequest = default(TagorServiceKantoorOpenRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// TagorService/KantoorOpen
        /// </summary>
        /// <remarks>
        /// Checks if an employe is available based on file type.   _Opening hours can be entered via the configuration menu in Tagor._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceKantoorOpenRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagorServiceKantoorOpen200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagorServiceKantoorOpen200Response>> TagorServiceKantoorOpenWithHttpInfoAsync(TagorServiceKantoorOpenRequest? tagorServiceKantoorOpenRequest = default(TagorServiceKantoorOpenRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// TagorService/OnlinePaymentReceived
        /// </summary>
        /// <remarks>
        /// Creates an informative payment record on a file.   _The line&#39;s nature has to be configured in Tagor&#39;s office managment tool._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceOnlinePaymentReceivedRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ActionsSendMail200Response</returns>
        System.Threading.Tasks.Task<ActionsSendMail200Response> TagorServiceOnlinePaymentReceivedAsync(TagorServiceOnlinePaymentReceivedRequest? tagorServiceOnlinePaymentReceivedRequest = default(TagorServiceOnlinePaymentReceivedRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// TagorService/OnlinePaymentReceived
        /// </summary>
        /// <remarks>
        /// Creates an informative payment record on a file.   _The line&#39;s nature has to be configured in Tagor&#39;s office managment tool._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceOnlinePaymentReceivedRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ActionsSendMail200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActionsSendMail200Response>> TagorServiceOnlinePaymentReceivedWithHttpInfoAsync(TagorServiceOnlinePaymentReceivedRequest? tagorServiceOnlinePaymentReceivedRequest = default(TagorServiceOnlinePaymentReceivedRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// TagorService/PaymentDetails
        /// </summary>
        /// <remarks>
        /// Endpoint to get a detailed overview of the file.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagorServicePaymentDetails200Response</returns>
        System.Threading.Tasks.Task<TagorServicePaymentDetails200Response> TagorServicePaymentDetailsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// TagorService/PaymentDetails
        /// </summary>
        /// <remarks>
        /// Endpoint to get a detailed overview of the file.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagorServicePaymentDetails200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagorServicePaymentDetails200Response>> TagorServicePaymentDetailsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// TagorService/PaymentInfo
        /// </summary>
        /// <remarks>
        /// Get info about ongoing payment plans on a file.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServicePaymentInfoRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagorServicePaymentInfo200Response</returns>
        System.Threading.Tasks.Task<TagorServicePaymentInfo200Response> TagorServicePaymentInfoAsync(TagorServicePaymentInfoRequest? tagorServicePaymentInfoRequest = default(TagorServicePaymentInfoRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// TagorService/PaymentInfo
        /// </summary>
        /// <remarks>
        /// Get info about ongoing payment plans on a file.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServicePaymentInfoRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagorServicePaymentInfo200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagorServicePaymentInfo200Response>> TagorServicePaymentInfoWithHttpInfoAsync(TagorServicePaymentInfoRequest? tagorServicePaymentInfoRequest = default(TagorServicePaymentInfoRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// TagorService/PinToFile
        /// </summary>
        /// <remarks>
        /// Get the file id from a filename/pin combination. The value used in combination with the pin doesn&#39;t have to be a file name. This is configurable in Tagor.   _The value used in combination with the pincode is set in &#x60;parameter 590&#x60;. Pincodes are generated with mergefield &#x60;M_0077&#x60;._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServicePinToFileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagorServicePinToFile200Response</returns>
        System.Threading.Tasks.Task<TagorServicePinToFile200Response> TagorServicePinToFileAsync(TagorServicePinToFileRequest? tagorServicePinToFileRequest = default(TagorServicePinToFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// TagorService/PinToFile
        /// </summary>
        /// <remarks>
        /// Get the file id from a filename/pin combination. The value used in combination with the pin doesn&#39;t have to be a file name. This is configurable in Tagor.   _The value used in combination with the pincode is set in &#x60;parameter 590&#x60;. Pincodes are generated with mergefield &#x60;M_0077&#x60;._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServicePinToFileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagorServicePinToFile200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagorServicePinToFile200Response>> TagorServicePinToFileWithHttpInfoAsync(TagorServicePinToFileRequest? tagorServicePinToFileRequest = default(TagorServicePinToFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// TagorService/SavePaymentPlan
        /// </summary>
        /// <remarks>
        /// Add a payment plan to a file. This will always create a new payment plan and put all existing payment plans inactive. The input data is validated. Periodes has to be less than configured on the file type. An info records will be generated to indicate a new payment plan was requested.   _Payment plans can be auto accepted with &#x60;parameter 358&#x60;. The auto created info records can be disabled with &#x60;parameter 568. The default date can be configured in the file type config and in the office managment. &#x60;_
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceSavePaymentPlanRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagorServiceSavePaymentPlan200Response</returns>
        System.Threading.Tasks.Task<TagorServiceSavePaymentPlan200Response> TagorServiceSavePaymentPlanAsync(TagorServiceSavePaymentPlanRequest? tagorServiceSavePaymentPlanRequest = default(TagorServiceSavePaymentPlanRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// TagorService/SavePaymentPlan
        /// </summary>
        /// <remarks>
        /// Add a payment plan to a file. This will always create a new payment plan and put all existing payment plans inactive. The input data is validated. Periodes has to be less than configured on the file type. An info records will be generated to indicate a new payment plan was requested.   _Payment plans can be auto accepted with &#x60;parameter 358&#x60;. The auto created info records can be disabled with &#x60;parameter 568. The default date can be configured in the file type config and in the office managment. &#x60;_
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceSavePaymentPlanRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagorServiceSavePaymentPlan200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagorServiceSavePaymentPlan200Response>> TagorServiceSavePaymentPlanWithHttpInfoAsync(TagorServiceSavePaymentPlanRequest? tagorServiceSavePaymentPlanRequest = default(TagorServiceSavePaymentPlanRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// TagorService/ScanBarcode
        /// </summary>
        /// <remarks>
        /// Get the file/financial line connected to a barcode.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceScanBarcodeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagorServiceScanBarcode200Response</returns>
        System.Threading.Tasks.Task<TagorServiceScanBarcode200Response> TagorServiceScanBarcodeAsync(TagorServiceScanBarcodeRequest? tagorServiceScanBarcodeRequest = default(TagorServiceScanBarcodeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// TagorService/ScanBarcode
        /// </summary>
        /// <remarks>
        /// Get the file/financial line connected to a barcode.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceScanBarcodeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagorServiceScanBarcode200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagorServiceScanBarcode200Response>> TagorServiceScanBarcodeWithHttpInfoAsync(TagorServiceScanBarcodeRequest? tagorServiceScanBarcodeRequest = default(TagorServiceScanBarcodeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// TagorService/SelfServiceAllowed
        /// </summary>
        /// <remarks>
        /// Checks whether a user is allowed to request his/her file.   _Configuration should be done in Tagor&#39;s office management tool._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceSelfServiceAllowedRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ActionsSendMail200Response</returns>
        System.Threading.Tasks.Task<ActionsSendMail200Response> TagorServiceSelfServiceAllowedAsync(TagorServiceSelfServiceAllowedRequest? tagorServiceSelfServiceAllowedRequest = default(TagorServiceSelfServiceAllowedRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// TagorService/SelfServiceAllowed
        /// </summary>
        /// <remarks>
        /// Checks whether a user is allowed to request his/her file.   _Configuration should be done in Tagor&#39;s office management tool._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceSelfServiceAllowedRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ActionsSendMail200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActionsSendMail200Response>> TagorServiceSelfServiceAllowedWithHttpInfoAsync(TagorServiceSelfServiceAllowedRequest? tagorServiceSelfServiceAllowedRequest = default(TagorServiceSelfServiceAllowedRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// TagorService/SendMail
        /// </summary>
        /// <remarks>
        /// Deprecated in favor of [&#x60;Actions/SendMail&#x60;](#operation/sendMail). **Will be removed in 1.08.3000B0**.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceSendMailRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ActionsSendMail200Response</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ActionsSendMail200Response> TagorServiceSendMailAsync(TagorServiceSendMailRequest? tagorServiceSendMailRequest = default(TagorServiceSendMailRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// TagorService/SendMail
        /// </summary>
        /// <remarks>
        /// Deprecated in favor of [&#x60;Actions/SendMail&#x60;](#operation/sendMail). **Will be removed in 1.08.3000B0**.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceSendMailRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ActionsSendMail200Response)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<ActionsSendMail200Response>> TagorServiceSendMailWithHttpInfoAsync(TagorServiceSendMailRequest? tagorServiceSendMailRequest = default(TagorServiceSendMailRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// TagorService/SendSms
        /// </summary>
        /// <remarks>
        /// Deprecated in favor of [&#x60;Actions/SendSms&#x60;](#operation/sendSms). **Will be removed in 1.08.3000B0**.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceSendSmsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ActionsSendMail200Response</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ActionsSendMail200Response> TagorServiceSendSmsAsync(TagorServiceSendSmsRequest? tagorServiceSendSmsRequest = default(TagorServiceSendSmsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// TagorService/SendSms
        /// </summary>
        /// <remarks>
        /// Deprecated in favor of [&#x60;Actions/SendSms&#x60;](#operation/sendSms). **Will be removed in 1.08.3000B0**.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceSendSmsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ActionsSendMail200Response)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<ActionsSendMail200Response>> TagorServiceSendSmsWithHttpInfoAsync(TagorServiceSendSmsRequest? tagorServiceSendSmsRequest = default(TagorServiceSendSmsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// TagorService/SetUserDossier
        /// </summary>
        /// <remarks>
        /// Adds shortcut to a specific file for a specific user in Tagor.   _Default info type can be changed in the &#x60;CURCALL&#x60; mapping._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceSetUserDossierRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ActionsSendMail200Response</returns>
        System.Threading.Tasks.Task<ActionsSendMail200Response> TagorServiceSetUserDossierAsync(TagorServiceSetUserDossierRequest? tagorServiceSetUserDossierRequest = default(TagorServiceSetUserDossierRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// TagorService/SetUserDossier
        /// </summary>
        /// <remarks>
        /// Adds shortcut to a specific file for a specific user in Tagor.   _Default info type can be changed in the &#x60;CURCALL&#x60; mapping._
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceSetUserDossierRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ActionsSendMail200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActionsSendMail200Response>> TagorServiceSetUserDossierWithHttpInfoAsync(TagorServiceSetUserDossierRequest? tagorServiceSetUserDossierRequest = default(TagorServiceSetUserDossierRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITagorServiceApi : ITagorServiceApiSync, ITagorServiceApiAsync
    {
        /// <summary>
        /// Set the logger to this service
        /// </summary>
        /// <param name="loggerFactory"></param>
        public void SetLogger(ILoggerFactory loggerFactory);   
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TagorServiceApi : ITagorServiceApi
    {
        public void SetLogger(ILoggerFactory loggerFactory)
        {
            this.Client.SetLogger(loggerFactory);
            this.AsynchronousClient.SetLogger(loggerFactory);
        }

        private GDWInnovations.TagorClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TagorServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TagorServiceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TagorServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TagorServiceApi(string basePath)
        {
            this.Configuration = GDWInnovations.TagorClient.Client.Configuration.MergeConfigurations(
                GDWInnovations.TagorClient.Client.GlobalConfiguration.Instance,
                new GDWInnovations.TagorClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new GDWInnovations.TagorClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GDWInnovations.TagorClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = GDWInnovations.TagorClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TagorServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TagorServiceApi(GDWInnovations.TagorClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = GDWInnovations.TagorClient.Client.Configuration.MergeConfigurations(
                GDWInnovations.TagorClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new GDWInnovations.TagorClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GDWInnovations.TagorClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = GDWInnovations.TagorClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TagorServiceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TagorServiceApi(GDWInnovations.TagorClient.Client.ISynchronousClient client, GDWInnovations.TagorClient.Client.IAsynchronousClient asyncClient, GDWInnovations.TagorClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = GDWInnovations.TagorClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public GDWInnovations.TagorClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public GDWInnovations.TagorClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public GDWInnovations.TagorClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public GDWInnovations.TagorClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// TagorService/ApprovePaymentPlan Approve the last paymentplan on a file. If the given &#x60;Telnr&#x60; is a belgian mobile number the confirmation will be send as a text to that number. If not a mail will be send to the defendant on the file.  _The formula with code &#x60;BEVAFBET&#x60; will be used as a template to send texts/mails. Be sure this record exists._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceApprovePaymentPlanRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagorServiceApprovePaymentPlan200Response</returns>
        public TagorServiceApprovePaymentPlan200Response TagorServiceApprovePaymentPlan(TagorServiceApprovePaymentPlanRequest? tagorServiceApprovePaymentPlanRequest = default(TagorServiceApprovePaymentPlanRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<TagorServiceApprovePaymentPlan200Response> localVarResponse = TagorServiceApprovePaymentPlanWithHttpInfo(tagorServiceApprovePaymentPlanRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TagorService/ApprovePaymentPlan Approve the last paymentplan on a file. If the given &#x60;Telnr&#x60; is a belgian mobile number the confirmation will be send as a text to that number. If not a mail will be send to the defendant on the file.  _The formula with code &#x60;BEVAFBET&#x60; will be used as a template to send texts/mails. Be sure this record exists._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceApprovePaymentPlanRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagorServiceApprovePaymentPlan200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<TagorServiceApprovePaymentPlan200Response> TagorServiceApprovePaymentPlanWithHttpInfo(TagorServiceApprovePaymentPlanRequest? tagorServiceApprovePaymentPlanRequest = default(TagorServiceApprovePaymentPlanRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tagorServiceApprovePaymentPlanRequest;

            localVarRequestOptions.Operation = "TagorServiceApi.TagorServiceApprovePaymentPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TagorServiceApprovePaymentPlan200Response>("/TagorService/ApprovePaymentPlan", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TagorServiceApprovePaymentPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TagorService/ApprovePaymentPlan Approve the last paymentplan on a file. If the given &#x60;Telnr&#x60; is a belgian mobile number the confirmation will be send as a text to that number. If not a mail will be send to the defendant on the file.  _The formula with code &#x60;BEVAFBET&#x60; will be used as a template to send texts/mails. Be sure this record exists._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceApprovePaymentPlanRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagorServiceApprovePaymentPlan200Response</returns>
        public async System.Threading.Tasks.Task<TagorServiceApprovePaymentPlan200Response> TagorServiceApprovePaymentPlanAsync(TagorServiceApprovePaymentPlanRequest? tagorServiceApprovePaymentPlanRequest = default(TagorServiceApprovePaymentPlanRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<TagorServiceApprovePaymentPlan200Response> localVarResponse = await TagorServiceApprovePaymentPlanWithHttpInfoAsync(tagorServiceApprovePaymentPlanRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TagorService/ApprovePaymentPlan Approve the last paymentplan on a file. If the given &#x60;Telnr&#x60; is a belgian mobile number the confirmation will be send as a text to that number. If not a mail will be send to the defendant on the file.  _The formula with code &#x60;BEVAFBET&#x60; will be used as a template to send texts/mails. Be sure this record exists._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceApprovePaymentPlanRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagorServiceApprovePaymentPlan200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<TagorServiceApprovePaymentPlan200Response>> TagorServiceApprovePaymentPlanWithHttpInfoAsync(TagorServiceApprovePaymentPlanRequest? tagorServiceApprovePaymentPlanRequest = default(TagorServiceApprovePaymentPlanRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tagorServiceApprovePaymentPlanRequest;

            localVarRequestOptions.Operation = "TagorServiceApi.TagorServiceApprovePaymentPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TagorServiceApprovePaymentPlan200Response>("/TagorService/ApprovePaymentPlan", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TagorServiceApprovePaymentPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TagorService/ClipToFile Search for a phone number. This endpoint will return only the first matching party and its corresponding files.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceClipToFileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagorServiceClipToFile200Response</returns>
        public TagorServiceClipToFile200Response TagorServiceClipToFile(TagorServiceClipToFileRequest? tagorServiceClipToFileRequest = default(TagorServiceClipToFileRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<TagorServiceClipToFile200Response> localVarResponse = TagorServiceClipToFileWithHttpInfo(tagorServiceClipToFileRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TagorService/ClipToFile Search for a phone number. This endpoint will return only the first matching party and its corresponding files.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceClipToFileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagorServiceClipToFile200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<TagorServiceClipToFile200Response> TagorServiceClipToFileWithHttpInfo(TagorServiceClipToFileRequest? tagorServiceClipToFileRequest = default(TagorServiceClipToFileRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tagorServiceClipToFileRequest;

            localVarRequestOptions.Operation = "TagorServiceApi.TagorServiceClipToFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TagorServiceClipToFile200Response>("/TagorService/ClipToFile", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TagorServiceClipToFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TagorService/ClipToFile Search for a phone number. This endpoint will return only the first matching party and its corresponding files.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceClipToFileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagorServiceClipToFile200Response</returns>
        public async System.Threading.Tasks.Task<TagorServiceClipToFile200Response> TagorServiceClipToFileAsync(TagorServiceClipToFileRequest? tagorServiceClipToFileRequest = default(TagorServiceClipToFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<TagorServiceClipToFile200Response> localVarResponse = await TagorServiceClipToFileWithHttpInfoAsync(tagorServiceClipToFileRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TagorService/ClipToFile Search for a phone number. This endpoint will return only the first matching party and its corresponding files.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceClipToFileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagorServiceClipToFile200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<TagorServiceClipToFile200Response>> TagorServiceClipToFileWithHttpInfoAsync(TagorServiceClipToFileRequest? tagorServiceClipToFileRequest = default(TagorServiceClipToFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tagorServiceClipToFileRequest;

            localVarRequestOptions.Operation = "TagorServiceApi.TagorServiceClipToFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TagorServiceClipToFile200Response>("/TagorService/ClipToFile", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TagorServiceClipToFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TagorService/FileToHash 
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceFileToHashRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ActionsSendMail200Response</returns>
        public ActionsSendMail200Response TagorServiceFileToHash(TagorServiceFileToHashRequest? tagorServiceFileToHashRequest = default(TagorServiceFileToHashRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<ActionsSendMail200Response> localVarResponse = TagorServiceFileToHashWithHttpInfo(tagorServiceFileToHashRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TagorService/FileToHash 
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceFileToHashRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ActionsSendMail200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<ActionsSendMail200Response> TagorServiceFileToHashWithHttpInfo(TagorServiceFileToHashRequest? tagorServiceFileToHashRequest = default(TagorServiceFileToHashRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tagorServiceFileToHashRequest;

            localVarRequestOptions.Operation = "TagorServiceApi.TagorServiceFileToHash";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ActionsSendMail200Response>("/TagorService/FileToHash", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TagorServiceFileToHash", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TagorService/FileToHash 
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceFileToHashRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ActionsSendMail200Response</returns>
        public async System.Threading.Tasks.Task<ActionsSendMail200Response> TagorServiceFileToHashAsync(TagorServiceFileToHashRequest? tagorServiceFileToHashRequest = default(TagorServiceFileToHashRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<ActionsSendMail200Response> localVarResponse = await TagorServiceFileToHashWithHttpInfoAsync(tagorServiceFileToHashRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TagorService/FileToHash 
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceFileToHashRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ActionsSendMail200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<ActionsSendMail200Response>> TagorServiceFileToHashWithHttpInfoAsync(TagorServiceFileToHashRequest? tagorServiceFileToHashRequest = default(TagorServiceFileToHashRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tagorServiceFileToHashRequest;

            localVarRequestOptions.Operation = "TagorServiceApi.TagorServiceFileToHash";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ActionsSendMail200Response>("/TagorService/FileToHash", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TagorServiceFileToHash", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TagorService/GetDosInfo Get info about a file.   _&#x60;DossiersoortId&#x60; will be mapped if a mapping with code &#x60;VOXTRON&#x60; is available. Otherwise the id will be prefixed with &#x60;DSO&#x60;. &#x60;DosbehId&#x60; depends on &#x60;parameter 259&#x60;. See the result below for possible values._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetDosInfoRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagorServiceGetDosInfo200Response</returns>
        public TagorServiceGetDosInfo200Response TagorServiceGetDosInfo(TagorServiceGetDosInfoRequest? tagorServiceGetDosInfoRequest = default(TagorServiceGetDosInfoRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<TagorServiceGetDosInfo200Response> localVarResponse = TagorServiceGetDosInfoWithHttpInfo(tagorServiceGetDosInfoRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TagorService/GetDosInfo Get info about a file.   _&#x60;DossiersoortId&#x60; will be mapped if a mapping with code &#x60;VOXTRON&#x60; is available. Otherwise the id will be prefixed with &#x60;DSO&#x60;. &#x60;DosbehId&#x60; depends on &#x60;parameter 259&#x60;. See the result below for possible values._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetDosInfoRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagorServiceGetDosInfo200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<TagorServiceGetDosInfo200Response> TagorServiceGetDosInfoWithHttpInfo(TagorServiceGetDosInfoRequest? tagorServiceGetDosInfoRequest = default(TagorServiceGetDosInfoRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tagorServiceGetDosInfoRequest;

            localVarRequestOptions.Operation = "TagorServiceApi.TagorServiceGetDosInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Pin) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Hash) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TagorServiceGetDosInfo200Response>("/TagorService/GetDosInfo", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TagorServiceGetDosInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TagorService/GetDosInfo Get info about a file.   _&#x60;DossiersoortId&#x60; will be mapped if a mapping with code &#x60;VOXTRON&#x60; is available. Otherwise the id will be prefixed with &#x60;DSO&#x60;. &#x60;DosbehId&#x60; depends on &#x60;parameter 259&#x60;. See the result below for possible values._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetDosInfoRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagorServiceGetDosInfo200Response</returns>
        public async System.Threading.Tasks.Task<TagorServiceGetDosInfo200Response> TagorServiceGetDosInfoAsync(TagorServiceGetDosInfoRequest? tagorServiceGetDosInfoRequest = default(TagorServiceGetDosInfoRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<TagorServiceGetDosInfo200Response> localVarResponse = await TagorServiceGetDosInfoWithHttpInfoAsync(tagorServiceGetDosInfoRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TagorService/GetDosInfo Get info about a file.   _&#x60;DossiersoortId&#x60; will be mapped if a mapping with code &#x60;VOXTRON&#x60; is available. Otherwise the id will be prefixed with &#x60;DSO&#x60;. &#x60;DosbehId&#x60; depends on &#x60;parameter 259&#x60;. See the result below for possible values._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetDosInfoRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagorServiceGetDosInfo200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<TagorServiceGetDosInfo200Response>> TagorServiceGetDosInfoWithHttpInfoAsync(TagorServiceGetDosInfoRequest? tagorServiceGetDosInfoRequest = default(TagorServiceGetDosInfoRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tagorServiceGetDosInfoRequest;

            localVarRequestOptions.Operation = "TagorServiceApi.TagorServiceGetDosInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Pin) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Hash) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TagorServiceGetDosInfo200Response>("/TagorService/GetDosInfo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TagorServiceGetDosInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TagorService/GetPaymentPlanCriteria 
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetPaymentPlanCriteriaRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagorServiceGetPaymentPlanCriteria200Response</returns>
        public TagorServiceGetPaymentPlanCriteria200Response TagorServiceGetPaymentPlanCriteria(TagorServiceGetPaymentPlanCriteriaRequest? tagorServiceGetPaymentPlanCriteriaRequest = default(TagorServiceGetPaymentPlanCriteriaRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<TagorServiceGetPaymentPlanCriteria200Response> localVarResponse = TagorServiceGetPaymentPlanCriteriaWithHttpInfo(tagorServiceGetPaymentPlanCriteriaRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TagorService/GetPaymentPlanCriteria 
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetPaymentPlanCriteriaRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagorServiceGetPaymentPlanCriteria200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<TagorServiceGetPaymentPlanCriteria200Response> TagorServiceGetPaymentPlanCriteriaWithHttpInfo(TagorServiceGetPaymentPlanCriteriaRequest? tagorServiceGetPaymentPlanCriteriaRequest = default(TagorServiceGetPaymentPlanCriteriaRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tagorServiceGetPaymentPlanCriteriaRequest;

            localVarRequestOptions.Operation = "TagorServiceApi.TagorServiceGetPaymentPlanCriteria";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Pin) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Hash) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TagorServiceGetPaymentPlanCriteria200Response>("/TagorService/GetPaymentPlanCriteria", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TagorServiceGetPaymentPlanCriteria", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TagorService/GetPaymentPlanCriteria 
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetPaymentPlanCriteriaRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagorServiceGetPaymentPlanCriteria200Response</returns>
        public async System.Threading.Tasks.Task<TagorServiceGetPaymentPlanCriteria200Response> TagorServiceGetPaymentPlanCriteriaAsync(TagorServiceGetPaymentPlanCriteriaRequest? tagorServiceGetPaymentPlanCriteriaRequest = default(TagorServiceGetPaymentPlanCriteriaRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<TagorServiceGetPaymentPlanCriteria200Response> localVarResponse = await TagorServiceGetPaymentPlanCriteriaWithHttpInfoAsync(tagorServiceGetPaymentPlanCriteriaRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TagorService/GetPaymentPlanCriteria 
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetPaymentPlanCriteriaRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagorServiceGetPaymentPlanCriteria200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<TagorServiceGetPaymentPlanCriteria200Response>> TagorServiceGetPaymentPlanCriteriaWithHttpInfoAsync(TagorServiceGetPaymentPlanCriteriaRequest? tagorServiceGetPaymentPlanCriteriaRequest = default(TagorServiceGetPaymentPlanCriteriaRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tagorServiceGetPaymentPlanCriteriaRequest;

            localVarRequestOptions.Operation = "TagorServiceApi.TagorServiceGetPaymentPlanCriteria";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Pin) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Hash) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TagorServiceGetPaymentPlanCriteria200Response>("/TagorService/GetPaymentPlanCriteria", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TagorServiceGetPaymentPlanCriteria", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TagorService/GetSaldo Get the defendants balance on a file. This endpoint will create an info record (type &#x60;OPSV&#x60;) on the file indicating the balance was requested unless.   _The auto created info records can be disabled with &#x60;parameter 568&#x60;. This endpoint returns the balance with code &#x60;VRW&#x60; which is the defendants balance on the file._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetSaldoRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagorServiceGetSaldo200Response</returns>
        public TagorServiceGetSaldo200Response TagorServiceGetSaldo(TagorServiceGetSaldoRequest? tagorServiceGetSaldoRequest = default(TagorServiceGetSaldoRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<TagorServiceGetSaldo200Response> localVarResponse = TagorServiceGetSaldoWithHttpInfo(tagorServiceGetSaldoRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TagorService/GetSaldo Get the defendants balance on a file. This endpoint will create an info record (type &#x60;OPSV&#x60;) on the file indicating the balance was requested unless.   _The auto created info records can be disabled with &#x60;parameter 568&#x60;. This endpoint returns the balance with code &#x60;VRW&#x60; which is the defendants balance on the file._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetSaldoRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagorServiceGetSaldo200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<TagorServiceGetSaldo200Response> TagorServiceGetSaldoWithHttpInfo(TagorServiceGetSaldoRequest? tagorServiceGetSaldoRequest = default(TagorServiceGetSaldoRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tagorServiceGetSaldoRequest;

            localVarRequestOptions.Operation = "TagorServiceApi.TagorServiceGetSaldo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Pin) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Hash) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TagorServiceGetSaldo200Response>("/TagorService/GetSaldo", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TagorServiceGetSaldo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TagorService/GetSaldo Get the defendants balance on a file. This endpoint will create an info record (type &#x60;OPSV&#x60;) on the file indicating the balance was requested unless.   _The auto created info records can be disabled with &#x60;parameter 568&#x60;. This endpoint returns the balance with code &#x60;VRW&#x60; which is the defendants balance on the file._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetSaldoRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagorServiceGetSaldo200Response</returns>
        public async System.Threading.Tasks.Task<TagorServiceGetSaldo200Response> TagorServiceGetSaldoAsync(TagorServiceGetSaldoRequest? tagorServiceGetSaldoRequest = default(TagorServiceGetSaldoRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<TagorServiceGetSaldo200Response> localVarResponse = await TagorServiceGetSaldoWithHttpInfoAsync(tagorServiceGetSaldoRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TagorService/GetSaldo Get the defendants balance on a file. This endpoint will create an info record (type &#x60;OPSV&#x60;) on the file indicating the balance was requested unless.   _The auto created info records can be disabled with &#x60;parameter 568&#x60;. This endpoint returns the balance with code &#x60;VRW&#x60; which is the defendants balance on the file._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetSaldoRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagorServiceGetSaldo200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<TagorServiceGetSaldo200Response>> TagorServiceGetSaldoWithHttpInfoAsync(TagorServiceGetSaldoRequest? tagorServiceGetSaldoRequest = default(TagorServiceGetSaldoRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tagorServiceGetSaldoRequest;

            localVarRequestOptions.Operation = "TagorServiceApi.TagorServiceGetSaldo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Pin) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Hash) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TagorServiceGetSaldo200Response>("/TagorService/GetSaldo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TagorServiceGetSaldo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TagorService/GetVoxtronReferentie &#x60;DossiersoortId&#x60; and &#x60;DosStatus&#x60; will be mapped if a mapping with code &#x60;VOXTRON&#x60; is available. Otherwise the id will be prefixed with &#x60;DSO&#x60;.&#x60;Parameter 303&#x60; effects the way the &#x60;Referentie&#x60; field is used to search for a file. &#x60;DosbehId&#x60; depends on &#x60;parameter 259&#x60;. See the result below for possible values. &#x60;Parameter 233&#x60; decides whether the file status or file stage status is returned in the &#x60;DosStatus&#x60; field.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetVoxtronReferentieRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagorServiceGetVoxtronReferentie200Response</returns>
        public TagorServiceGetVoxtronReferentie200Response TagorServiceGetVoxtronReferentie(TagorServiceGetVoxtronReferentieRequest? tagorServiceGetVoxtronReferentieRequest = default(TagorServiceGetVoxtronReferentieRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<TagorServiceGetVoxtronReferentie200Response> localVarResponse = TagorServiceGetVoxtronReferentieWithHttpInfo(tagorServiceGetVoxtronReferentieRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TagorService/GetVoxtronReferentie &#x60;DossiersoortId&#x60; and &#x60;DosStatus&#x60; will be mapped if a mapping with code &#x60;VOXTRON&#x60; is available. Otherwise the id will be prefixed with &#x60;DSO&#x60;.&#x60;Parameter 303&#x60; effects the way the &#x60;Referentie&#x60; field is used to search for a file. &#x60;DosbehId&#x60; depends on &#x60;parameter 259&#x60;. See the result below for possible values. &#x60;Parameter 233&#x60; decides whether the file status or file stage status is returned in the &#x60;DosStatus&#x60; field.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetVoxtronReferentieRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagorServiceGetVoxtronReferentie200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<TagorServiceGetVoxtronReferentie200Response> TagorServiceGetVoxtronReferentieWithHttpInfo(TagorServiceGetVoxtronReferentieRequest? tagorServiceGetVoxtronReferentieRequest = default(TagorServiceGetVoxtronReferentieRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tagorServiceGetVoxtronReferentieRequest;

            localVarRequestOptions.Operation = "TagorServiceApi.TagorServiceGetVoxtronReferentie";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TagorServiceGetVoxtronReferentie200Response>("/TagorService/GetVoxtronReferentie", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TagorServiceGetVoxtronReferentie", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TagorService/GetVoxtronReferentie &#x60;DossiersoortId&#x60; and &#x60;DosStatus&#x60; will be mapped if a mapping with code &#x60;VOXTRON&#x60; is available. Otherwise the id will be prefixed with &#x60;DSO&#x60;.&#x60;Parameter 303&#x60; effects the way the &#x60;Referentie&#x60; field is used to search for a file. &#x60;DosbehId&#x60; depends on &#x60;parameter 259&#x60;. See the result below for possible values. &#x60;Parameter 233&#x60; decides whether the file status or file stage status is returned in the &#x60;DosStatus&#x60; field.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetVoxtronReferentieRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagorServiceGetVoxtronReferentie200Response</returns>
        public async System.Threading.Tasks.Task<TagorServiceGetVoxtronReferentie200Response> TagorServiceGetVoxtronReferentieAsync(TagorServiceGetVoxtronReferentieRequest? tagorServiceGetVoxtronReferentieRequest = default(TagorServiceGetVoxtronReferentieRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<TagorServiceGetVoxtronReferentie200Response> localVarResponse = await TagorServiceGetVoxtronReferentieWithHttpInfoAsync(tagorServiceGetVoxtronReferentieRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TagorService/GetVoxtronReferentie &#x60;DossiersoortId&#x60; and &#x60;DosStatus&#x60; will be mapped if a mapping with code &#x60;VOXTRON&#x60; is available. Otherwise the id will be prefixed with &#x60;DSO&#x60;.&#x60;Parameter 303&#x60; effects the way the &#x60;Referentie&#x60; field is used to search for a file. &#x60;DosbehId&#x60; depends on &#x60;parameter 259&#x60;. See the result below for possible values. &#x60;Parameter 233&#x60; decides whether the file status or file stage status is returned in the &#x60;DosStatus&#x60; field.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetVoxtronReferentieRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagorServiceGetVoxtronReferentie200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<TagorServiceGetVoxtronReferentie200Response>> TagorServiceGetVoxtronReferentieWithHttpInfoAsync(TagorServiceGetVoxtronReferentieRequest? tagorServiceGetVoxtronReferentieRequest = default(TagorServiceGetVoxtronReferentieRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tagorServiceGetVoxtronReferentieRequest;

            localVarRequestOptions.Operation = "TagorServiceApi.TagorServiceGetVoxtronReferentie";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TagorServiceGetVoxtronReferentie200Response>("/TagorService/GetVoxtronReferentie", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TagorServiceGetVoxtronReferentie", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TagorService/GetVoxtronVerwByHuisNr 
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetVoxtronVerwByHuisNrRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagorServiceGetVoxtronVerwByHuisNr200Response</returns>
        public TagorServiceGetVoxtronVerwByHuisNr200Response TagorServiceGetVoxtronVerwByHuisNr(TagorServiceGetVoxtronVerwByHuisNrRequest? tagorServiceGetVoxtronVerwByHuisNrRequest = default(TagorServiceGetVoxtronVerwByHuisNrRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<TagorServiceGetVoxtronVerwByHuisNr200Response> localVarResponse = TagorServiceGetVoxtronVerwByHuisNrWithHttpInfo(tagorServiceGetVoxtronVerwByHuisNrRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TagorService/GetVoxtronVerwByHuisNr 
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetVoxtronVerwByHuisNrRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagorServiceGetVoxtronVerwByHuisNr200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<TagorServiceGetVoxtronVerwByHuisNr200Response> TagorServiceGetVoxtronVerwByHuisNrWithHttpInfo(TagorServiceGetVoxtronVerwByHuisNrRequest? tagorServiceGetVoxtronVerwByHuisNrRequest = default(TagorServiceGetVoxtronVerwByHuisNrRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tagorServiceGetVoxtronVerwByHuisNrRequest;

            localVarRequestOptions.Operation = "TagorServiceApi.TagorServiceGetVoxtronVerwByHuisNr";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TagorServiceGetVoxtronVerwByHuisNr200Response>("/TagorService/GetVoxtronVerwByHuisNr", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TagorServiceGetVoxtronVerwByHuisNr", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TagorService/GetVoxtronVerwByHuisNr 
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetVoxtronVerwByHuisNrRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagorServiceGetVoxtronVerwByHuisNr200Response</returns>
        public async System.Threading.Tasks.Task<TagorServiceGetVoxtronVerwByHuisNr200Response> TagorServiceGetVoxtronVerwByHuisNrAsync(TagorServiceGetVoxtronVerwByHuisNrRequest? tagorServiceGetVoxtronVerwByHuisNrRequest = default(TagorServiceGetVoxtronVerwByHuisNrRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<TagorServiceGetVoxtronVerwByHuisNr200Response> localVarResponse = await TagorServiceGetVoxtronVerwByHuisNrWithHttpInfoAsync(tagorServiceGetVoxtronVerwByHuisNrRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TagorService/GetVoxtronVerwByHuisNr 
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetVoxtronVerwByHuisNrRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagorServiceGetVoxtronVerwByHuisNr200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<TagorServiceGetVoxtronVerwByHuisNr200Response>> TagorServiceGetVoxtronVerwByHuisNrWithHttpInfoAsync(TagorServiceGetVoxtronVerwByHuisNrRequest? tagorServiceGetVoxtronVerwByHuisNrRequest = default(TagorServiceGetVoxtronVerwByHuisNrRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tagorServiceGetVoxtronVerwByHuisNrRequest;

            localVarRequestOptions.Operation = "TagorServiceApi.TagorServiceGetVoxtronVerwByHuisNr";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TagorServiceGetVoxtronVerwByHuisNr200Response>("/TagorService/GetVoxtronVerwByHuisNr", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TagorServiceGetVoxtronVerwByHuisNr", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TagorService/GetVoxtronVerwByPin 
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetVoxtronVerwByPinRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ActionsSendMail200Response</returns>
        public ActionsSendMail200Response TagorServiceGetVoxtronVerwByPin(TagorServiceGetVoxtronVerwByPinRequest? tagorServiceGetVoxtronVerwByPinRequest = default(TagorServiceGetVoxtronVerwByPinRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<ActionsSendMail200Response> localVarResponse = TagorServiceGetVoxtronVerwByPinWithHttpInfo(tagorServiceGetVoxtronVerwByPinRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TagorService/GetVoxtronVerwByPin 
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetVoxtronVerwByPinRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ActionsSendMail200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<ActionsSendMail200Response> TagorServiceGetVoxtronVerwByPinWithHttpInfo(TagorServiceGetVoxtronVerwByPinRequest? tagorServiceGetVoxtronVerwByPinRequest = default(TagorServiceGetVoxtronVerwByPinRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tagorServiceGetVoxtronVerwByPinRequest;

            localVarRequestOptions.Operation = "TagorServiceApi.TagorServiceGetVoxtronVerwByPin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ActionsSendMail200Response>("/TagorService/GetVoxtronVerwByPin", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TagorServiceGetVoxtronVerwByPin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TagorService/GetVoxtronVerwByPin 
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetVoxtronVerwByPinRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ActionsSendMail200Response</returns>
        public async System.Threading.Tasks.Task<ActionsSendMail200Response> TagorServiceGetVoxtronVerwByPinAsync(TagorServiceGetVoxtronVerwByPinRequest? tagorServiceGetVoxtronVerwByPinRequest = default(TagorServiceGetVoxtronVerwByPinRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<ActionsSendMail200Response> localVarResponse = await TagorServiceGetVoxtronVerwByPinWithHttpInfoAsync(tagorServiceGetVoxtronVerwByPinRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TagorService/GetVoxtronVerwByPin 
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceGetVoxtronVerwByPinRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ActionsSendMail200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<ActionsSendMail200Response>> TagorServiceGetVoxtronVerwByPinWithHttpInfoAsync(TagorServiceGetVoxtronVerwByPinRequest? tagorServiceGetVoxtronVerwByPinRequest = default(TagorServiceGetVoxtronVerwByPinRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tagorServiceGetVoxtronVerwByPinRequest;

            localVarRequestOptions.Operation = "TagorServiceApi.TagorServiceGetVoxtronVerwByPin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ActionsSendMail200Response>("/TagorService/GetVoxtronVerwByPin", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TagorServiceGetVoxtronVerwByPin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TagorService/HashToFile Get the corresponding file for a file-hash.   _The tokens validity period is configurable in &#x60;parameter 502&#x60;_
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceHashToFileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagorServiceHashToFile200Response</returns>
        public TagorServiceHashToFile200Response TagorServiceHashToFile(TagorServiceHashToFileRequest? tagorServiceHashToFileRequest = default(TagorServiceHashToFileRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<TagorServiceHashToFile200Response> localVarResponse = TagorServiceHashToFileWithHttpInfo(tagorServiceHashToFileRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TagorService/HashToFile Get the corresponding file for a file-hash.   _The tokens validity period is configurable in &#x60;parameter 502&#x60;_
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceHashToFileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagorServiceHashToFile200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<TagorServiceHashToFile200Response> TagorServiceHashToFileWithHttpInfo(TagorServiceHashToFileRequest? tagorServiceHashToFileRequest = default(TagorServiceHashToFileRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tagorServiceHashToFileRequest;

            localVarRequestOptions.Operation = "TagorServiceApi.TagorServiceHashToFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Pin) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Hash) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TagorServiceHashToFile200Response>("/TagorService/HashToFile", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TagorServiceHashToFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TagorService/HashToFile Get the corresponding file for a file-hash.   _The tokens validity period is configurable in &#x60;parameter 502&#x60;_
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceHashToFileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagorServiceHashToFile200Response</returns>
        public async System.Threading.Tasks.Task<TagorServiceHashToFile200Response> TagorServiceHashToFileAsync(TagorServiceHashToFileRequest? tagorServiceHashToFileRequest = default(TagorServiceHashToFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<TagorServiceHashToFile200Response> localVarResponse = await TagorServiceHashToFileWithHttpInfoAsync(tagorServiceHashToFileRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TagorService/HashToFile Get the corresponding file for a file-hash.   _The tokens validity period is configurable in &#x60;parameter 502&#x60;_
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceHashToFileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagorServiceHashToFile200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<TagorServiceHashToFile200Response>> TagorServiceHashToFileWithHttpInfoAsync(TagorServiceHashToFileRequest? tagorServiceHashToFileRequest = default(TagorServiceHashToFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tagorServiceHashToFileRequest;

            localVarRequestOptions.Operation = "TagorServiceApi.TagorServiceHashToFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Pin) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Hash) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TagorServiceHashToFile200Response>("/TagorService/HashToFile", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TagorServiceHashToFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TagorService/KantoorOpen Checks if an employe is available based on file type.   _Opening hours can be entered via the configuration menu in Tagor._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceKantoorOpenRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagorServiceKantoorOpen200Response</returns>
        public TagorServiceKantoorOpen200Response TagorServiceKantoorOpen(TagorServiceKantoorOpenRequest? tagorServiceKantoorOpenRequest = default(TagorServiceKantoorOpenRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<TagorServiceKantoorOpen200Response> localVarResponse = TagorServiceKantoorOpenWithHttpInfo(tagorServiceKantoorOpenRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TagorService/KantoorOpen Checks if an employe is available based on file type.   _Opening hours can be entered via the configuration menu in Tagor._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceKantoorOpenRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagorServiceKantoorOpen200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<TagorServiceKantoorOpen200Response> TagorServiceKantoorOpenWithHttpInfo(TagorServiceKantoorOpenRequest? tagorServiceKantoorOpenRequest = default(TagorServiceKantoorOpenRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tagorServiceKantoorOpenRequest;

            localVarRequestOptions.Operation = "TagorServiceApi.TagorServiceKantoorOpen";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TagorServiceKantoorOpen200Response>("/TagorService/KantoorOpen", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TagorServiceKantoorOpen", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TagorService/KantoorOpen Checks if an employe is available based on file type.   _Opening hours can be entered via the configuration menu in Tagor._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceKantoorOpenRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagorServiceKantoorOpen200Response</returns>
        public async System.Threading.Tasks.Task<TagorServiceKantoorOpen200Response> TagorServiceKantoorOpenAsync(TagorServiceKantoorOpenRequest? tagorServiceKantoorOpenRequest = default(TagorServiceKantoorOpenRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<TagorServiceKantoorOpen200Response> localVarResponse = await TagorServiceKantoorOpenWithHttpInfoAsync(tagorServiceKantoorOpenRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TagorService/KantoorOpen Checks if an employe is available based on file type.   _Opening hours can be entered via the configuration menu in Tagor._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceKantoorOpenRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagorServiceKantoorOpen200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<TagorServiceKantoorOpen200Response>> TagorServiceKantoorOpenWithHttpInfoAsync(TagorServiceKantoorOpenRequest? tagorServiceKantoorOpenRequest = default(TagorServiceKantoorOpenRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tagorServiceKantoorOpenRequest;

            localVarRequestOptions.Operation = "TagorServiceApi.TagorServiceKantoorOpen";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TagorServiceKantoorOpen200Response>("/TagorService/KantoorOpen", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TagorServiceKantoorOpen", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TagorService/OnlinePaymentReceived Creates an informative payment record on a file.   _The line&#39;s nature has to be configured in Tagor&#39;s office managment tool._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceOnlinePaymentReceivedRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ActionsSendMail200Response</returns>
        public ActionsSendMail200Response TagorServiceOnlinePaymentReceived(TagorServiceOnlinePaymentReceivedRequest? tagorServiceOnlinePaymentReceivedRequest = default(TagorServiceOnlinePaymentReceivedRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<ActionsSendMail200Response> localVarResponse = TagorServiceOnlinePaymentReceivedWithHttpInfo(tagorServiceOnlinePaymentReceivedRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TagorService/OnlinePaymentReceived Creates an informative payment record on a file.   _The line&#39;s nature has to be configured in Tagor&#39;s office managment tool._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceOnlinePaymentReceivedRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ActionsSendMail200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<ActionsSendMail200Response> TagorServiceOnlinePaymentReceivedWithHttpInfo(TagorServiceOnlinePaymentReceivedRequest? tagorServiceOnlinePaymentReceivedRequest = default(TagorServiceOnlinePaymentReceivedRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tagorServiceOnlinePaymentReceivedRequest;

            localVarRequestOptions.Operation = "TagorServiceApi.TagorServiceOnlinePaymentReceived";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ActionsSendMail200Response>("/TagorService/OnlinePaymentReceived", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TagorServiceOnlinePaymentReceived", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TagorService/OnlinePaymentReceived Creates an informative payment record on a file.   _The line&#39;s nature has to be configured in Tagor&#39;s office managment tool._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceOnlinePaymentReceivedRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ActionsSendMail200Response</returns>
        public async System.Threading.Tasks.Task<ActionsSendMail200Response> TagorServiceOnlinePaymentReceivedAsync(TagorServiceOnlinePaymentReceivedRequest? tagorServiceOnlinePaymentReceivedRequest = default(TagorServiceOnlinePaymentReceivedRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<ActionsSendMail200Response> localVarResponse = await TagorServiceOnlinePaymentReceivedWithHttpInfoAsync(tagorServiceOnlinePaymentReceivedRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TagorService/OnlinePaymentReceived Creates an informative payment record on a file.   _The line&#39;s nature has to be configured in Tagor&#39;s office managment tool._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceOnlinePaymentReceivedRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ActionsSendMail200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<ActionsSendMail200Response>> TagorServiceOnlinePaymentReceivedWithHttpInfoAsync(TagorServiceOnlinePaymentReceivedRequest? tagorServiceOnlinePaymentReceivedRequest = default(TagorServiceOnlinePaymentReceivedRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tagorServiceOnlinePaymentReceivedRequest;

            localVarRequestOptions.Operation = "TagorServiceApi.TagorServiceOnlinePaymentReceived";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ActionsSendMail200Response>("/TagorService/OnlinePaymentReceived", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TagorServiceOnlinePaymentReceived", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TagorService/PaymentDetails Endpoint to get a detailed overview of the file.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagorServicePaymentDetails200Response</returns>
        public TagorServicePaymentDetails200Response TagorServicePaymentDetails(int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<TagorServicePaymentDetails200Response> localVarResponse = TagorServicePaymentDetailsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// TagorService/PaymentDetails Endpoint to get a detailed overview of the file.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagorServicePaymentDetails200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<TagorServicePaymentDetails200Response> TagorServicePaymentDetailsWithHttpInfo(int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TagorServiceApi.TagorServicePaymentDetails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Pin) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Hash) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TagorServicePaymentDetails200Response>("/TagorService/PaymentDetails", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TagorServicePaymentDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TagorService/PaymentDetails Endpoint to get a detailed overview of the file.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagorServicePaymentDetails200Response</returns>
        public async System.Threading.Tasks.Task<TagorServicePaymentDetails200Response> TagorServicePaymentDetailsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<TagorServicePaymentDetails200Response> localVarResponse = await TagorServicePaymentDetailsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TagorService/PaymentDetails Endpoint to get a detailed overview of the file.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagorServicePaymentDetails200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<TagorServicePaymentDetails200Response>> TagorServicePaymentDetailsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TagorServiceApi.TagorServicePaymentDetails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Pin) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Hash) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TagorServicePaymentDetails200Response>("/TagorService/PaymentDetails", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TagorServicePaymentDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TagorService/PaymentInfo Get info about ongoing payment plans on a file.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServicePaymentInfoRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagorServicePaymentInfo200Response</returns>
        public TagorServicePaymentInfo200Response TagorServicePaymentInfo(TagorServicePaymentInfoRequest? tagorServicePaymentInfoRequest = default(TagorServicePaymentInfoRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<TagorServicePaymentInfo200Response> localVarResponse = TagorServicePaymentInfoWithHttpInfo(tagorServicePaymentInfoRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TagorService/PaymentInfo Get info about ongoing payment plans on a file.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServicePaymentInfoRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagorServicePaymentInfo200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<TagorServicePaymentInfo200Response> TagorServicePaymentInfoWithHttpInfo(TagorServicePaymentInfoRequest? tagorServicePaymentInfoRequest = default(TagorServicePaymentInfoRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tagorServicePaymentInfoRequest;

            localVarRequestOptions.Operation = "TagorServiceApi.TagorServicePaymentInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Pin) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Hash) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TagorServicePaymentInfo200Response>("/TagorService/PaymentInfo", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TagorServicePaymentInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TagorService/PaymentInfo Get info about ongoing payment plans on a file.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServicePaymentInfoRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagorServicePaymentInfo200Response</returns>
        public async System.Threading.Tasks.Task<TagorServicePaymentInfo200Response> TagorServicePaymentInfoAsync(TagorServicePaymentInfoRequest? tagorServicePaymentInfoRequest = default(TagorServicePaymentInfoRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<TagorServicePaymentInfo200Response> localVarResponse = await TagorServicePaymentInfoWithHttpInfoAsync(tagorServicePaymentInfoRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TagorService/PaymentInfo Get info about ongoing payment plans on a file.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServicePaymentInfoRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagorServicePaymentInfo200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<TagorServicePaymentInfo200Response>> TagorServicePaymentInfoWithHttpInfoAsync(TagorServicePaymentInfoRequest? tagorServicePaymentInfoRequest = default(TagorServicePaymentInfoRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tagorServicePaymentInfoRequest;

            localVarRequestOptions.Operation = "TagorServiceApi.TagorServicePaymentInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Pin) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Hash) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TagorServicePaymentInfo200Response>("/TagorService/PaymentInfo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TagorServicePaymentInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TagorService/PinToFile Get the file id from a filename/pin combination. The value used in combination with the pin doesn&#39;t have to be a file name. This is configurable in Tagor.   _The value used in combination with the pincode is set in &#x60;parameter 590&#x60;. Pincodes are generated with mergefield &#x60;M_0077&#x60;._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServicePinToFileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagorServicePinToFile200Response</returns>
        public TagorServicePinToFile200Response TagorServicePinToFile(TagorServicePinToFileRequest? tagorServicePinToFileRequest = default(TagorServicePinToFileRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<TagorServicePinToFile200Response> localVarResponse = TagorServicePinToFileWithHttpInfo(tagorServicePinToFileRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TagorService/PinToFile Get the file id from a filename/pin combination. The value used in combination with the pin doesn&#39;t have to be a file name. This is configurable in Tagor.   _The value used in combination with the pincode is set in &#x60;parameter 590&#x60;. Pincodes are generated with mergefield &#x60;M_0077&#x60;._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServicePinToFileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagorServicePinToFile200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<TagorServicePinToFile200Response> TagorServicePinToFileWithHttpInfo(TagorServicePinToFileRequest? tagorServicePinToFileRequest = default(TagorServicePinToFileRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tagorServicePinToFileRequest;

            localVarRequestOptions.Operation = "TagorServiceApi.TagorServicePinToFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Pin) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Hash) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TagorServicePinToFile200Response>("/TagorService/PinToFile", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TagorServicePinToFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TagorService/PinToFile Get the file id from a filename/pin combination. The value used in combination with the pin doesn&#39;t have to be a file name. This is configurable in Tagor.   _The value used in combination with the pincode is set in &#x60;parameter 590&#x60;. Pincodes are generated with mergefield &#x60;M_0077&#x60;._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServicePinToFileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagorServicePinToFile200Response</returns>
        public async System.Threading.Tasks.Task<TagorServicePinToFile200Response> TagorServicePinToFileAsync(TagorServicePinToFileRequest? tagorServicePinToFileRequest = default(TagorServicePinToFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<TagorServicePinToFile200Response> localVarResponse = await TagorServicePinToFileWithHttpInfoAsync(tagorServicePinToFileRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TagorService/PinToFile Get the file id from a filename/pin combination. The value used in combination with the pin doesn&#39;t have to be a file name. This is configurable in Tagor.   _The value used in combination with the pincode is set in &#x60;parameter 590&#x60;. Pincodes are generated with mergefield &#x60;M_0077&#x60;._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServicePinToFileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagorServicePinToFile200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<TagorServicePinToFile200Response>> TagorServicePinToFileWithHttpInfoAsync(TagorServicePinToFileRequest? tagorServicePinToFileRequest = default(TagorServicePinToFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tagorServicePinToFileRequest;

            localVarRequestOptions.Operation = "TagorServiceApi.TagorServicePinToFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Pin) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Hash) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TagorServicePinToFile200Response>("/TagorService/PinToFile", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TagorServicePinToFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TagorService/SavePaymentPlan Add a payment plan to a file. This will always create a new payment plan and put all existing payment plans inactive. The input data is validated. Periodes has to be less than configured on the file type. An info records will be generated to indicate a new payment plan was requested.   _Payment plans can be auto accepted with &#x60;parameter 358&#x60;. The auto created info records can be disabled with &#x60;parameter 568. The default date can be configured in the file type config and in the office managment. &#x60;_
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceSavePaymentPlanRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagorServiceSavePaymentPlan200Response</returns>
        public TagorServiceSavePaymentPlan200Response TagorServiceSavePaymentPlan(TagorServiceSavePaymentPlanRequest? tagorServiceSavePaymentPlanRequest = default(TagorServiceSavePaymentPlanRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<TagorServiceSavePaymentPlan200Response> localVarResponse = TagorServiceSavePaymentPlanWithHttpInfo(tagorServiceSavePaymentPlanRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TagorService/SavePaymentPlan Add a payment plan to a file. This will always create a new payment plan and put all existing payment plans inactive. The input data is validated. Periodes has to be less than configured on the file type. An info records will be generated to indicate a new payment plan was requested.   _Payment plans can be auto accepted with &#x60;parameter 358&#x60;. The auto created info records can be disabled with &#x60;parameter 568. The default date can be configured in the file type config and in the office managment. &#x60;_
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceSavePaymentPlanRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagorServiceSavePaymentPlan200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<TagorServiceSavePaymentPlan200Response> TagorServiceSavePaymentPlanWithHttpInfo(TagorServiceSavePaymentPlanRequest? tagorServiceSavePaymentPlanRequest = default(TagorServiceSavePaymentPlanRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tagorServiceSavePaymentPlanRequest;

            localVarRequestOptions.Operation = "TagorServiceApi.TagorServiceSavePaymentPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Pin) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Hash) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TagorServiceSavePaymentPlan200Response>("/TagorService/SavePaymentPlan", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TagorServiceSavePaymentPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TagorService/SavePaymentPlan Add a payment plan to a file. This will always create a new payment plan and put all existing payment plans inactive. The input data is validated. Periodes has to be less than configured on the file type. An info records will be generated to indicate a new payment plan was requested.   _Payment plans can be auto accepted with &#x60;parameter 358&#x60;. The auto created info records can be disabled with &#x60;parameter 568. The default date can be configured in the file type config and in the office managment. &#x60;_
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceSavePaymentPlanRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagorServiceSavePaymentPlan200Response</returns>
        public async System.Threading.Tasks.Task<TagorServiceSavePaymentPlan200Response> TagorServiceSavePaymentPlanAsync(TagorServiceSavePaymentPlanRequest? tagorServiceSavePaymentPlanRequest = default(TagorServiceSavePaymentPlanRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<TagorServiceSavePaymentPlan200Response> localVarResponse = await TagorServiceSavePaymentPlanWithHttpInfoAsync(tagorServiceSavePaymentPlanRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TagorService/SavePaymentPlan Add a payment plan to a file. This will always create a new payment plan and put all existing payment plans inactive. The input data is validated. Periodes has to be less than configured on the file type. An info records will be generated to indicate a new payment plan was requested.   _Payment plans can be auto accepted with &#x60;parameter 358&#x60;. The auto created info records can be disabled with &#x60;parameter 568. The default date can be configured in the file type config and in the office managment. &#x60;_
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceSavePaymentPlanRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagorServiceSavePaymentPlan200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<TagorServiceSavePaymentPlan200Response>> TagorServiceSavePaymentPlanWithHttpInfoAsync(TagorServiceSavePaymentPlanRequest? tagorServiceSavePaymentPlanRequest = default(TagorServiceSavePaymentPlanRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tagorServiceSavePaymentPlanRequest;

            localVarRequestOptions.Operation = "TagorServiceApi.TagorServiceSavePaymentPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Pin) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Hash) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TagorServiceSavePaymentPlan200Response>("/TagorService/SavePaymentPlan", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TagorServiceSavePaymentPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TagorService/ScanBarcode Get the file/financial line connected to a barcode.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceScanBarcodeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagorServiceScanBarcode200Response</returns>
        public TagorServiceScanBarcode200Response TagorServiceScanBarcode(TagorServiceScanBarcodeRequest? tagorServiceScanBarcodeRequest = default(TagorServiceScanBarcodeRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<TagorServiceScanBarcode200Response> localVarResponse = TagorServiceScanBarcodeWithHttpInfo(tagorServiceScanBarcodeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TagorService/ScanBarcode Get the file/financial line connected to a barcode.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceScanBarcodeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagorServiceScanBarcode200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<TagorServiceScanBarcode200Response> TagorServiceScanBarcodeWithHttpInfo(TagorServiceScanBarcodeRequest? tagorServiceScanBarcodeRequest = default(TagorServiceScanBarcodeRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tagorServiceScanBarcodeRequest;

            localVarRequestOptions.Operation = "TagorServiceApi.TagorServiceScanBarcode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Pin) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Hash) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TagorServiceScanBarcode200Response>("/TagorService/ScanBarcode", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TagorServiceScanBarcode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TagorService/ScanBarcode Get the file/financial line connected to a barcode.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceScanBarcodeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagorServiceScanBarcode200Response</returns>
        public async System.Threading.Tasks.Task<TagorServiceScanBarcode200Response> TagorServiceScanBarcodeAsync(TagorServiceScanBarcodeRequest? tagorServiceScanBarcodeRequest = default(TagorServiceScanBarcodeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<TagorServiceScanBarcode200Response> localVarResponse = await TagorServiceScanBarcodeWithHttpInfoAsync(tagorServiceScanBarcodeRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TagorService/ScanBarcode Get the file/financial line connected to a barcode.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceScanBarcodeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagorServiceScanBarcode200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<TagorServiceScanBarcode200Response>> TagorServiceScanBarcodeWithHttpInfoAsync(TagorServiceScanBarcodeRequest? tagorServiceScanBarcodeRequest = default(TagorServiceScanBarcodeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tagorServiceScanBarcodeRequest;

            localVarRequestOptions.Operation = "TagorServiceApi.TagorServiceScanBarcode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Pin) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Hash) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TagorServiceScanBarcode200Response>("/TagorService/ScanBarcode", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TagorServiceScanBarcode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TagorService/SelfServiceAllowed Checks whether a user is allowed to request his/her file.   _Configuration should be done in Tagor&#39;s office management tool._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceSelfServiceAllowedRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ActionsSendMail200Response</returns>
        public ActionsSendMail200Response TagorServiceSelfServiceAllowed(TagorServiceSelfServiceAllowedRequest? tagorServiceSelfServiceAllowedRequest = default(TagorServiceSelfServiceAllowedRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<ActionsSendMail200Response> localVarResponse = TagorServiceSelfServiceAllowedWithHttpInfo(tagorServiceSelfServiceAllowedRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TagorService/SelfServiceAllowed Checks whether a user is allowed to request his/her file.   _Configuration should be done in Tagor&#39;s office management tool._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceSelfServiceAllowedRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ActionsSendMail200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<ActionsSendMail200Response> TagorServiceSelfServiceAllowedWithHttpInfo(TagorServiceSelfServiceAllowedRequest? tagorServiceSelfServiceAllowedRequest = default(TagorServiceSelfServiceAllowedRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tagorServiceSelfServiceAllowedRequest;

            localVarRequestOptions.Operation = "TagorServiceApi.TagorServiceSelfServiceAllowed";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Pin) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Hash) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ActionsSendMail200Response>("/TagorService/SelfServiceAllowed", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TagorServiceSelfServiceAllowed", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TagorService/SelfServiceAllowed Checks whether a user is allowed to request his/her file.   _Configuration should be done in Tagor&#39;s office management tool._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceSelfServiceAllowedRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ActionsSendMail200Response</returns>
        public async System.Threading.Tasks.Task<ActionsSendMail200Response> TagorServiceSelfServiceAllowedAsync(TagorServiceSelfServiceAllowedRequest? tagorServiceSelfServiceAllowedRequest = default(TagorServiceSelfServiceAllowedRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<ActionsSendMail200Response> localVarResponse = await TagorServiceSelfServiceAllowedWithHttpInfoAsync(tagorServiceSelfServiceAllowedRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TagorService/SelfServiceAllowed Checks whether a user is allowed to request his/her file.   _Configuration should be done in Tagor&#39;s office management tool._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceSelfServiceAllowedRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ActionsSendMail200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<ActionsSendMail200Response>> TagorServiceSelfServiceAllowedWithHttpInfoAsync(TagorServiceSelfServiceAllowedRequest? tagorServiceSelfServiceAllowedRequest = default(TagorServiceSelfServiceAllowedRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tagorServiceSelfServiceAllowedRequest;

            localVarRequestOptions.Operation = "TagorServiceApi.TagorServiceSelfServiceAllowed";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Pin) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Hash) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ActionsSendMail200Response>("/TagorService/SelfServiceAllowed", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TagorServiceSelfServiceAllowed", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TagorService/SendMail Deprecated in favor of [&#x60;Actions/SendMail&#x60;](#operation/sendMail). **Will be removed in 1.08.3000B0**.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceSendMailRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ActionsSendMail200Response</returns>
        [Obsolete]
        public ActionsSendMail200Response TagorServiceSendMail(TagorServiceSendMailRequest? tagorServiceSendMailRequest = default(TagorServiceSendMailRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<ActionsSendMail200Response> localVarResponse = TagorServiceSendMailWithHttpInfo(tagorServiceSendMailRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TagorService/SendMail Deprecated in favor of [&#x60;Actions/SendMail&#x60;](#operation/sendMail). **Will be removed in 1.08.3000B0**.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceSendMailRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ActionsSendMail200Response</returns>
        [Obsolete]
        public GDWInnovations.TagorClient.Client.ApiResponse<ActionsSendMail200Response> TagorServiceSendMailWithHttpInfo(TagorServiceSendMailRequest? tagorServiceSendMailRequest = default(TagorServiceSendMailRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tagorServiceSendMailRequest;

            localVarRequestOptions.Operation = "TagorServiceApi.TagorServiceSendMail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ActionsSendMail200Response>("/TagorService/SendMail", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TagorServiceSendMail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TagorService/SendMail Deprecated in favor of [&#x60;Actions/SendMail&#x60;](#operation/sendMail). **Will be removed in 1.08.3000B0**.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceSendMailRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ActionsSendMail200Response</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ActionsSendMail200Response> TagorServiceSendMailAsync(TagorServiceSendMailRequest? tagorServiceSendMailRequest = default(TagorServiceSendMailRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<ActionsSendMail200Response> localVarResponse = await TagorServiceSendMailWithHttpInfoAsync(tagorServiceSendMailRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TagorService/SendMail Deprecated in favor of [&#x60;Actions/SendMail&#x60;](#operation/sendMail). **Will be removed in 1.08.3000B0**.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceSendMailRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ActionsSendMail200Response)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<ActionsSendMail200Response>> TagorServiceSendMailWithHttpInfoAsync(TagorServiceSendMailRequest? tagorServiceSendMailRequest = default(TagorServiceSendMailRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tagorServiceSendMailRequest;

            localVarRequestOptions.Operation = "TagorServiceApi.TagorServiceSendMail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ActionsSendMail200Response>("/TagorService/SendMail", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TagorServiceSendMail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TagorService/SendSms Deprecated in favor of [&#x60;Actions/SendSms&#x60;](#operation/sendSms). **Will be removed in 1.08.3000B0**.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceSendSmsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ActionsSendMail200Response</returns>
        [Obsolete]
        public ActionsSendMail200Response TagorServiceSendSms(TagorServiceSendSmsRequest? tagorServiceSendSmsRequest = default(TagorServiceSendSmsRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<ActionsSendMail200Response> localVarResponse = TagorServiceSendSmsWithHttpInfo(tagorServiceSendSmsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TagorService/SendSms Deprecated in favor of [&#x60;Actions/SendSms&#x60;](#operation/sendSms). **Will be removed in 1.08.3000B0**.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceSendSmsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ActionsSendMail200Response</returns>
        [Obsolete]
        public GDWInnovations.TagorClient.Client.ApiResponse<ActionsSendMail200Response> TagorServiceSendSmsWithHttpInfo(TagorServiceSendSmsRequest? tagorServiceSendSmsRequest = default(TagorServiceSendSmsRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tagorServiceSendSmsRequest;

            localVarRequestOptions.Operation = "TagorServiceApi.TagorServiceSendSms";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ActionsSendMail200Response>("/TagorService/SendSms", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TagorServiceSendSms", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TagorService/SendSms Deprecated in favor of [&#x60;Actions/SendSms&#x60;](#operation/sendSms). **Will be removed in 1.08.3000B0**.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceSendSmsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ActionsSendMail200Response</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ActionsSendMail200Response> TagorServiceSendSmsAsync(TagorServiceSendSmsRequest? tagorServiceSendSmsRequest = default(TagorServiceSendSmsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<ActionsSendMail200Response> localVarResponse = await TagorServiceSendSmsWithHttpInfoAsync(tagorServiceSendSmsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TagorService/SendSms Deprecated in favor of [&#x60;Actions/SendSms&#x60;](#operation/sendSms). **Will be removed in 1.08.3000B0**.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceSendSmsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ActionsSendMail200Response)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<ActionsSendMail200Response>> TagorServiceSendSmsWithHttpInfoAsync(TagorServiceSendSmsRequest? tagorServiceSendSmsRequest = default(TagorServiceSendSmsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tagorServiceSendSmsRequest;

            localVarRequestOptions.Operation = "TagorServiceApi.TagorServiceSendSms";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ActionsSendMail200Response>("/TagorService/SendSms", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TagorServiceSendSms", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TagorService/SetUserDossier Adds shortcut to a specific file for a specific user in Tagor.   _Default info type can be changed in the &#x60;CURCALL&#x60; mapping._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceSetUserDossierRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ActionsSendMail200Response</returns>
        public ActionsSendMail200Response TagorServiceSetUserDossier(TagorServiceSetUserDossierRequest? tagorServiceSetUserDossierRequest = default(TagorServiceSetUserDossierRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<ActionsSendMail200Response> localVarResponse = TagorServiceSetUserDossierWithHttpInfo(tagorServiceSetUserDossierRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TagorService/SetUserDossier Adds shortcut to a specific file for a specific user in Tagor.   _Default info type can be changed in the &#x60;CURCALL&#x60; mapping._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceSetUserDossierRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ActionsSendMail200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<ActionsSendMail200Response> TagorServiceSetUserDossierWithHttpInfo(TagorServiceSetUserDossierRequest? tagorServiceSetUserDossierRequest = default(TagorServiceSetUserDossierRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tagorServiceSetUserDossierRequest;

            localVarRequestOptions.Operation = "TagorServiceApi.TagorServiceSetUserDossier";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ActionsSendMail200Response>("/TagorService/SetUserDossier", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TagorServiceSetUserDossier", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TagorService/SetUserDossier Adds shortcut to a specific file for a specific user in Tagor.   _Default info type can be changed in the &#x60;CURCALL&#x60; mapping._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceSetUserDossierRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ActionsSendMail200Response</returns>
        public async System.Threading.Tasks.Task<ActionsSendMail200Response> TagorServiceSetUserDossierAsync(TagorServiceSetUserDossierRequest? tagorServiceSetUserDossierRequest = default(TagorServiceSetUserDossierRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<ActionsSendMail200Response> localVarResponse = await TagorServiceSetUserDossierWithHttpInfoAsync(tagorServiceSetUserDossierRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TagorService/SetUserDossier Adds shortcut to a specific file for a specific user in Tagor.   _Default info type can be changed in the &#x60;CURCALL&#x60; mapping._
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagorServiceSetUserDossierRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ActionsSendMail200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<ActionsSendMail200Response>> TagorServiceSetUserDossierWithHttpInfoAsync(TagorServiceSetUserDossierRequest? tagorServiceSetUserDossierRequest = default(TagorServiceSetUserDossierRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tagorServiceSetUserDossierRequest;

            localVarRequestOptions.Operation = "TagorServiceApi.TagorServiceSetUserDossier";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ActionsSendMail200Response>("/TagorService/SetUserDossier", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TagorServiceSetUserDossier", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}