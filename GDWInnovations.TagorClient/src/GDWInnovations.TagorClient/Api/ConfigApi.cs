/*
 * Tagor API
 *
 * Release date: 29/09/2022  ## REQUIREMENTS This version __requires__ Tagor >= 2.00.0000B0. Use [`Config/Info`](#operation/ConfigInfo) to get the active API version.  ## CHANGELOG - New [`Dossier/CreateAgenda`](#operation/DossierCreateAgenda) endpoint. - New return values in GetAgenda 'TJOB_Id, TJOBM_Id, TUSER_Id, Manueel and IsGeblokkeerd' - In CreateLine you can now add if the line is fixed with 'IsFixed' - In CreateLine you can now add a subarray with the intrests  ## INFO - Using the download button at the top you can import this collection of endpoints in **Postman** - In general all TQ(...)_Id fields are default fields which you can translate with the [`Code/GetDescription`](#operation/CodeGetDescription) endpoint. If you need an id to post to one of the endpoints you can use the [`Code/GetList`](#operation/CodeGetList) endpoint to get all possible values or [`Code/GetDescription`](#operation/CodeGetDescription) to get a value by code. These id's will be marked as `code id` in the documentation. - We chose to return all ids as string because these are 64bit integers which are too big for javascript to handle. - All italic text below the endpoint description is meant for people with access to Tagor. - The user needs an email address configured in Tagor for the services to work properly. - Pass the `Accept` header with `application/json` as value to have the server return errors in json format. - Most endpoints can be batched/paged by passing a `BATCH-SIZE` and `BATCH-NUMBER` record in `dsWebContext`.  # AUTHENTICATION Pass your token via an `Authorization` header like this: `Authorization: {bearer_format} {token}`.  ex: `Authorization: TGR IcoQbVw7wE...PPUPda61ET` <!- - ReDoc-Inject: <security-definitions> - ->
 *
 * The version of the OpenAPI document: 2.00.0000B1
 * Contact: info@organi.be
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Microsoft.Extensions.Logging;
using GDWInnovations.TagorClient.Client;
using GDWInnovations.TagorClient.Model;

namespace GDWInnovations.TagorClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConfigApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Config/DefendantSettings
        /// </summary>
        /// <remarks>
        /// Get general settings.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConfigVersion200Response</returns>
        ConfigVersion200Response ConfigDefendantSettings(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0);

        /// <summary>
        /// Config/DefendantSettings
        /// </summary>
        /// <remarks>
        /// Get general settings.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConfigVersion200Response</returns>
        ApiResponse<ConfigVersion200Response> ConfigDefendantSettingsWithHttpInfo(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0);
        /// <summary>
        /// Config/GetRequestableDocuments
        /// </summary>
        /// <remarks>
        /// Returns a list of all documents the user can generate.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConfigGetRequestableDocuments200Response</returns>
        ConfigGetRequestableDocuments200Response ConfigGetRequestableDocuments(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0);

        /// <summary>
        /// Config/GetRequestableDocuments
        /// </summary>
        /// <remarks>
        /// Returns a list of all documents the user can generate.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConfigGetRequestableDocuments200Response</returns>
        ApiResponse<ConfigGetRequestableDocuments200Response> ConfigGetRequestableDocumentsWithHttpInfo(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0);
        /// <summary>
        /// Config/Info
        /// </summary>
        /// <remarks>
        /// Returns info about the bailiff&#39;s office. When called with a valid &#x60;Authorization&#x60; header the endpoint will return some technical info about the API aswell.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConfigInfo200Response</returns>
        ConfigInfo200Response ConfigInfo(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0);

        /// <summary>
        /// Config/Info
        /// </summary>
        /// <remarks>
        /// Returns info about the bailiff&#39;s office. When called with a valid &#x60;Authorization&#x60; header the endpoint will return some technical info about the API aswell.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConfigInfo200Response</returns>
        ApiResponse<ConfigInfo200Response> ConfigInfoWithHttpInfo(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0);
        /// <summary>
        /// Config/Ping
        /// </summary>
        /// <remarks>
        /// Checks the connection to the API and Tagor
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConfigVersion200Response</returns>
        ConfigVersion200Response ConfigPing(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0);

        /// <summary>
        /// Config/Ping
        /// </summary>
        /// <remarks>
        /// Checks the connection to the API and Tagor
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConfigVersion200Response</returns>
        ApiResponse<ConfigVersion200Response> ConfigPingWithHttpInfo(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0);
        /// <summary>
        /// Config/Ping
        /// </summary>
        /// <remarks>
        /// Checks the connection to the API and Tagor
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConfigVersion200Response</returns>
        ConfigVersion200Response ConfigPingGet(int operationIndex = 0);

        /// <summary>
        /// Config/Ping
        /// </summary>
        /// <remarks>
        /// Checks the connection to the API and Tagor
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConfigVersion200Response</returns>
        ApiResponse<ConfigVersion200Response> ConfigPingGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Config/User
        /// </summary>
        /// <remarks>
        /// Return info about the current user.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConfigInfo200Response</returns>
        ConfigInfo200Response ConfigUser(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0);

        /// <summary>
        /// Config/User
        /// </summary>
        /// <remarks>
        /// Return info about the current user.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConfigInfo200Response</returns>
        ApiResponse<ConfigInfo200Response> ConfigUserWithHttpInfo(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0);
        /// <summary>
        /// Config/Version
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConfigVersion200Response</returns>
        ConfigVersion200Response ConfigVersion(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0);

        /// <summary>
        /// Config/Version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConfigVersion200Response</returns>
        ApiResponse<ConfigVersion200Response> ConfigVersionWithHttpInfo(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConfigApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Config/DefendantSettings
        /// </summary>
        /// <remarks>
        /// Get general settings.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfigVersion200Response</returns>
        System.Threading.Tasks.Task<ConfigVersion200Response> ConfigDefendantSettingsAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Config/DefendantSettings
        /// </summary>
        /// <remarks>
        /// Get general settings.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfigVersion200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConfigVersion200Response>> ConfigDefendantSettingsWithHttpInfoAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Config/GetRequestableDocuments
        /// </summary>
        /// <remarks>
        /// Returns a list of all documents the user can generate.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfigGetRequestableDocuments200Response</returns>
        System.Threading.Tasks.Task<ConfigGetRequestableDocuments200Response> ConfigGetRequestableDocumentsAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Config/GetRequestableDocuments
        /// </summary>
        /// <remarks>
        /// Returns a list of all documents the user can generate.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfigGetRequestableDocuments200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConfigGetRequestableDocuments200Response>> ConfigGetRequestableDocumentsWithHttpInfoAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Config/Info
        /// </summary>
        /// <remarks>
        /// Returns info about the bailiff&#39;s office. When called with a valid &#x60;Authorization&#x60; header the endpoint will return some technical info about the API aswell.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfigInfo200Response</returns>
        System.Threading.Tasks.Task<ConfigInfo200Response> ConfigInfoAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Config/Info
        /// </summary>
        /// <remarks>
        /// Returns info about the bailiff&#39;s office. When called with a valid &#x60;Authorization&#x60; header the endpoint will return some technical info about the API aswell.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfigInfo200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConfigInfo200Response>> ConfigInfoWithHttpInfoAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Config/Ping
        /// </summary>
        /// <remarks>
        /// Checks the connection to the API and Tagor
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfigVersion200Response</returns>
        System.Threading.Tasks.Task<ConfigVersion200Response> ConfigPingAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Config/Ping
        /// </summary>
        /// <remarks>
        /// Checks the connection to the API and Tagor
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfigVersion200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConfigVersion200Response>> ConfigPingWithHttpInfoAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Config/Ping
        /// </summary>
        /// <remarks>
        /// Checks the connection to the API and Tagor
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfigVersion200Response</returns>
        System.Threading.Tasks.Task<ConfigVersion200Response> ConfigPingGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Config/Ping
        /// </summary>
        /// <remarks>
        /// Checks the connection to the API and Tagor
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfigVersion200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConfigVersion200Response>> ConfigPingGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Config/User
        /// </summary>
        /// <remarks>
        /// Return info about the current user.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfigInfo200Response</returns>
        System.Threading.Tasks.Task<ConfigInfo200Response> ConfigUserAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Config/User
        /// </summary>
        /// <remarks>
        /// Return info about the current user.
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfigInfo200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConfigInfo200Response>> ConfigUserWithHttpInfoAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Config/Version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfigVersion200Response</returns>
        System.Threading.Tasks.Task<ConfigVersion200Response> ConfigVersionAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Config/Version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfigVersion200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConfigVersion200Response>> ConfigVersionWithHttpInfoAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConfigApi : IConfigApiSync, IConfigApiAsync
    {
        /// <summary>
        /// Set the logger to this service
        /// </summary>
        /// <param name="loggerFactory"></param>
        public void SetLogger(ILoggerFactory loggerFactory);   
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ConfigApi : IConfigApi
    {
        public void SetLogger(ILoggerFactory loggerFactory)
        {
            this.Client.SetLogger(loggerFactory);
            this.AsynchronousClient.SetLogger(loggerFactory);
        }

        private GDWInnovations.TagorClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConfigApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConfigApi(string basePath)
        {
            this.Configuration = GDWInnovations.TagorClient.Client.Configuration.MergeConfigurations(
                GDWInnovations.TagorClient.Client.GlobalConfiguration.Instance,
                new GDWInnovations.TagorClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new GDWInnovations.TagorClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GDWInnovations.TagorClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = GDWInnovations.TagorClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConfigApi(GDWInnovations.TagorClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = GDWInnovations.TagorClient.Client.Configuration.MergeConfigurations(
                GDWInnovations.TagorClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new GDWInnovations.TagorClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GDWInnovations.TagorClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = GDWInnovations.TagorClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ConfigApi(GDWInnovations.TagorClient.Client.ISynchronousClient client, GDWInnovations.TagorClient.Client.IAsynchronousClient asyncClient, GDWInnovations.TagorClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = GDWInnovations.TagorClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public GDWInnovations.TagorClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public GDWInnovations.TagorClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public GDWInnovations.TagorClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public GDWInnovations.TagorClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Config/DefendantSettings Get general settings.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConfigVersion200Response</returns>
        public ConfigVersion200Response ConfigDefendantSettings(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<ConfigVersion200Response> localVarResponse = ConfigDefendantSettingsWithHttpInfo(codeGetListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Config/DefendantSettings Get general settings.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConfigVersion200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<ConfigVersion200Response> ConfigDefendantSettingsWithHttpInfo(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = codeGetListRequest;

            localVarRequestOptions.Operation = "ConfigApi.ConfigDefendantSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Pin) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Hash) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ConfigVersion200Response>("/Config/DefendantSettings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConfigDefendantSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Config/DefendantSettings Get general settings.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfigVersion200Response</returns>
        public async System.Threading.Tasks.Task<ConfigVersion200Response> ConfigDefendantSettingsAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<ConfigVersion200Response> localVarResponse = await ConfigDefendantSettingsWithHttpInfoAsync(codeGetListRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Config/DefendantSettings Get general settings.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfigVersion200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<ConfigVersion200Response>> ConfigDefendantSettingsWithHttpInfoAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = codeGetListRequest;

            localVarRequestOptions.Operation = "ConfigApi.ConfigDefendantSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Pin) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Hash) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ConfigVersion200Response>("/Config/DefendantSettings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConfigDefendantSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Config/GetRequestableDocuments Returns a list of all documents the user can generate.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConfigGetRequestableDocuments200Response</returns>
        public ConfigGetRequestableDocuments200Response ConfigGetRequestableDocuments(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<ConfigGetRequestableDocuments200Response> localVarResponse = ConfigGetRequestableDocumentsWithHttpInfo(codeGetListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Config/GetRequestableDocuments Returns a list of all documents the user can generate.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConfigGetRequestableDocuments200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<ConfigGetRequestableDocuments200Response> ConfigGetRequestableDocumentsWithHttpInfo(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = codeGetListRequest;

            localVarRequestOptions.Operation = "ConfigApi.ConfigGetRequestableDocuments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ConfigGetRequestableDocuments200Response>("/Config/GetRequestableDocuments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConfigGetRequestableDocuments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Config/GetRequestableDocuments Returns a list of all documents the user can generate.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfigGetRequestableDocuments200Response</returns>
        public async System.Threading.Tasks.Task<ConfigGetRequestableDocuments200Response> ConfigGetRequestableDocumentsAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<ConfigGetRequestableDocuments200Response> localVarResponse = await ConfigGetRequestableDocumentsWithHttpInfoAsync(codeGetListRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Config/GetRequestableDocuments Returns a list of all documents the user can generate.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfigGetRequestableDocuments200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<ConfigGetRequestableDocuments200Response>> ConfigGetRequestableDocumentsWithHttpInfoAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = codeGetListRequest;

            localVarRequestOptions.Operation = "ConfigApi.ConfigGetRequestableDocuments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ConfigGetRequestableDocuments200Response>("/Config/GetRequestableDocuments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConfigGetRequestableDocuments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Config/Info Returns info about the bailiff&#39;s office. When called with a valid &#x60;Authorization&#x60; header the endpoint will return some technical info about the API aswell.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConfigInfo200Response</returns>
        public ConfigInfo200Response ConfigInfo(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<ConfigInfo200Response> localVarResponse = ConfigInfoWithHttpInfo(codeGetListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Config/Info Returns info about the bailiff&#39;s office. When called with a valid &#x60;Authorization&#x60; header the endpoint will return some technical info about the API aswell.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConfigInfo200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<ConfigInfo200Response> ConfigInfoWithHttpInfo(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = codeGetListRequest;

            localVarRequestOptions.Operation = "ConfigApi.ConfigInfo";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ConfigInfo200Response>("/Config/Info", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConfigInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Config/Info Returns info about the bailiff&#39;s office. When called with a valid &#x60;Authorization&#x60; header the endpoint will return some technical info about the API aswell.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfigInfo200Response</returns>
        public async System.Threading.Tasks.Task<ConfigInfo200Response> ConfigInfoAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<ConfigInfo200Response> localVarResponse = await ConfigInfoWithHttpInfoAsync(codeGetListRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Config/Info Returns info about the bailiff&#39;s office. When called with a valid &#x60;Authorization&#x60; header the endpoint will return some technical info about the API aswell.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfigInfo200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<ConfigInfo200Response>> ConfigInfoWithHttpInfoAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = codeGetListRequest;

            localVarRequestOptions.Operation = "ConfigApi.ConfigInfo";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ConfigInfo200Response>("/Config/Info", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConfigInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Config/Ping Checks the connection to the API and Tagor
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConfigVersion200Response</returns>
        public ConfigVersion200Response ConfigPing(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<ConfigVersion200Response> localVarResponse = ConfigPingWithHttpInfo(codeGetListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Config/Ping Checks the connection to the API and Tagor
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConfigVersion200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<ConfigVersion200Response> ConfigPingWithHttpInfo(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = codeGetListRequest;

            localVarRequestOptions.Operation = "ConfigApi.ConfigPing";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ConfigVersion200Response>("/Config/Ping", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConfigPing", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Config/Ping Checks the connection to the API and Tagor
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfigVersion200Response</returns>
        public async System.Threading.Tasks.Task<ConfigVersion200Response> ConfigPingAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<ConfigVersion200Response> localVarResponse = await ConfigPingWithHttpInfoAsync(codeGetListRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Config/Ping Checks the connection to the API and Tagor
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfigVersion200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<ConfigVersion200Response>> ConfigPingWithHttpInfoAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = codeGetListRequest;

            localVarRequestOptions.Operation = "ConfigApi.ConfigPing";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ConfigVersion200Response>("/Config/Ping", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConfigPing", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Config/Ping Checks the connection to the API and Tagor
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConfigVersion200Response</returns>
        public ConfigVersion200Response ConfigPingGet(int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<ConfigVersion200Response> localVarResponse = ConfigPingGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Config/Ping Checks the connection to the API and Tagor
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConfigVersion200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<ConfigVersion200Response> ConfigPingGetWithHttpInfo(int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ConfigApi.ConfigPingGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ConfigVersion200Response>("/Config/Ping", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConfigPingGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Config/Ping Checks the connection to the API and Tagor
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfigVersion200Response</returns>
        public async System.Threading.Tasks.Task<ConfigVersion200Response> ConfigPingGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<ConfigVersion200Response> localVarResponse = await ConfigPingGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Config/Ping Checks the connection to the API and Tagor
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfigVersion200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<ConfigVersion200Response>> ConfigPingGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ConfigApi.ConfigPingGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ConfigVersion200Response>("/Config/Ping", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConfigPingGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Config/User Return info about the current user.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConfigInfo200Response</returns>
        public ConfigInfo200Response ConfigUser(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<ConfigInfo200Response> localVarResponse = ConfigUserWithHttpInfo(codeGetListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Config/User Return info about the current user.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConfigInfo200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<ConfigInfo200Response> ConfigUserWithHttpInfo(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = codeGetListRequest;

            localVarRequestOptions.Operation = "ConfigApi.ConfigUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ConfigInfo200Response>("/Config/User", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConfigUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Config/User Return info about the current user.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfigInfo200Response</returns>
        public async System.Threading.Tasks.Task<ConfigInfo200Response> ConfigUserAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<ConfigInfo200Response> localVarResponse = await ConfigUserWithHttpInfoAsync(codeGetListRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Config/User Return info about the current user.
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfigInfo200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<ConfigInfo200Response>> ConfigUserWithHttpInfoAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = codeGetListRequest;

            localVarRequestOptions.Operation = "ConfigApi.ConfigUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Orng) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Tgr) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ConfigInfo200Response>("/Config/User", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConfigUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Config/Version 
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConfigVersion200Response</returns>
        public ConfigVersion200Response ConfigVersion(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.ApiResponse<ConfigVersion200Response> localVarResponse = ConfigVersionWithHttpInfo(codeGetListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Config/Version 
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConfigVersion200Response</returns>
        public GDWInnovations.TagorClient.Client.ApiResponse<ConfigVersion200Response> ConfigVersionWithHttpInfo(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0)
        {
            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = codeGetListRequest;

            localVarRequestOptions.Operation = "ConfigApi.ConfigVersion";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ConfigVersion200Response>("/Config/Version", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConfigVersion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Config/Version 
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfigVersion200Response</returns>
        public async System.Threading.Tasks.Task<ConfigVersion200Response> ConfigVersionAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GDWInnovations.TagorClient.Client.ApiResponse<ConfigVersion200Response> localVarResponse = await ConfigVersionWithHttpInfoAsync(codeGetListRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Config/Version 
        /// </summary>
        /// <exception cref="GDWInnovations.TagorClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeGetListRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfigVersion200Response)</returns>
        public async System.Threading.Tasks.Task<GDWInnovations.TagorClient.Client.ApiResponse<ConfigVersion200Response>> ConfigVersionWithHttpInfoAsync(CodeGetListRequest? codeGetListRequest = default(CodeGetListRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GDWInnovations.TagorClient.Client.RequestOptions localVarRequestOptions = new GDWInnovations.TagorClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GDWInnovations.TagorClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = codeGetListRequest;

            localVarRequestOptions.Operation = "ConfigApi.ConfigVersion";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ConfigVersion200Response>("/Config/Version", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConfigVersion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}